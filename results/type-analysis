"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:56.171: Step 0"
"No predicates found"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:56.455: Step 0"
"No predicates found"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:56.585: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:56.761: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:56.939: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:57.210: Step 0"
"2019-05-12T20:16:57.383: Step 1"
{{:name "_4268", :record-type :var} {:record-type :any}, {:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "XAbs", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "_4012", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4016", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "_498", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_4090", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:57.787: Step 0"
"2019-05-12T20:16:57.839: Step 1"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Pager", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{{:name "PagerIn", :record-type :var} {:record-type :ground}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "_Status", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:58.531: Step 0"
"2019-05-12T20:16:58.553: Step 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "Out", :record-type :var} {:record-type :ground}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:16:58.792: Step 0"
"2019-05-12T20:17:01.212: Step 1"
"2019-05-12T20:17:02.935: Step 2"
{{:name "_3986", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_4002", :record-type :var} {:record-type :any}}
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4010", :record-type :var} {:record-type :any}, {:name "_4012", :record-type :var} {:record-type :any}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{}
{}
{{:name "X", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:name "A", :record-type :var} {:record-type :any}}
{}
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:05.099: Step 0"
"2019-05-12T20:17:05.128: Step 1"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ServiceName", :record-type :var} {:record-type :any}, {:name "Env", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_944", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "PortAtom", :record-type :var} {:record-type :any}, {:name "ServiceAtom", :record-type :var} {:record-type :any}}
{{:name "ServiceAtom", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:05.460: Step 0"
"2019-05-12T20:17:05.588: Step 1"
"2019-05-12T20:17:05.699: Step 2"
"2019-05-12T20:17:05.831: Step 3"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :nonvar}}
{{:name "A", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "_4028", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}}
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "L", :record-type :var} {:record-type :nonvar}}
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "L", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}, {:name "Bs_", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "Es1", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B_", :record-type :var} {:record-type :any}, {:name "Es", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :nonvar}, {:name "Ps", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B1", :record-type :var} {:record-type :any}, {:name "Ms", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:06.167: Step 0"
"2019-05-12T20:17:06.284: Step 1"
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "_4040", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "_4032", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :nonvar}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "_4034", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_4036", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "ResTerm", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "LTerm", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Arg2", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Res1", :record-type :var} {:record-type :any}, {:name "Arg1", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Tmp", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_484", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Expr", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "GsT", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}}
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Var", :record-type :var} {:record-type :any}, {:name "ArgsRes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_464", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}}
{{:name "Gs", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{{:name "RH", :record-type :var} {:record-type :any}, {:name "NB", :record-type :var} {:record-type :any}, {:name "RB", :record-type :var} {:record-type :any}, {:name "_680", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_678", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_576", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}}
{{:name "R", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}}
{{:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:07.932: Step 0"
"2019-05-12T20:17:07.984: Step 1"
{{:name "Secret", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Secret", :record-type :var} {:record-type :any}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "ListofData", :record-type :var} {:arglist ({:functor "=", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "ErrorCode", :record-type :var} {:record-type :any}}
{{:name "ErrorCode", :record-type :var} {:record-type :any}, {:name "My_Search", :record-type :var} {:record-type :any}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :atom}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}}
{{:name "Search", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Components0", :record-type :var} {:record-type :any}, {:name "Components", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :any}, {:name "Search0", :record-type :var} {:record-type :any}}
{{:name "Var", :record-type :var} {:record-type :var}, {:name "Params", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "AllParams", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String0", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:08.339: Step 0"
"2019-05-12T20:17:08.399: Step 1"
{{:name "TypeValues", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "TypeSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "DictSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Keys", :record-type :var} {:record-type :any}, {:name "TypePairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "DictValues", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "DictPairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Spec1", :record-type :var} {:record-type :any}, {:name "Spec2", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:08.653: Step 0"
"2019-05-12T20:17:08.894: Step 1"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:record-type :any}}
{}
{{:name "L", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Dict", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
{{:name "L", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:arglist ({:record-type :atom} {:record-type :atom}), :record-type :tuple}}
{{:name "X", :record-type :var} {:record-type :atom}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:record-type :integer}}
{{:name "X", :record-type :var} {:record-type :string}}
{}
{{:name "X", :record-type :var} {:arglist ({:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}}
{{:name "X", :record-type :var} {:record-type :integer}}
{}
{{:name "X", :record-type :var} {:record-type :string}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:09.305: Step 0"
"2019-05-12T20:17:09.380: Step 1"
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :any}}
{{:name "LogLevel", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_Head", :record-type :var} {:record-type :any}, {:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LogLevel", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "OldLevel", :record-type :var} {:record-type :atom}, {:name "NewLevel", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "FullMessage", :record-type :var} {:record-type :any}, {:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :atom}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:09.917: Step 0"
"2019-05-12T20:17:09.944: Step 1"
{}
{{:name "Address", :record-type :var} {:record-type :any}, {:name "_5352", :record-type :var} {:record-type :any}}
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "Codes1", :record-type :var} {:record-type :any}, {:name "Read", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Codes3", :record-type :var} {:record-type :any}, {:name "Address", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Codes2", :record-type :var} {:record-type :any}, {:name "Codes4", :record-type :var} {:record-type :any}, {:name "StreamPair", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Write", :record-type :var} {:record-type :any}}
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:10.136: Step 0"
"2019-05-12T20:17:16.825: Step 1"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_Length", :record-type :var} {:record-type :any}, {:name "LCS_Pairs", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "_4284", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "_4280", :record-type :var} {:record-type :any}, {:name "_4106", :record-type :var} {:record-type :any}, {:name "_4282", :record-type :var} {:record-type :any}, {:name "_4110", :record-type :var} {:record-type :any}, {:name "_4108", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Length_AB0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LCS_A", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "LCS_B", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Length_B", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Length_A", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "LCS_AB", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Length_AB", :record-type :var} {:record-type :number}}
{{:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{{:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:26.126: Step 0"
"2019-05-12T20:17:26.174: Step 1"
{{:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}}
{{:name "Token", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}, {:name "UrlOrID", :record-type :var} {:record-type :any}, {:name "Options0", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "UrlOrId", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:26.414: Step 0"
"2019-05-12T20:17:26.521: Step 1"
{}
{{:name "H0", :record-type :var} {:record-type :nonvar}, {:name "Guard", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "H0", :record-type :var} {:record-type :var}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TailGuards", :record-type :var} {:record-type :any}, {:name "NestedGuards", :record-type :var} {:record-type :any}, {:name "Guards", :record-type :var} {:record-type :any}, {:name "H0", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :nonvar}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Preconditions", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :nonvar}, {:name "NewArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NoTrues", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :nonvar}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:17:26.871: Step 0"
"2019-05-12T20:18:42.798: Step 1"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Un", :record-type :var} {:record-type :any}}
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:19:57.735: Step 0"
"2019-05-12T20:19:57.762: Step 1"
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Direction", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:19:58.009: Step 0"
"2019-05-12T20:20:04.815: Step 1"
"2019-05-12T20:20:11.678: Step 2"
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Pre", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T1", :record-type :var} {:record-type :number}}
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "DT", :record-type :var} {:record-type :number}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "T2", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "T0", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "T2", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "_550", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}}
{{:name "_580", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}, {:name "_578", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:20:19.800: Step 0"
"2019-05-12T20:21:41.758: Step 1"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Un", :record-type :var} {:record-type :any}}
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:23:03.956: Step 0"
"2019-05-12T20:23:04.889: Step 1"
"2019-05-12T20:23:05.591: Step 2"
{{:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lss", :record-type :var} {:record-type :any}, {:name "ButL", :record-type :var} {:record-type :number}, {:name "L", :record-type :var} {:record-type :integer}}
{{:name "_4022", :record-type :var} {:record-type :any}}
{{:name "Div", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "First", :record-type :var} {:record-type :any}, {:name "Div", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Style", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "StyleOrStyles", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Prop", :record-type :var} {:record-type :any}}
{}
{{:name "Reference", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Things", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Thing", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "DerivedSels", :record-type :var} {:record-type :any}, {:name "DerivedSel", :record-type :var} {:record-type :any}, {:name "SelCodes", :record-type :var} {:record-type :any}, {:name "CombinedCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "Children_", :record-type :var} {:record-type :any}, {:name "ThingStyles", :record-type :var} {:record-type :any}, {:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "Children", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "AddCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "ValueCodes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "AttrCodes", :record-type :var} {:record-type :any}, {:name "Style", :record-type :var} {:record-type :any}}
{{:name "Css", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Elements", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Sels", :record-type :var} {:record-type :any}, {:name "CollapsedSels", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CtxHead", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Parent", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:23:06.499: Step 0"
"2019-05-12T20:23:06.764: Step 1"
{{:name "A", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Phrase", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "_4012", :record-type :var} {:record-type :any}}
{}
{{:name "C2", :record-type :var} {:record-type :integer}}
{{:name "C1", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Msg", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "_4384", :record-type :var} {:record-type :any}, {:name "TTY", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}}
{{:name "Sig", :record-type :var} {:record-type :any}}
{{:name "Ex", :record-type :var} {:record-type :nonvar}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "Ex", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{{:name "C1", :record-type :var} {:record-type :integer}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "C", :record-type :var} {:record-type :integer}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "AS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Pattern", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "A2", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :integer}}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "C2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Prefix", :record-type :var} {:record-type :any}}
{{:name "Prefix", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:23:07.171: Step 0"
"2019-05-12T20:23:18.676: Step 1"
"2019-05-12T20:23:33.213: Step 2"
"2019-05-12T20:23:47.848: Step 3"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_428", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:24:07.358: Step 0"
"2019-05-12T20:24:24.564: Step 1"
"2019-05-12T20:24:41.247: Step 2"
"2019-05-12T20:24:56.144: Step 3"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_428", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:25:11.553: Step 0"
"2019-05-12T20:25:38.950: Step 1"
"2019-05-12T20:26:07.119: Step 2"
{{:name "StatusVar", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vars", :record-type :var} {:type {:record-type :var}, :record-type :list}, {:name "Status", :record-type :var} {:record-type :any}, {:name "ThreadOpts", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Id", :record-type :var} {:record-type :any}, {:name "QueueOpts", :record-type :var} {:arglist #{{:record-type :empty-list} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Main", :record-type :var} {:record-type :any}, {:name "Me", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Deadline", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Time", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "H0", :record-type :var} {:arglist #{{:functor "local", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "global", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "H", :record-type :var} {:arglist #{{:functor "local", :arglist ({:record-type :number}), :record-type :compound} {:functor "global", :arglist ({:record-type :number}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{{:name "Bits", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}, {:name "KCells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:record-type :number}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "UsedTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:record-type :any}}
{{:name "Stack", :record-type :var} {:record-type :any}}
{{:name "Status", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:38.081: Step 0"
"2019-05-12T20:26:39.157: Step 1"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Prev", :record-type :var} {:record-type :nonvar}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Word0", :record-type :var} {:record-type :any}, {:name "Gen", :record-type :var} {:record-type :nonvar}, {:name "W2", :record-type :var} {:record-type :any}, {:name "GenRule", :record-type :var} {:functor ":-", :arglist ({:functor "gen", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :nonvar}), :record-type :compound}, {:name "A", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Rule", :record-type :var} {:functor "-->", :arglist ({:record-type :nonvar} {:functor ",", :arglist ({:functor "x", :arglist ({:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "call", :arglist ({:record-type :nonvar}), :record-type :compound} {:functor "{}", :arglist ({:functor ";", :arglist ({:functor "->", :arglist ({:functor "\\==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor ",", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor ";", :arglist ({:functor "->", :arglist ({:functor "==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :empty-list}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "N", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}, {:name "Name0", :record-type :var} {:record-type :atom}, {:name "N0", :record-type :var} {:record-type :atom}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}}
{{:name "Num", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
{{:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{{:name "W3", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{{:name "Word", :record-type :var} {:record-type :any}}
{}
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:40.768: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:41.243: Step 0"
"2019-05-12T20:26:42.981: Step 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{{:name "T0", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "Raw", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Transformed", :record-type :var} {:record-type :any}}
{}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PhoneCodes", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:functor "ref", :arglist ({:record-type :any}), :record-type :compound}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Accum0", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Url", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "U", :record-type :var} {:record-type :any}, {:name "MaxPageN", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "FirstPage", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Page", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "A0", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "EmptyTypes", :record-type :var} {:record-type :any}, {:name "EmptyCallers", :record-type :var} {:record-type :any}, {:name "Callers", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}}
{{:name "_414", :record-type :var} {:record-type :any}}
{}
{{:name "U", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "LeastToGreatest", :record-type :var} {:record-type :any}, {:name "_566", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_598", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:44.965: Step 0"
"2019-05-12T20:26:45.001: Step 1"
{{:name "_412", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :any}, {:name "VFE", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Outer", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "C", :record-type :var} {:record-type :integer}, {:name "A", :record-type :var} {:record-type :atom}}
{}
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Name", :record-type :var} {:record-type :any}, {:name "ArgsO", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atom}, {:name "In", :record-type :var} {:record-type :atom}, {:name "ArgsO", :record-type :var} {:record-type :empty-list}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "Was", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:45.234: Step 0"
"2019-05-12T20:26:45.315: Step 1"
{{:name "_4262", :record-type :var} {:record-type :any}, {:name "_4100", :record-type :var} {:record-type :any}, {:name "_4266", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}, {:name "_4172", :record-type :var} {:record-type :any}, {:name "_4264", :record-type :var} {:record-type :any}, {:name "Office", :record-type :var} {:record-type :any}, {:name "_4176", :record-type :var} {:record-type :any}, {:name "_4260", :record-type :var} {:record-type :any}, {:name "Area", :record-type :var} {:record-type :any}, {:name "_4174", :record-type :var} {:record-type :any}, {:name "Subscriber", :record-type :var} {:record-type :any}, {:name "_4098", :record-type :var} {:record-type :any}}
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Number", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:45.759: Step 0"
"2019-05-12T20:26:46.157: Step 1"
{{:name "Intro", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:record-type :any}}
{{:name "Files", :record-type :var} {:record-type :any}, {:name "Intro", :record-type :var} {:record-type :any}}
{{:name "Heading", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "Intro", :record-type :var} {:record-type :any}}
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}, {:name "OldCodes", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCodes", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:record-type :any}}
{{:name "Content", :record-type :var} {:record-type :any}}
{}
{{:name "Deltas", :record-type :var} {:record-type :any}, {:name "OL", :record-type :var} {:record-type :any}, {:name "Heading", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}, {:name "Stop", :record-type :var} {:record-type :any}}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Delta", :record-type :var} {:record-type :any}}
{}
{}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:46.940: Step 0"
"2019-05-12T20:26:48.345: Step 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_4816", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "_650", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "PID", :record-type :var} {:record-type :any}}
{{:name "PID", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:record-type :any}}
{{:name "Skel", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Subst", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:functor "$VAR", :arglist ({:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_428", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "Links", :record-type :var} {:record-type :any}}
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
{}
{{:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Links", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "_446", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "LT0", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "_550", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "RestLinks", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "LinkT1", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "LinksT0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{{:name "Compound", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "FCodes", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T20:26:49.900: Step 0"
"2019-05-12T20:26:49.906: Step 1"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Addresses", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "To", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
