"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:57.770: Step 0"
"No predicates found"
"Call prolog"
21:12:58.003 [main] WARN  prolog-analyzer.parser - /home/isabel/Studium/prolog-analyzer/edns/pddl_valoptic_api.edn  No .edn file was created
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:58.155: Step 0"
"No predicates found"
"Call prolog"
21:12:58.221 [main] WARN  prolog-analyzer.parser - /home/isabel/Studium/prolog-analyzer/edns/planner_api.edn  No .edn file was created
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:58.346: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:58.586: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:58.801: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:59.021: Step 0"
"2019-05-12T21:12:59.222: Step 1"
{{:name "_4268", :record-type :var} {:record-type :any}, {:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "XAbs", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "_4012", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4016", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "_498", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_4090", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:12:59.601: Step 0"
"2019-05-12T21:12:59.634: Step 1"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Pager", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{{:name "PagerIn", :record-type :var} {:record-type :ground}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "_Status", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:00.369: Step 0"
"2019-05-12T21:13:00.389: Step 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "Out", :record-type :var} {:record-type :ground}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:00.660: Step 0"
"2019-05-12T21:13:02.797: Step 1"
"2019-05-12T21:13:04.620: Step 2"
{{:name "_3986", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_4002", :record-type :var} {:record-type :any}}
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4010", :record-type :var} {:record-type :any}, {:name "_4012", :record-type :var} {:record-type :any}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{}
{}
{{:name "X", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:name "A", :record-type :var} {:record-type :any}}
{}
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:06.852: Step 0"
"2019-05-12T21:13:06.871: Step 1"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ServiceName", :record-type :var} {:record-type :any}, {:name "Env", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_944", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "PortAtom", :record-type :var} {:record-type :any}, {:name "ServiceAtom", :record-type :var} {:record-type :any}}
{{:name "ServiceAtom", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:07.191: Step 0"
"2019-05-12T21:13:07.320: Step 1"
"2019-05-12T21:13:07.441: Step 2"
"2019-05-12T21:13:07.571: Step 3"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :nonvar}}
{{:name "A", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "_4028", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}}
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "L", :record-type :var} {:record-type :nonvar}}
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "L", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}, {:name "Bs_", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "Es1", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B_", :record-type :var} {:record-type :any}, {:name "Es", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :nonvar}, {:name "Ps", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B1", :record-type :var} {:record-type :any}, {:name "Ms", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:07.931: Step 0"
"2019-05-12T21:13:08.074: Step 1"
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "_4040", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "_4032", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :nonvar}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "_4034", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_4036", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "ResTerm", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "LTerm", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Arg2", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Res1", :record-type :var} {:record-type :any}, {:name "Arg1", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Tmp", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_484", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Expr", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "GsT", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}}
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Var", :record-type :var} {:record-type :any}, {:name "ArgsRes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_464", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}}
{{:name "Gs", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{{:name "RH", :record-type :var} {:record-type :any}, {:name "NB", :record-type :var} {:record-type :any}, {:name "RB", :record-type :var} {:record-type :any}, {:name "_680", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_678", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_576", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}}
{{:name "R", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}}
{{:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:09.751: Step 0"
"2019-05-12T21:13:09.806: Step 1"
{{:name "Secret", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Secret", :record-type :var} {:record-type :any}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "ListofData", :record-type :var} {:arglist ({:functor "=", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "ErrorCode", :record-type :var} {:record-type :any}}
{{:name "ErrorCode", :record-type :var} {:record-type :any}, {:name "My_Search", :record-type :var} {:record-type :any}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :atom}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}}
{{:name "Search", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Components0", :record-type :var} {:record-type :any}, {:name "Components", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :any}, {:name "Search0", :record-type :var} {:record-type :any}}
{{:name "Var", :record-type :var} {:record-type :var}, {:name "Params", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "AllParams", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String0", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:10.179: Step 0"
"2019-05-12T21:13:10.242: Step 1"
{{:name "TypeValues", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "TypeSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "DictSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Keys", :record-type :var} {:record-type :any}, {:name "TypePairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "DictValues", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "DictPairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Spec1", :record-type :var} {:record-type :any}, {:name "Spec2", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:10.486: Step 0"
"2019-05-12T21:13:10.880: Step 1"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:record-type :any}}
{}
{{:name "L", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Dict", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
{{:name "L", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:arglist ({:record-type :atom} {:record-type :atom}), :record-type :tuple}}
{{:name "X", :record-type :var} {:record-type :atom}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:record-type :string}}
{{:name "X", :record-type :var} {:record-type :integer}}
{{:name "X", :record-type :var} {:record-type :string}}
{}
{{:name "X", :record-type :var} {:arglist ({:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}}
{{:name "X", :record-type :var} {:record-type :integer}}
{}
{{:name "X", :record-type :var} {:record-type :string}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:11.496: Step 0"
"2019-05-12T21:13:11.558: Step 1"
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :any}}
{{:name "LogLevel", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_Head", :record-type :var} {:record-type :any}, {:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LogLevel", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "OldLevel", :record-type :var} {:record-type :atom}, {:name "NewLevel", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "FullMessage", :record-type :var} {:record-type :any}, {:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :atom}}
{}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:12.109: Step 0"
"2019-05-12T21:13:12.129: Step 1"
{}
{{:name "Address", :record-type :var} {:record-type :any}, {:name "_5352", :record-type :var} {:record-type :any}}
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "Codes1", :record-type :var} {:record-type :any}, {:name "Read", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Codes3", :record-type :var} {:record-type :any}, {:name "Address", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Codes2", :record-type :var} {:record-type :any}, {:name "Codes4", :record-type :var} {:record-type :any}, {:name "StreamPair", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Write", :record-type :var} {:record-type :any}}
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:12.362: Step 0"
"2019-05-12T21:13:18.805: Step 1"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_Length", :record-type :var} {:record-type :any}, {:name "LCS_Pairs", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "_4284", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "_4280", :record-type :var} {:record-type :any}, {:name "_4106", :record-type :var} {:record-type :any}, {:name "_4282", :record-type :var} {:record-type :any}, {:name "_4110", :record-type :var} {:record-type :any}, {:name "_4108", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Length_AB0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LCS_A", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "LCS_B", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Length_B", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Length_A", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "LCS_AB", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Length_AB", :record-type :var} {:record-type :number}}
{{:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{{:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:26.334: Step 0"
"2019-05-12T21:13:26.376: Step 1"
{{:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}}
{{:name "Token", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}, {:name "UrlOrID", :record-type :var} {:record-type :any}, {:name "Options0", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "UrlOrId", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:26.550: Step 0"
"2019-05-12T21:13:26.631: Step 1"
{}
{{:name "H0", :record-type :var} {:record-type :nonvar}, {:name "Guard", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "H0", :record-type :var} {:record-type :var}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TailGuards", :record-type :var} {:record-type :any}, {:name "NestedGuards", :record-type :var} {:record-type :any}, {:name "Guards", :record-type :var} {:record-type :any}, {:name "H0", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :nonvar}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Preconditions", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :nonvar}, {:name "NewArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NoTrues", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :nonvar}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:13:27.021: Step 0"
"2019-05-12T21:14:29.209: Step 1"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Un", :record-type :var} {:record-type :any}}
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:15:33.400: Step 0"
"2019-05-12T21:15:33.420: Step 1"
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Direction", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:15:33.593: Step 0"
"2019-05-12T21:15:39.965: Step 1"
"2019-05-12T21:15:46.409: Step 2"
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Pre", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T1", :record-type :var} {:record-type :number}}
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "DT", :record-type :var} {:record-type :number}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "T2", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "T0", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "T2", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "_550", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}}
{{:name "_580", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}, {:name "_578", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:15:53.214: Step 0"
"2019-05-12T21:16:57.166: Step 1"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{{:name "Un", :record-type :var} {:record-type :any}}
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:18:16.245: Step 0"
"2019-05-12T21:18:16.823: Step 1"
"2019-05-12T21:18:17.370: Step 2"
{{:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lss", :record-type :var} {:record-type :any}, {:name "ButL", :record-type :var} {:record-type :number}, {:name "L", :record-type :var} {:record-type :integer}}
{{:name "_4022", :record-type :var} {:record-type :any}}
{{:name "Div", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "First", :record-type :var} {:record-type :any}, {:name "Div", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Style", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "StyleOrStyles", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Prop", :record-type :var} {:record-type :any}}
{}
{{:name "Reference", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Things", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Thing", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "DerivedSels", :record-type :var} {:record-type :any}, {:name "DerivedSel", :record-type :var} {:record-type :any}, {:name "SelCodes", :record-type :var} {:record-type :any}, {:name "CombinedCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "Children_", :record-type :var} {:record-type :any}, {:name "ThingStyles", :record-type :var} {:record-type :any}, {:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "Children", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "AddCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "ValueCodes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "AttrCodes", :record-type :var} {:record-type :any}, {:name "Style", :record-type :var} {:record-type :any}}
{{:name "Css", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Elements", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Sels", :record-type :var} {:record-type :any}, {:name "CollapsedSels", :record-type :var} {:record-type :any}}
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CtxHead", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Parent", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:18:18.092: Step 0"
"2019-05-12T21:18:18.267: Step 1"
{{:name "A", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Phrase", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "_4012", :record-type :var} {:record-type :any}}
{}
{{:name "C2", :record-type :var} {:record-type :integer}}
{{:name "C1", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Msg", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "_4384", :record-type :var} {:record-type :any}, {:name "TTY", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}}
{{:name "Sig", :record-type :var} {:record-type :any}}
{{:name "Ex", :record-type :var} {:record-type :nonvar}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "Ex", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{{:name "C1", :record-type :var} {:record-type :integer}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "C", :record-type :var} {:record-type :integer}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "AS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Pattern", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
{{:name "A1", :record-type :var} {:record-type :any}, {:name "A2", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :integer}}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "C2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Prefix", :record-type :var} {:record-type :any}}
{{:name "Prefix", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:18:18.640: Step 0"
"2019-05-12T21:18:29.325: Step 1"
"2019-05-12T21:18:40.848: Step 2"
"2019-05-12T21:19:00.138: Step 3"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_428", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:19:12.035: Step 0"
"2019-05-12T21:19:25.901: Step 1"
"2019-05-12T21:19:40.147: Step 2"
"2019-05-12T21:19:54.173: Step 3"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_428", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{{:name "_3998", :record-type :var} {:record-type :any}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:20:10.160: Step 0"
"2019-05-12T21:20:28.049: Step 1"
"2019-05-12T21:20:48.834: Step 2"
{{:name "StatusVar", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vars", :record-type :var} {:type {:record-type :var}, :record-type :list}, {:name "Status", :record-type :var} {:record-type :any}, {:name "ThreadOpts", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Id", :record-type :var} {:record-type :any}, {:name "QueueOpts", :record-type :var} {:arglist #{{:record-type :empty-list} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Main", :record-type :var} {:record-type :any}, {:name "Me", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Deadline", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Time", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}
{{:name "_394", :record-type :var} {:record-type :any}}
{}
{{:name "H0", :record-type :var} {:arglist #{{:functor "local", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "global", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "H", :record-type :var} {:arglist #{{:functor "local", :arglist ({:record-type :number}), :record-type :compound} {:functor "global", :arglist ({:record-type :number}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{{:name "Bits", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}, {:name "KCells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:record-type :number}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "UsedTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:record-type :any}}
{{:name "Stack", :record-type :var} {:record-type :any}}
{{:name "Status", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:09.816: Step 0"
"2019-05-12T21:21:10.953: Step 1"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Prev", :record-type :var} {:record-type :nonvar}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Word0", :record-type :var} {:record-type :any}, {:name "Gen", :record-type :var} {:record-type :nonvar}, {:name "W2", :record-type :var} {:record-type :any}, {:name "GenRule", :record-type :var} {:functor ":-", :arglist ({:functor "gen", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :nonvar}), :record-type :compound}, {:name "A", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Rule", :record-type :var} {:functor "-->", :arglist ({:record-type :nonvar} {:functor ",", :arglist ({:functor "x", :arglist ({:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "call", :arglist ({:record-type :nonvar}), :record-type :compound} {:functor "{}", :arglist ({:functor ";", :arglist ({:functor "->", :arglist ({:functor "\\==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor ",", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor ";", :arglist ({:functor "->", :arglist ({:functor "==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :empty-list}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "N", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}, {:name "Name0", :record-type :var} {:record-type :atom}, {:name "N0", :record-type :var} {:record-type :atom}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}}
{{:name "Num", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
{{:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{{:name "W3", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{{:name "Word", :record-type :var} {:record-type :any}}
{}
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:12.148: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:12.481: Step 0"
"2019-05-12T21:21:14.070: Step 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{{:name "T0", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "Raw", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Transformed", :record-type :var} {:record-type :any}}
{}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PhoneCodes", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:functor "ref", :arglist ({:record-type :any}), :record-type :compound}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Accum0", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Url", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "U", :record-type :var} {:record-type :any}, {:name "MaxPageN", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "FirstPage", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Page", :record-type :var} {:record-type :any}}
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "A0", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "EmptyTypes", :record-type :var} {:record-type :any}, {:name "EmptyCallers", :record-type :var} {:record-type :any}, {:name "Callers", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}}
{{:name "_414", :record-type :var} {:record-type :any}}
{}
{{:name "U", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "LeastToGreatest", :record-type :var} {:record-type :any}, {:name "_566", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_598", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:15.803: Step 0"
"2019-05-12T21:21:15.843: Step 1"
{{:name "_412", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :any}, {:name "VFE", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Outer", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "C", :record-type :var} {:record-type :integer}, {:name "A", :record-type :var} {:record-type :atom}}
{}
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Name", :record-type :var} {:record-type :any}, {:name "ArgsO", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atom}, {:name "In", :record-type :var} {:record-type :atom}, {:name "ArgsO", :record-type :var} {:record-type :empty-list}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "Was", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:16.097: Step 0"
"2019-05-12T21:21:16.162: Step 1"
{{:name "_4262", :record-type :var} {:record-type :any}, {:name "_4100", :record-type :var} {:record-type :any}, {:name "_4266", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}, {:name "_4172", :record-type :var} {:record-type :any}, {:name "_4264", :record-type :var} {:record-type :any}, {:name "Office", :record-type :var} {:record-type :any}, {:name "_4176", :record-type :var} {:record-type :any}, {:name "_4260", :record-type :var} {:record-type :any}, {:name "Area", :record-type :var} {:record-type :any}, {:name "_4174", :record-type :var} {:record-type :any}, {:name "Subscriber", :record-type :var} {:record-type :any}, {:name "_4098", :record-type :var} {:record-type :any}}
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Number", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:16.494: Step 0"
"2019-05-12T21:21:16.862: Step 1"
{{:name "Intro", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:record-type :any}}
{{:name "Files", :record-type :var} {:record-type :any}, {:name "Intro", :record-type :var} {:record-type :any}}
{{:name "Heading", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "Intro", :record-type :var} {:record-type :any}}
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}, {:name "OldCodes", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCodes", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:record-type :any}}
{{:name "Content", :record-type :var} {:record-type :any}}
{}
{{:name "Deltas", :record-type :var} {:record-type :any}, {:name "OL", :record-type :var} {:record-type :any}, {:name "Heading", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}, {:name "Stop", :record-type :var} {:record-type :any}}
{{:name "Content", :record-type :var} {:record-type :any}}
{{:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Delta", :record-type :var} {:record-type :any}}
{}
{}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:17.506: Step 0"
"2019-05-12T21:21:18.416: Step 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_4816", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "_650", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "PID", :record-type :var} {:record-type :any}}
{{:name "PID", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:record-type :any}}
{{:name "Skel", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Subst", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:functor "$VAR", :arglist ({:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_428", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "Links", :record-type :var} {:record-type :any}}
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
{}
{{:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Links", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "_446", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "LT0", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "_550", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "RestLinks", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "LinkT1", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "LinksT0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
{{:name "Compound", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "FCodes", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:19.502: Step 0"
"2019-05-12T21:21:19.507: Step 1"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Addresses", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "To", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:19.730: Step 0"
"2019-05-12T21:21:20.012: Step 1"
"2019-05-12T21:21:20.280: Step 2"
{{:name "ParameterValue", :record-type :var} {:record-type :var}, {:name "Functor", :record-type :var} {:record-type :nonvar}, {:name "UProps", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atomic}, {:name "PropsDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}, {:name "KnownProps", :record-type :var} {:record-type :any}}
{{:name "ParentRepoVersions", :record-type :var} {:arglist ({:functor "repo_a_ve", :arglist ({:record-type :string}), :record-type :compound} {:functor "repo_b_ve", :arglist ({:record-type :string}), :record-type :compound} {:functor "repo_c_ve", :arglist ({:record-type :string}), :record-type :compound}), :record-type :tuple}, {:name "Repo", :record-type :var} {:record-type :any}, {:name "Branch", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "ParentRepoVersions", :record-type :var} {:record-type :any}, {:name "RepoCVersion", :record-type :var} {:record-type :any}, {:name "RepoBVersion", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "RepoAVersion", :record-type :var} {:record-type :any}}
{{:name "L2", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "L3", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}}
{{:name "L2", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:record-type :any}, {:name "L3", :record-type :var} {:record-type :any}, {:name "L1", :record-type :var} {:record-type :any}, {:name "Children", :record-type :var} {:record-type :any}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "_524", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:functor "task", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_526", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "PropsDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}, {:name "PropsDl2", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "NewDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Param", :record-type :var} {:record-type :nonvar}}
{{:name "ParentRepoVersions", :record-type :var} {:record-type :any}, {:name "Props", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "P", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "L", :record-type :var} {:record-type :any}}
{{:name "Dlist", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "HDlist", :record-type :var} {:functor "-", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "TDlist", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "H", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{{:name "RestActs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Act1", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:record-type :any}, {:name "Coordinator", :record-type :var} {:record-type :any}, {:name "PropsDl", :record-type :var} {:record-type :any}, {:name "PropsDl2", :record-type :var} {:record-type :any}, {:name "Term1", :record-type :var} {:record-type :any}, {:name "WorkflowModule", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "PropsDList", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Queue", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_562", :record-type :var} {:record-type :any}, {:name "Coordinator", :record-type :var} {:record-type :any}, {:name "Props", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tree", :record-type :var} {:functor "node", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "WorkflowModule", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:20.781: Step 0"
"2019-05-12T21:21:27.174: Step 1"
"2019-05-12T21:21:34.873: Step 2"
"2019-05-12T21:21:42.939: Step 3"
{{:name "Cells", :record-type :var} {:record-type :any}, {:name "MaxWidth", :record-type :var} {:record-type :any}, {:name "CellWidths", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Row", :record-type :var} {:record-type :any}, {:name "Rows", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Default_Options", :record-type :var} {:arglist ({:functor "top", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_right", :arglist ({:record-type :atom}), :record-type :compound}), :record-type :tuple}}
{{:name "Rows", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "ColWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Middle", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Space", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Cell", :record-type :var} {:record-type :any}, {:name "Center", :record-type :var} {:record-type :atom}, {:name "Entry", :record-type :var} {:record-type :any}, {:name "Width", :record-type :var} {:record-type :number}, {:name "Result", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Cols", :record-type :var} {:record-type :any}, {:name "Cols_With_Headers", :record-type :var} {:record-type :any}}
{{:name "Space", :record-type :var} {:record-type :atom}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Space_With_Length", :record-type :var} {:record-type :any}}
{{:name "Space", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Space_With_Length", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Cell", :record-type :var} {:record-type :atom}, {:name "Width", :record-type :var} {:record-type :integer}}
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "KV", :record-type :var} {:record-type :nonvar}}
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "Lists", :record-type :var} {:record-type :any}, {:name "Lists0", :record-type :var} {:record-type :any}}
{{:name "Default_Options", :record-type :var} {:arglist ({:functor "top", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_right", :arglist ({:record-type :atom}), :record-type :compound}), :record-type :tuple}, {:name "Options_", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Cols_", :record-type :var} {:record-type :any}, {:name "Cols", :record-type :var} {:record-type :any}, {:name "Rows", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "First", :record-type :var} {:record-type :any}, {:name "Cells", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "FirstWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "L", :record-type :var} {:record-type :any}, {:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "ColWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Cell", :record-type :var} {:record-type :any}, {:name "Options_For_First", :record-type :var} {:record-type :any}}
{{:name "CellMocks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Char_Row_Options", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Space_", :record-type :var} {:record-type :any}, {:name "Identifiers", :record-type :var} {:record-type :any}, {:name "Space", :record-type :var} {:record-type :any}, {:name "OriginalSpace", :record-type :var} {:record-type :atom}, {:name "OriginalSpace_Length", :record-type :var} {:record-type :integer}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Col", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Header", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_612", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}}
{{:name "_Char", :record-type :var} {:record-type :any}}
{{:name "Char", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "N_", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A_", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:51.579: Step 0"
"2019-05-12T21:21:51.663: Step 1"
{{:name "Chan", :record-type :var} {:record-type :any}}
{{:name "Status", :record-type :var} {:record-type :ground}, {:name "Q", :record-type :var} {:record-type :ground}}
{{:name "Q", :record-type :var} {:record-type :ground}}
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_414", :record-type :var} {:record-type :any}}
{{:name "Q", :record-type :var} {:record-type :any}}
{{:name "MaybeTerm", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:record-type :nonvar}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "_498", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :nonvar}, {:name "Q", :record-type :var} {:record-type :ground}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "Rx", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Rx", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Q", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Status", :record-type :var} {:record-type :any}, {:name "Tx", :record-type :var} {:functor "tx_chan", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
21:21:52.435 [main] WARN  prolog-analyzer.parser - /home/isabel/Studium/prolog-analyzer/edns/'graphql-swipl'.edn  No .edn file was created
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:52.591: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:53.587: Step 0"
"2019-05-12T21:21:54.040: Step 1"
{{:name "_QQDict", :record-type :var} {:record-type :any}}
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Sep", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}}
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_762", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "_688", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Sep", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Content", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Var", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:54.826: Step 0"
"2019-05-12T21:21:54.910: Step 1"
{{:name "_506", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "C1", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "user_type_syn", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Syn", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "C2", :record-type :var} {:functor ":-", :arglist ({:functor ":", :arglist ({:record-type :atom} {:functor "has_type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:functor "has_type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Defs", :record-type :var} {:record-type :any}, {:name "Clauses", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "Cons", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Defs", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "C1", :record-type :var} {:record-type :any}, {:name "CX", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "_448", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}, {:name "CZ", :record-type :var} {:record-type :any}}
{{:name "Decl", :record-type :var} {:record-type :any}, {:name "Clauses", :record-type :var} {:record-type :any}}
{{:name "_4118", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:21:56.511: Step 0"
"2019-05-12T21:21:59.757: Step 1"
"2019-05-12T21:22:03.035: Step 2"
"2019-05-12T21:22:06.253: Step 3"
"2019-05-12T21:22:09.211: Step 4"
{{:name "PredicateIndicator", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :nonvar}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}}
{{:name "_4426", :record-type :var} {:record-type :any}, {:name "_4428", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{{:name "PredicateIndicator", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Module", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "FromModule", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :integer}}
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :integer}}
{}
{}
{}
{}
{{:name "Functor", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "At", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Pos", :record-type :var} {:record-type :any}}
{}
{}
{{:name "M", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :number}}
{{:name "S", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Marker", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :any} {:record-type :integer}), :record-type :compound}), :record-type :compound}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Byte", :record-type :var} {:record-type :any}, {:name "Aux", :record-type :var} {:record-type :any}, {:name "Pos", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Module", :record-type :var} {:record-type :any}, {:name "DcgArity", :record-type :var} {:record-type :number}}
{}
{{:name "Marker", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :any} {:record-type :integer}), :record-type :compound}), :record-type :compound}, {:name "_630", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Aux", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:11.999: Step 0"
"2019-05-12T21:22:12.171: Step 1"
{{:name "Formats", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Static", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VarName", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}}
{{:name "VarName", :record-type :var} {:record-type :any}}
{{:name "Module", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_502", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Output", :record-type :var} {:record-type :any}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "_408", :record-type :var} {:record-type :any}}
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Static", :record-type :var} {:record-type :atom}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_464", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_400", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_452", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :atom}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :var}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "TextCodes", :record-type :var} {:record-type :any}, {:name "Formats", :record-type :var} {:record-type :any}, {:name "Replacement", :record-type :var} {:record-type :any}, {:name "Output", :record-type :var} {:record-type :nonvar}, {:name "Guard", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "build_text", :arglist ({:record-type :nonvar} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:12.598: Step 0"
"2019-05-12T21:22:12.779: Step 1"
"2019-05-12T21:22:13.014: Step 2"
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:record-type :nonvar} {:record-type :var}}, :record-type :one-of}, {:name "NameB", :record-type :var} {:record-type :any}, {:name "NameA", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Diffs", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :var}, {:name "B", :record-type :var} {:record-type :var}}
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "ListA", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ListB", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom}}, :record-type :one-of}}
{{:name "A", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "Diff", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}}
{{:name "N0", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "Right", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "ArgsA", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "ArgsB", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:record-type :nonvar} {:record-type :var}}, :record-type :one-of}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :var}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "List", :record-type :var} {:record-type :var}, {:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_398", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:13.389: Step 0"
"2019-05-12T21:22:13.401: Step 1"
{{:name "Atomic", :record-type :var} {:record-type :atomic}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}}
{{:name "IP", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "From", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{{:name "Handle", :record-type :var} {:record-type :any}}
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "From", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{}
{{:name "Byte", :record-type :var} {:record-type :integer}, {:name "String", :record-type :var} {:record-type :any}}
{{:name "_3986", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:13.593: Step 0"
"2019-05-12T21:22:13.599: Step 1"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Exit", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:record-type :any}}
{{:name "Template", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Message0", :record-type :var} {:record-type :any}}
{{:name "_408", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "_406", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:13.887: Step 0"
"2019-05-12T21:22:14.001: Step 1"
{{:name "MTerm", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "Cleanup", :record-type :var} {:arglist #{{:functor "erase", :arglist ({:record-type :any}), :record-type :compound} {:functor "set_setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "close", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Setup", :record-type :var} {:arglist #{{:functor "asserta", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "absolute_file_name", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "open", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "assertz", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "set_setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}}, :record-type :one-of}, {:name "Term", :record-type :var} {:arglist #{{:functor "assertz", :arglist ({:record-type :any}), :record-type :compound} {:functor "asserta", :arglist ({:record-type :any}), :record-type :compound} {:functor "setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "open", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{{:name "Mode", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "AbsFile", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
{{:name "NewValue", :record-type :var} {:record-type :any}, {:name "Setting", :record-type :var} {:record-type :any}, {:name "OldValue", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:14.262: Step 0"
"2019-05-12T21:22:14.293: Step 1"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{{:name "FC", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{{:name "V1", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}}
{{:name "MGoal", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "FC", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "V7", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "FC", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{{:name "V1", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:15.367: Step 0"
"2019-05-12T21:22:15.485: Step 1"
{{:name "Response", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "_1944", :record-type :var} {:record-type :any}}
{{:name "_1778", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Views", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "View", :record-type :var} {:arglist #{{:functor "codes", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "html5", :arglist ({:record-type :any}), :record-type :compound} {:functor "status_code", :arglist ({:record-type :any}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{{:name "_1976", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:record-type :atom}, {:name "Atom", :record-type :var} {:record-type :atom}}
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "CacertFile", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:arglist ({:functor "method", :arglist ({:record-type :atom}), :record-type :compound} {:functor "header", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "status_code", :arglist ({:record-type :any}), :record-type :compound} {:functor "cacert_file", :arglist ({:record-type :any}), :record-type :compound}), :record-type :tuple}, {:name "ContentType", :record-type :var} {:record-type :any}, {:name "StatusCode", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}}
{{:name "UrlText", :record-type :var} {:record-type :any}, {:name "Url", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "View", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Attributes", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:15.829: Step 0"
"2019-05-12T21:22:15.856: Step 1"
{{:name "Condition", :record-type :var} {:record-type :any}, {:name "Restart", :record-type :var} {:record-type :any}}
{{:name "Restart", :record-type :var} {:record-type :any}, {:name "Condition", :record-type :var} {:record-type :nonvar}, {:name "Default", :record-type :var} {:record-type :any}}
{{:name "Restart", :record-type :var} {:record-type :any}, {:name "Condition", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Restarter", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "Restarter", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:16.254: Step 0"
"2019-05-12T21:22:16.326: Step 1"
{{:name "Unified", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Open2", :record-type :var} {:record-type :any}, {:name "Open1", :record-type :var} {:record-type :any}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Other", :record-type :var} {:record-type :any}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:functor "+", :arglist ({:record-type :any}), :record-type :compound}, {:name "Guard", :record-type :var} {:functor "open_dict", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{{:name "KeyPath", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:functor ".^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Guard", :record-type :var} {:functor ",", :arglist ({:functor "open_dict", :arglist ({:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:functor "open_dict_get", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "Open", :record-type :var} {:record-type :any}, {:name "Closed", :record-type :var} {:record-type :any}}
{{:name "V", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:functor "open_dict", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :var}, {:name "_4126", :record-type :var} {:record-type :any}}
{{:name "_5254", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Open1", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "KeyPath", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:16.687: Step 0"
"2019-05-12T21:22:20.260: Step 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "StmtList", :record-type :var} {:record-type :any}}
{{:name "SubGraph", :record-type :var} {:record-type :any}}
{{:name "NodeId", :record-type :var} {:record-type :any}, {:name "AttrList", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stmt", :record-type :var} {:record-type :any}}
{{:name "Nodes", :record-type :var} {:record-type :any}}
{{:name "NodeId", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "AString", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "NodeId", :record-type :var} {:record-type :any}}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "NodeStmt", :record-type :var} {:record-type :any}}
{{:name "Cs", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :any}}
{}
{{:name "First", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Stmt", :record-type :var} {:record-type :any}}
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Stmt", :record-type :var} {:record-type :any}}
{{:name "StmtList", :record-type :var} {:record-type :any}, {:name "SubGraphId", :record-type :var} {:record-type :any}}
{}
{{:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Node", :record-type :var} {:record-type :any}}
{{:name "Attr", :record-type :var} {:record-type :any}}
{{:name "Merged", :record-type :var} {:record-type :any}, {:name "AList", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "EdgeStmt", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}}
{{:name "Id", :record-type :var} {:record-type :any}, {:name "AId", :record-type :var} {:record-type :any}}
{{:name "AttrList", :record-type :var} {:record-type :any}, {:name "Nodes", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Node", :record-type :var} {:record-type :any}}
{}
{{:name "AList", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "Ys", :record-type :var} {:record-type :any}}
{{:name "Zs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:24.200: Step 0"
"2019-05-12T21:22:24.373: Step 1"
"2019-05-12T21:22:24.592: Step 2"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Tempo", :record-type :var} {:functor "smf_tempo", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:arglist #{{:functor "time", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "crochet_duration", :arglist ({:record-type :any}), :record-type :compound} {:functor "time_signature", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "crochets_per_minute", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Tempo", :record-type :var} {:functor "smf_tempo", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:arglist #{{:functor "time", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "crochet_duration", :arglist ({:record-type :any}), :record-type :compound} {:functor "time_signature", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "crochets_per_minute", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:record-type :nonvar}}
{}
{}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{{:name "T2", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "SMF", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}}
{{:name "Events1", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{{:name "Events1", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{{:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Dur", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:22:25.330: Step 0"
"2019-05-12T21:24:58.882: Step 1"
"2019-05-12T21:28:46.541: Step 2"
{{:name "ID", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LL1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L2", :record-type :var} {:record-type :any}, {:name "IDM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LL2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{{:name "N", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :number}, {:name "N0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:record-type :number}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}}
{{:name "Aii", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "L", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "S", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Aij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "S", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :number}, {:name "J1", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Ljj", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "LT", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DetL", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Det", :record-type :var} {:record-type :number}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "_N", :record-type :var} {:record-type :any}}
{{:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "LL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{{:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "LIT", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LI", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "_J", :record-type :var} {:record-type :any}}
{{:name "Vkj", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Vik", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LT", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Vij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "NVij", :record-type :var} {:record-type :number}}
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "M", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Argij", :record-type :var} {:record-type :integer}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "N1", :record-type :var} {:record-type :number}, {:name "NN", :record-type :var} {:record-type :number}, {:name "L0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DT", :record-type :var} {:record-type :nonvar}, {:name "In", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "_N", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}, {:name "J", :record-type :var} {:record-type :any}, {:name "_I", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "S0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "S", :record-type :var} {:record-type :any}, {:name "S1", :record-type :var} {:record-type :number}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Ljk", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lik", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "I", :record-type :var} {:record-type :any}, {:name "_N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}}
{{:name "V_ij", :record-type :var} {:record-type :number}, {:name "Vij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LT", :record-type :var} {:functor nil, :arglist (), :record-type :compound}}
{{:name "E", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_454", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :nonvar}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LM", :record-type :var} {:record-type :nonvar}, {:name "LL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "NL", :record-type :var} {:record-type :integer}, {:name "AL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "AM", :record-type :var} {:record-type :nonvar}}
{}
{{:name "N1", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "P0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P", :record-type :var} {:record-type :number}}
{{:name "M0", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}, {:name "_A", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}}
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "L", :record-type :var} {:record-type :any}, {:name "I1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Argij", :record-type :var} {:record-type :number}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:35.367: Step 0"
"2019-05-12T21:32:35.611: Step 1"
{{:name "English", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:functor "english", :arglist ({:record-type :any}), :record-type :compound}, {:name "Dt", :record-type :var} {:record-type :any}}
{{:name "Part", :record-type :var} {:record-type :any}, {:name "Separator", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Month", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:record-type :any}}
{}
{{:name "_426", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "Words", :record-type :var} {:record-type :any}, {:name "Months", :record-type :var} {:record-type :any}}
{}
{{:name "Month", :record-type :var} {:record-type :any}, {:name "_5448", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
{{:name "Form", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "Part", :record-type :var} {:record-type :any}, {:name "Forms", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{{:name "Month", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{{:name "Days", :record-type :var} {:record-type :any}, {:name "Words", :record-type :var} {:record-type :any}}
{}
{{:name "N", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Form", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Word", :record-type :var} {:record-type :any}, {:name "Day", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "_5460", :record-type :var} {:record-type :any}, {:name "Part", :record-type :var} {:record-type :any}}
{}
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "_5560", :record-type :var} {:record-type :any}, {:name "Day", :record-type :var} {:record-type :any}}
{{:name "Month", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "_5560", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:36.117: Step 0"
"2019-05-12T21:32:36.347: Step 1"
{}
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DataT", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "NodeDOM", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeMap0", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :empty-list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:functor "element", :arglist ({:record-type :atom} {:type {:arglist #{{:functor "=", :arglist ({:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :atom}), :record-type :compound} {:functor "=", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "UGraph", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :any}}
{{:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_444", :record-type :var} {:record-type :any}, {:name "_448", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{{:name "Data", :record-type :var} {:record-type :any}, {:name "IdI1", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TID", :record-type :var} {:record-type :any}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FID", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "IdI", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Node", :record-type :var} {:record-type :any}, {:name "Color", :record-type :var} {:record-type :any}}
{{:name "Graph", :record-type :var} {:type {:functor "-", :arglist ({:record-type :integer} {:type {:record-type :integer}, :record-type :list}), :record-type :compound}, :record-type :list}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}, {:name "_470", :record-type :var} {:record-type :any}, {:name "_468", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}}
{{:name "Data", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}, {:name "IdI1", :record-type :var} {:record-type :any}, {:name "NodeMap0", :record-type :var} {:record-type :any}, {:name "NodeMap1", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "DOM0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}, {:name "VT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "V0", :record-type :var} {:record-type :any}, {:name "IdI", :record-type :var} {:record-type :any}}
{{:name "_434", :record-type :var} {:record-type :any}}
{{:name "DOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyType", :record-type :var} {:record-type :any}, {:name "KeyTerm", :record-type :var} {:functor "key", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "For", :record-type :var} {:record-type :any}, {:name "KeyName", :record-type :var} {:record-type :any}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{{:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyDOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:record-type :any}}
{{:name "DOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "Ugraph", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "NodeDOM", :record-type :var} {:record-type :any}, {:name "KeyDOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Graph", :record-type :var} {:type {:functor "-", :arglist ({:record-type :integer} {:type {:record-type :integer}, :record-type :list}), :record-type :compound}, :record-type :list}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:37.072: Step 0"
"2019-05-12T21:32:37.162: Step 1"
"2019-05-12T21:32:37.332: Step 2"
{{:name "Json", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :empty-list}}
{{:name "J", :record-type :var} {:record-type :any}}
{{:name "_382", :record-type :var} {:record-type :any}}
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Key", :record-type :var} {:record-type :any}}
{{:name "TypeCheck", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}}
{{:name "_590", :record-type :var} {:record-type :any}, {:name "JT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "JH", :record-type :var} {:record-type :any}}
{{:name "_410", :record-type :var} {:record-type :any}}
{{:name "J0", :record-type :var} {:record-type :any}, {:name "J", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}}
{{:name "J", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}}
{{:name "V0", :record-type :var} {:record-type :any}, {:name "_542", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{{:name "Atom", :record-type :var} {:record-type :atom}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "Number", :record-type :var} {:record-type :number}}
{{:name "H", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}}
{}
{}
{{:name "_402", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:38.367: Step 0"
"2019-05-12T21:32:38.482: Step 1"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Key", :record-type :var} {:record-type :any}}
{{:name "Data", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "_1102", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "_1812", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_1020", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "_1098", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{{:name "Ins", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :ground}}
{{:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}}
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Service", :record-type :var} {:record-type :any}}
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}}
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}}
{{:name "_730", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "ValueToSend", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_584", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "_5602", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Services", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Service", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "_5138", :record-type :var} {:record-type :any}, {:name "_5140", :record-type :var} {:record-type :any}}
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Service", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:38.929: Step 0"
"2019-05-12T21:32:39.031: Step 1"
"2019-05-12T21:32:39.114: Step 2"
{{:name "Atom", :record-type :var} {:arglist #{{:record-type :atom} {:record-type :var}}, :record-type :one-of}, {:name "Uri0", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atom}, {:name "Term0", :record-type :var} {:record-type :atom}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Fragment", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "MaybeBase", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Scheme", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_470", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :var}, {:name "Term", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "PathList", :record-type :var} {:record-type :any}}
{{:name "Path", :record-type :var} {:record-type :atom}, {:name "Term", :record-type :var} {:record-type :atom}}
{{:name "Password", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "Authority", :record-type :var} {:record-type :any}}
{{:name "Slashes", :record-type :var} {:record-type :any}, {:name "ReverseList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "List", :record-type :var} {:record-type :nonvar}}
{{:name "List", :record-type :var} {:record-type :any}, {:name "Slashes", :record-type :var} {:record-type :nonvar}, {:name "ReverseList", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "RelUri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Suffix", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{{:name "Result", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Content", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "MaybeBase", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Scheme", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :var}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}}
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Search", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}}
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "PathA", :record-type :var} {:record-type :any}, {:name "PathB", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:32:39.545: Step 0"
"2019-05-12T21:41:44.342: Step 1"
{{:name "Neg", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "NPos", :record-type :var} {:record-type :number}, {:name "E", :record-type :var} {:record-type :any}, {:name "LG1", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "ROC", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "AUCROC", :record-type :var} {:record-type :any}, {:name "NEx", :record-type :var} {:record-type :integer}, {:name "NNeg", :record-type :var} {:record-type :integer}, {:name "_4128", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "AUCPR", :record-type :var} {:record-type :any}}
{{:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "AccList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_424", :record-type :var} {:record-type :any}, {:name "AccListNew", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_P", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "AccListNew", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_P", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "AccList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_FP", :record-type :var} {:record-type :any}, {:name "_TP", :record-type :var} {:record-type :any}, {:name "_P0", :record-type :var} {:record-type :any}, {:name "_FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_TN", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :any}, {:name "Po1", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Po2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Po0", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :any}, {:name "Po1", :record-type :var} {:record-type :any}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "Po2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Po0", :record-type :var} {:record-type :any}}
{{:name "_P0", :record-type :var} {:record-type :any}, {:name "_FN", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Prec", :record-type :var} {:record-type :number}, {:name "_TN", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Pr", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "P", :record-type :var} {:record-type :any}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:record-type :any}, {:name "Pr", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Neg", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "NPos", :record-type :var} {:record-type :number}, {:name "E", :record-type :var} {:record-type :any}, {:name "LG1", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "LG2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "MaxAcc", :record-type :var} {:record-type :any}, {:name "NEx", :record-type :var} {:record-type :integer}, {:name "NNeg", :record-type :var} {:record-type :integer}, {:name "_9854", :record-type :var} {:record-type :any}, {:name "AccList", :record-type :var} {:record-type :any}}
{{:name "_TPA", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_Flag", :record-type :var} {:record-type :any}, {:name "_Pos", :record-type :var} {:record-type :any}, {:name "_FPA", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Pos", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "PR3", :record-type :var} {:record-type :any}, {:name "PR0", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :any}, {:name "A0", :record-type :var} {:record-type :any}, {:name "TPA", :record-type :var} {:record-type :any}, {:name "TPB", :record-type :var} {:record-type :number}, {:name "PR2", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "FPA", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "Flag", :record-type :var} {:record-type :any}, {:name "FPB", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_TPB", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_R0", :record-type :var} {:record-type :any}, {:name "_FPB", :record-type :var} {:record-type :any}, {:name "_TPA", :record-type :var} {:record-type :any}, {:name "_Pos", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "_P0", :record-type :var} {:record-type :any}, {:name "_FPA", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "R0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P", :record-type :var} {:record-type :number}, {:name "Pos", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "PR0", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :number}, {:name "A0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPA", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPB", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:record-type :any}, {:name "FPA", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "R", :record-type :var} {:record-type :number}, {:name "PR", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}, {:name "FPB", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I1", :record-type :var} {:record-type :number}}
{{:name "FPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC1", :record-type :var} {:record-type :number}, {:name "AUC0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "TPR1", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC2", :record-type :var} {:record-type :number}, {:name "FPR1", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC1", :record-type :var} {:record-type :any}, {:name "AUC0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "R0", :record-type :var} {:record-type :any}, {:name "Neg", :record-type :var} {:record-type :any}, {:name "Pos", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Points", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TP", :record-type :var} {:record-type :any}, {:name "_TPoints", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FP", :record-type :var} {:record-type :any}, {:name "P_0", :record-type :var} {:record-type :any}, {:name "TL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FN", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "Flag", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:49.582: Step 0"
"2019-05-12T21:52:49.947: Step 1"
{{:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:functor "element", :arglist ({:record-type :atom} {:record-type :any} {:record-type :any}), :record-type :compound}}
{{:name "Stdout", :record-type :var} {:record-type :any}, {:name "Ftped", :record-type :var} {:record-type :any}}
{{:name "_Dir", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:record-type :any}, {:name "Ss", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}}
{{:name "_C", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}}
{{:name "Exts", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "XML", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}}
{}
{{:name "H2", :record-type :var} {:record-type :any}, {:name "MM", :record-type :var} {:record-type :any}, {:name "H1", :record-type :var} {:record-type :any}, {:name "H3", :record-type :var} {:record-type :any}, {:name "H4", :record-type :var} {:record-type :any}, {:name "M1", :record-type :var} {:record-type :any}, {:name "M2", :record-type :var} {:record-type :any}, {:name "YYYY", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "SS", :record-type :var} {:record-type :any}, {:name "DD", :record-type :var} {:record-type :any}, {:name "D2", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "D1", :record-type :var} {:record-type :any}, {:name "MO", :record-type :var} {:record-type :any}, {:name "HH", :record-type :var} {:record-type :any}}
{{:name "E", :record-type :var} {:record-type :any}, {:name "Es", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "GroupP", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "NameC", :record-type :var} {:record-type :any}, {:name "GroupC", :record-type :var} {:record-type :any}, {:name "UserP", :record-type :var} {:record-type :any}, {:name "UserC", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Kind", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "I1", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "OthersP", :record-type :var} {:record-type :any}}
{{:name "E", :record-type :var} {:record-type :any}}
{{:name "E", :record-type :var} {:record-type :any}}
{{:name "W", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{{:name "Wp", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Sp", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NoPath", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "WithPath", :record-type :var} {:record-type :any}}
{{:name "_826", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_822", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "As", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Attrs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tree", :record-type :var} {:record-type :any}, {:name "SList", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "E", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "XLines", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "XLine", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:50.680: Step 0"
"2019-05-12T21:52:50.722: Step 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "X0", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Maybe", :record-type :var} {:record-type :nonvar}, {:name "_4162", :record-type :var} {:record-type :any}}
{{:name "Maybe", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Accum0", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Maybe", :record-type :var} {:arglist #{{:functor "just", :arglist ({:record-type :any}), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}}
{}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Maybe", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}}
{{:name "_396", :record-type :var} {:record-type :any}}
{}
{{:name "H", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V0", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Default", :record-type :var} {:record-type :any}}
{{:name "_430", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}}
{{:name "Maybe", :record-type :var} {:record-type :any}}
{{:name "Maybe", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:51.552: Step 0"
"2019-05-12T21:52:51.993: Step 1"
{{:name "N", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_4050", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "N0", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "N", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "_Goal", :record-type :var} {:record-type :any}}
{{:name "SepDCG", :record-type :var} {:record-type :any}, {:name "Elem", :record-type :var} {:record-type :any}, {:name "ElemDCG", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "H", :record-type :var} {:record-type :nonvar}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:53.087: Step 0"
"2019-05-12T21:52:53.209: Step 1"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "Secret", :record-type :var} {:record-type :any}}
{{:name "SecretKey", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "AccessKey", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "T", :record-type :var} {:record-type :any}, {:name "Now", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}}
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "_460", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Encoded", :record-type :var} {:record-type :any}, {:name "Sorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "_456", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "Host", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{{:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "HmacBytes", :record-type :var} {:record-type :any}, {:name "SignMe", :record-type :var} {:record-type :any}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Secret", :record-type :var} {:record-type :any}, {:name "Args0", :record-type :var} {:record-type :any}, {:name "Signature", :record-type :var} {:record-type :any}, {:name "Method", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{{:name "Encoded", :record-type :var} {:record-type :atom}, {:name "Value", :record-type :var} {:record-type :any}, {:name "E0", :record-type :var} {:record-type :atom}, {:name "E1", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "E2", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:53.626: Step 0"
"2019-05-12T21:52:53.702: Step 1"
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "_4098", :record-type :var} {:record-type :any}, {:name "_4100", :record-type :var} {:record-type :any}, {:name "_4102", :record-type :var} {:record-type :any}}
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :atom}}
{{:name "Path0", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "_4176", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :integer}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_4174", :record-type :var} {:record-type :any}}
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :atom}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :atom}}
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "_Watch", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "On", :record-type :var} {:record-type :nonvar}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "Flags", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "Event0", :record-type :var} {:record-type :nonvar}, {:name "On0", :record-type :var} {:arglist #{{:record-type :atom} {:functor "member", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Cookie", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}}
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "Directory", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "Directory", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Flags", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Cookie", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "_620", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Obj", :record-type :var} {:record-type :any}, {:name "_618", :record-type :var} {:record-type :any}}
{{:name "_Cookie", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}, {:name "_Watch", :record-type :var} {:record-type :any}, {:name "_Flags", :record-type :var} {:record-type :any}, {:name "_INotify", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :nonvar}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:54.856: Step 0"
"2019-05-12T21:52:55.094: Step 1"
{{:name "IP0", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Peer", :record-type :var} {:functor "ip", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "HREF", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "RecapthaParams", :record-type :var} {:record-type :any}, {:name "Back", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Port", :record-type :var} {:record-type :any}}
{{:name "Peer", :record-type :var} {:record-type :any}, {:name "Challenge", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:record-type :any}, {:name "Atoms", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "PrivateKey", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_Request", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Line0", :record-type :var} {:record-type :any}}
{{:name "Parameters", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_546", :record-type :var} {:record-type :any}, {:name "Challenge", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "_462", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Theme", :record-type :var} {:record-type :any}, {:name "PublicKey", :record-type :var} {:record-type :any}}
{{:name "Theme", :record-type :var} {:record-type :any}, {:name "PublicKey", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "_408", :record-type :var} {:record-type :any}}
{{:name "More", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Line1", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "RecapthaParams", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Request", :record-type :var} {:record-type :any}}
{{:name "_Response", :record-type :var} {:record-type :any}, {:name "_Challenge", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:55.625: Step 0"
"2019-05-12T21:52:55.966: Step 1"
"2019-05-12T21:52:56.347: Step 2"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{{:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Plain1", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "StateOut", :record-type :var} {:record-type :any}, {:name "Mod", :record-type :var} {:record-type :any}, {:name "Goal1", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "In", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "StateIn", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "StateIn", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_704", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term1", :record-type :var} {:functor ":-", :arglist ({:functor "go", :arglist ({:arglist ({:record-type :any}), :record-type :tuple} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :any}), :record-type :compound}, {:name "StateOut", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:functor "-->", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FieldValue", :record-type :var} {:record-type :nonvar}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:record-type :atom} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}}, :record-type :one-of}, {:name "M", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "M", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FieldValue", :record-type :var} {:record-type :nonvar}, {:name "Tail", :record-type :var} {:record-type :any}}
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_444", :record-type :var} {:record-type :any}, {:name "_448", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "M", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "RecOut", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Field", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "RecTmp", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:record-type :atom} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}}, :record-type :one-of}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_3998", :record-type :var} {:record-type :any}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "M", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "In", :record-type :var} {:arglist #{{:functor "run_state", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "gets", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "get", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "mod_state", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "put", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "puts", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Out", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_3998", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}}
{{:name "S0", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:52:56.901: Step 0"
"2019-05-12T21:53:07.266: Step 1"
"2019-05-12T21:53:17.296: Step 2"
{{:name "Tokens", :record-type :var} {:record-type :any}, {:name "Untokens", :record-type :var} {:record-type :any}}
{}
{{:name "Lowers", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Uppers", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "U", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "S0", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "F", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}}
{}
{{:name "C", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{{:name "DCG", :record-type :var} {:record-type :any}, {:name "Selection", :record-type :var} {:record-type :any}, {:name "Text0", :record-type :var} {:record-type :any}, {:name "DCG_Selection", :record-type :var} {:record-type :any}, {:name "Text1", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Opt_Selection", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :any}}
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}}
{}
{{:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "W", :record-type :var} {:record-type :any}}
{{:name "W", :record-type :var} {:record-type :any}}
{}
{{:name "W", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "W", :record-type :var} {:record-type :any}}
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :any}}
{{:name "L", :record-type :var} {:record-type :any}}
{{:name "DCG", :record-type :var} {:record-type :any}, {:name "Text0", :record-type :var} {:record-type :any}, {:name "Text1", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{{:name "NewCount", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}}
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{{:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opt_DCG", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "P", :record-type :var} {:record-type :any}}
{{:name "CodeTokens", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Tokenized", :record-type :var} {:record-type :any}}
{}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Str", :record-type :var} {:record-type :any}, {:name "LowerStr", :record-type :var} {:record-type :any}, {:name "LowerCodes", :record-type :var} {:record-type :any}}
{}
{{:name "_392", :record-type :var} {:record-type :any}}
{{:name "L", :record-type :var} {:record-type :any}}
{{:name "O", :record-type :var} {:record-type :any}}
{{:name "S0", :record-type :var} {:record-type :any}, {:name "S1", :record-type :var} {:record-type :any}}
{}
{{:name "P", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "TokenCodes", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}, {:name "Untokens", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
{}
{{:name "Converted", :record-type :var} {:record-type :nonvar}, {:name "Token", :record-type :var} {:record-type :nonvar}, {:name "Conversion", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "ResultArg", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :nonvar}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{{:name "T_Args", :record-type :var} {:record-type :nonvar}, {:name "T_X_Args", :record-type :var} {:record-type :nonvar}, {:name "X", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:25.503: Step 0"
"2019-05-12T21:53:25.505: Step 1"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Buf", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:25.908: Step 0"
"2019-05-12T21:53:26.662: Step 1"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_440", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :ground}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "_Location", :record-type :var} {:record-type :any}}
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_438", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}}
{{:name "Spec", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}}
{{:name "Var", :record-type :var} {:record-type :var}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{{:name "Codes", :record-type :var} {:record-type :any}}
{{:name "String", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{{:name "_426", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}, {:name "Numeric", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "_400", :record-type :var} {:record-type :any}}
{}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Action", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{{:name "Action", :record-type :var} {:record-type :any}, {:name "Modifier", :record-type :var} {:record-type :any}, {:name "Numeric", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Action", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "Item", :record-type :var} {:record-type :any}, {:name "Items", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "C", :record-type :var} {:record-type :any}}
{}
{}
{}
{{:name "_400", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ArgsLen", :record-type :var} {:record-type :integer}, {:name "TypesLen", :record-type :var} {:record-type :integer}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}}
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:arglist #{{:functor "debug", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "format", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "format", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Source", :record-type :var} {:record-type :any}, {:name "_Caller", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{{:name "Action", :record-type :var} {:record-type :integer}, {:name "_430", :record-type :var} {:type {:record-type :atom}, :record-type :list}}
{}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:27.673: Step 0"
"2019-05-12T21:53:28.551: Step 1"
"2019-05-12T21:53:29.813: Step 2"
{}
{}
{}
{}
{}
{}
{}
{{:name "B1", :record-type :var} {:record-type :any}, {:name "B2", :record-type :var} {:record-type :any}, {:name "B0", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "MSB", :record-type :var} {:record-type :any}, {:name "LSB", :record-type :var} {:record-type :any}, {:name "Instr", :record-type :var} {:record-type :any}}
{{:name "Sharps", :record-type :var} {:record-type :any}}
{{:name "NN", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}}
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "MSB", :record-type :var} {:record-type :any}, {:name "LSB", :record-type :var} {:record-type :any}}
{{:name "NN", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "Sharps", :record-type :var} {:record-type :any}}
{{:name "Ch", :record-type :var} {:record-type :any}, {:name "Vol", :record-type :var} {:record-type :any}}
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}}
{{:name "Ch", :record-type :var} {:record-type :any}, {:name "Pan", :record-type :var} {:record-type :any}}
{{:name "_4046", :record-type :var} {:record-type :any}, {:name "_4048", :record-type :var} {:record-type :integer}, {:name "_4050", :record-type :var} {:record-type :integer}, {:name "Instr", :record-type :var} {:arglist #{{:functor "/", :arglist ({:record-type :atom} {:record-type :integer}), :record-type :compound} {:record-type :atom} {:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "/", :arglist ({:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :integer}), :record-type :compound}}, :record-type :one-of}}
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "LSB", :record-type :var} {:record-type :integer}, {:name "Instr", :record-type :var} {:arglist #{{:functor "/", :arglist ({:record-type :atom} {:record-type :integer}), :record-type :compound} {:record-type :atom} {:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "/", :arglist ({:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :integer}), :record-type :compound}}, :record-type :one-of}}
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "Type", :record-type :var} {:record-type :atom}}
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "Type", :record-type :var} {:record-type :atom}}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:32.245: Step 0"
"2019-05-12T21:53:32.706: Step 1"
"2019-05-12T21:53:33.222: Step 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{{:name "_406", :record-type :var} {:record-type :any}}
{{:name "Mode", :record-type :var} {:record-type :any}}
{}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "_4062", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_4060", :record-type :var} {:record-type :any}}
{{:name "R1s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Last", :record-type :var} {:record-type :empty-list}, {:name "_4050", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "_4052", :record-type :var} {:record-type :any}, {:name "R0s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R1s_", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X1", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "R0s_", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X2", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "SingleNonTerminal", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:functor ",", :arglist ({:record-type :atom} {:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :atom}}
{{:name "X2", :record-type :var} {:functor "{}", :arglist ({:functor ",", :arglist ({:record-type :any} {:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "{}", :arglist ({:record-type :any}), :record-type :compound}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "Xsn2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vs", :record-type :var} {:record-type :any}}
{{:name "DCGBodyList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :nonvar}, {:name "PredicateName", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "As2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "As1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X2n", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}, {:name "Bind", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{{:name "Zs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "*", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "?", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}}
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_484", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor "call_sequence_ground", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:34.529: Step 0"
"2019-05-12T21:53:46.191: Step 1"
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Generator", :record-type :var} {:record-type :any}}
{{:name "NowTolerated", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Tolerance", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Epoch", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Payload", :record-type :var} {:record-type :any}}
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "Iat", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "KeyStr", :record-type :var} {:record-type :any}}
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{{:name "_412", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyResult", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyDict", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}}
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "MaxInt", :record-type :var} {:record-type :any}, {:name "BlacklistAdd", :record-type :var} {:record-type :any}, {:name "BlacklistCheck", :record-type :var} {:record-type :any}}
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:record-type :any}}
{{:name "PayloadDict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "KeyDict", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}, {:name "_3098", :record-type :var} {:record-type :any}, {:name "PayloadFirst", :record-type :var} {:record-type :any}}
{{:name "NowTolerated", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Tolerance", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Epoch", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Key", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "IssPayload", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Iss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}}
{{:name "Payload", :record-type :var} {:record-type :any}}
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:53:55.708: Step 0"
"2019-05-12T21:54:02.630: Step 1"
"2019-05-12T21:54:13.940: Step 2"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "Time", :record-type :var} {:record-type :any}, {:name "Secs", :record-type :var} {:record-type :any}, {:name "Fracs", :record-type :var} {:record-type :any}}
{{:name "Secs", :record-type :var} {:record-type :any}, {:name "Fracs", :record-type :var} {:record-type :any}}
{{:name "Port", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "_464", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_478", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "Time", :record-type :var} {:record-type :any}, {:name "Sender", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{{:name "Port", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{{:name "_564", :record-type :var} {:record-type :any}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Delay", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Time", :record-type :var} {:record-type :number}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "Addr", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{{:name "Targ", :record-type :var} {:record-type :any}, {:name "Time", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Srv", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :number}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T1", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_524", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "Addr", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}}
{{:name "_3986", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{{:name "Num", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:54:25.705: Step 0"
"2019-05-12T21:54:30.309: Step 1"
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{{:name "T", :record-type :var} {:record-type :number}, {:name "Tfloat", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
{}
{}
{{:name "C", :record-type :var} {:record-type :any}}
{}
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Document", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "Tries0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :number}, {:name "_788", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "E", :record-type :var} {:record-type :any}}
{{:name "Encoded", :record-type :var} {:record-type :atom}, {:name "Value", :record-type :var} {:record-type :any}, {:name "E0", :record-type :var} {:record-type :atom}, {:name "E1", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "E2", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{{:name "Nonce", :record-type :var} {:record-type :any}}
{{:name "_6494", :record-type :var} {:record-type :any}, {:name "_6674", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :any}, {:name "_6678", :record-type :var} {:record-type :any}, {:name "Response0", :record-type :var} {:record-type :any}, {:name "_6684", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :any}, {:name "Document", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Value0", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Id", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Auth", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Json", :record-type :var} {:record-type :any}, {:name "Pairs0", :record-type :var} {:record-type :any}, {:name "Auth", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
{{:name "_5290", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :ground}}
{{:name "Document", :record-type :var} {:record-type :any}, {:name "IdLong", :record-type :var} {:record-type :atom}, {:name "_5490", :record-type :var} {:record-type :integer}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HashBytes", :record-type :var} {:record-type :any}, {:name "IdShort", :record-type :var} {:record-type :atom}}
{{:name "DashPairs", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "EqPairs", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:54:35.654: Step 0"
"2019-05-12T21:54:46.596: Step 1"
"2019-05-12T21:55:01.300: Step 2"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Vals", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fields", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Field", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Len", :record-type :var} {:record-type :integer}}
{{:name "O", :record-type :var} {:record-type :any}}
{{:name "New", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Newer", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:record-type :any}}
{{:name "_518", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{{:name "Nt", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N1", :record-type :var} {:record-type :number}, {:name "Val", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Nt", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Val", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Field", :record-type :var} {:record-type :nonvar}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FldName", :record-type :var} {:record-type :any}}
{{:name "_412", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Val", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :number}, {:name "Val", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{{:name "_732", :record-type :var} {:record-type :any}, {:name "NewObj", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "_814", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObj", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "_668", :record-type :var} {:record-type :any}}
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{{:name "Len", :record-type :var} {:record-type :integer}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "NewObj", :record-type :var} {:record-type :nonvar}, {:name "NewObjFlds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObjFlds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObj", :record-type :var} {:record-type :nonvar}, {:name "F", :record-type :var} {:record-type :any}, {:name "Fld", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "X", :record-type :var} {:record-type :any}, {:name "N1", :record-type :var} {:record-type :number}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_3988", :record-type :var} {:record-type :any}}
{{:name "F", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:55:17.441: Step 0"
"2019-05-12T21:55:17.533: Step 1"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}, {:name "V7", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V8", :record-type :var} {:record-type :any}}
{{:name "V7", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "H", :record-type :var} {:record-type :any}, {:name "Globalscopy", :record-type :var} {:record-type :any}, {:name "Hcopy", :record-type :var} {:record-type :any}, {:name "Bcopy", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Globals", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:55:18.242: Step 0"
"2019-05-12T21:55:25.474: Step 1"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Terms", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}}
{{:name "IO", :record-type :var} {:type {:arglist #{{:functor "eof_action", :arglist ({:arglist #{{:value "eof_code", :record-type :exact} {:value "error", :record-type :exact} {:value "reset", :record-type :exact}}, :record-type :one-of}), :record-type :compound} {:functor "alias", :arglist ({:record-type :atom}), :record-type :compound} {:functor "encoding", :arglist ({:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list}, {:name "F", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "G", :record-type :var} {:record-type :any}}
{{:name "IxVar", :record-type :var} {:record-type :any}, {:name "L2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ix", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Args2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "IO", :record-type :var} {:type {:arglist #{{:functor "eof_action", :arglist ({:arglist #{{:value "eof_code", :record-type :exact} {:value "error", :record-type :exact} {:value "reset", :record-type :exact}}, :record-type :one-of}), :record-type :compound} {:functor "alias", :arglist ({:record-type :atom}), :record-type :compound} {:functor "encoding", :arglist ({:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "G", :record-type :var} {:record-type :any}}
{{:name "File", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Opts2", :record-type :var} {:record-type :any}}
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "IO", :record-type :var} {:record-type :ground}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "PlFile", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "QlfFile", :record-type :var} {:record-type :any}, {:name "_Ext", :record-type :var} {:record-type :any}}
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{{:name "Ix2", :record-type :var} {:record-type :number}, {:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CalledGoal", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:record-type :any}, {:name "CalledGoal", :record-type :var} {:record-type :any}}
{{:name "_9374", :record-type :var} {:record-type :any}, {:name "_9368", :record-type :var} {:record-type :any}, {:name "_9372", :record-type :var} {:record-type :any}, {:name "_9370", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "IO", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Pred", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "IO", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Pred", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Terms", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "FileName", :record-type :var} {:record-type :atom}, {:name "_442", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DirAbs", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :atom}, {:name "AbsFilePath", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Mod", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}}
{{:name "N", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}}
{{:name "M", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :ground}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:55:33.389: Step 0"
"2019-05-12T21:55:33.564: Step 1"
{{:name "TapeOut", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TapeIn", :record-type :var} {:record-type :any}, {:name "Config", :record-type :var} {:record-type :any}, {:name "Rules", :record-type :var} {:record-type :any}, {:name "_4118", :record-type :var} {:record-type :any}, {:name "_4120", :record-type :var} {:record-type :any}, {:name "_4116", :record-type :var} {:record-type :any}, {:name "_4114", :record-type :var} {:record-type :any}, {:name "IS", :record-type :var} {:record-type :any}, {:name "Ls1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "B", :record-type :var} {:record-type :any}}
{{:name "Sym", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_452", :record-type :var} {:record-type :any}}
{{:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "_494", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}}
{{:name "Rout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Tape", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{{:name "Rout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "TapeOut", :record-type :var} {:record-type :any}, {:name "RS", :record-type :var} {:record-type :any}, {:name "TapeIn", :record-type :var} {:record-type :any}, {:name "Config", :record-type :var} {:record-type :any}, {:name "Rules", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Symbols", :record-type :var} {:record-type :any}, {:name "FS", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}}
{{:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_494", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}}
{{:name "Blank", :record-type :var} {:record-type :atom}, {:name "RStates", :record-type :var} {:arglist ({:record-type :atom}), :record-type :tuple}, {:name "IState", :record-type :var} {:record-type :atom}, {:name "Symbols", :record-type :var} {:arglist ({:record-type :atom} {:record-type :integer} {:record-type :integer}), :record-type :tuple}, {:name "FStates", :record-type :var} {:arglist ({:record-type :atom}), :record-type :tuple}}
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:55:34.395: Step 0"
"2019-05-12T21:55:34.508: Step 1"
{{:name "XX", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_414", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{{:name "Funcs", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :atom}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Out", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Funcs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Goals", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tmp", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{{:name "Term", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "MGoal", :record-type :var} {:record-type :any}, {:name "Output", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "MTerm", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{{:name "_396", :record-type :var} {:record-type :any}, {:name "_590", :record-type :var} {:record-type :any}, {:name "_394", :record-type :var} {:record-type :any}}
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :var}, {:name "_4012", :record-type :var} {:record-type :any}}
{{:name "In", :record-type :var} {:record-type :var}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Expr", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:functor "get_dict", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "In", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:functor "of", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}}
{{:name "Format", :record-type :var} {:record-type :atom}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{{:name "Format", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_4132", :record-type :var} {:record-type :any}, {:name "_4130", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:55:35.140: Step 0"
"2019-05-12T21:55:45.704: Step 1"
"2019-05-12T21:55:54.977: Step 2"
{{:name "Predicate", :record-type :var} {:record-type :any}, {:name "Implementation", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{{:name "_4136", :record-type :var} {:record-type :any}, {:name "Sorter", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "TotalCost", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AvgCost", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Cost", :record-type :var} {:record-type :any}}
{{:name "Predicate", :record-type :var} {:record-type :any}, {:name "Chosen", :record-type :var} {:record-type :any}, {:name "Choices", :record-type :var} {:record-type :any}}
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Target", :record-type :var} {:record-type :number}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{{:name "N1", :record-type :var} {:record-type :number}, {:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pivot", :record-type :var} {:record-type :any}, {:name "LeftSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "RightSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Arguments", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Cost", :record-type :var} {:record-type :number}, {:name "Before", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "After", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Implementation", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :number}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "_398", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Left0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "Chosen", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Sorter", :record-type :var} {:record-type :any}, {:name "MaxLen", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{{:name "MostCostly", :record-type :var} {:record-type :any}, {:name "ObservationCount", :record-type :var} {:record-type :integer}, {:name "Keepers", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{{:name "_382", :record-type :var} {:record-type :any}}
{{:name "_630", :record-type :var} {:record-type :any}, {:name "Leftover", :record-type :var} {:record-type :any}, {:name "Choices", :record-type :var} {:record-type :any}, {:name "Needle", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{{:name "MaxLen", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_454", :record-type :var} {:record-type :any}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "NewName", :record-type :var} {:record-type :any}}
{{:name "Chosen", :record-type :var} {:record-type :any}}
{{:name "Cost", :record-type :var} {:record-type :any}}
{{:name "Winner", :record-type :var} {:record-type :any}}
{{:name "Loser", :record-type :var} {:record-type :any}}
{{:name "Sorters", :record-type :var} {:arglist ({:record-type :atom} {:record-type :atom} {:record-type :atom} {:record-type :atom}), :record-type :tuple}, {:name "Sorter", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "MostCostly", :record-type :var} {:record-type :any}, {:name "_704", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_672", :record-type :var} {:record-type :any}, {:name "AscendingCost", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "Costs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
{{:name "X", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "BC", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "AB", :record-type :var} {:record-type :atom}, {:name "AC", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Names", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :integer}, {:name "_488", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Sym", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "Implementations", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :atomic} {:record-type :integer}), :record-type :compound}), :record-type :compound}}
{{:name "Cost", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}, {:name "Implementation", :record-type :var} {:record-type :any}}
{{:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Ys", :record-type :var} {:record-type :any}}
{{:name "Xs", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Smaller", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:56:04.390: Step 0"
"2019-05-12T21:56:04.536: Step 1"
"2019-05-12T21:56:04.756: Step 2"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "_394", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "TestCount", :record-type :var} {:record-type :integer}, {:name "_1112", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Tests0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :integer} {:record-type :integer}), :record-type :compound}, {:name "State", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "Tests2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tests1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "_458", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "_416", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :any}, {:name "_568", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Reason", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Todo", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}, {:name "Expectation", :record-type :var} {:arglist #{{:functor "throws", :arglist ({:record-type :any}), :record-type :compound} {:functor "todo", :arglist ({:record-type :any}), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "Options0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "TestCount", :record-type :var} {:record-type :any}}
{{:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_510", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "TestCount", :record-type :var} {:record-type :any}, {:name "_4016", :record-type :var} {:record-type :any}, {:name "PassedCount", :record-type :var} {:record-type :any}}
{}
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Reason", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:record-type :any}}
{{:name "Reason", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:record-type :any}}
{}
{}
{{:name "Head", :record-type :var} {:record-type :any}}
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_398", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:name "Out", :record-type :var} {:record-type :any}}
{{:name "P", :record-type :var} {:record-type :nonvar}, {:name "Preds0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Functor", :record-type :var} {:record-type :any}, {:name "Preds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :nonvar}, {:name "NewArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tmp", :record-type :var} {:record-type :any}}
{{:name "Passed", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Passed0", :record-type :var} {:record-type :any}, {:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Test", :record-type :var} {:record-type :nonvar}, {:name "Count", :record-type :var} {:record-type :any}, {:name "Count0", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Cleanup", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}, {:name "Exception", :record-type :var} {:record-type :nonvar}}
{{:name "_394", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :integer} {:record-type :integer}), :record-type :compound}, {:name "_478", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:56:05.072: Step 0"
"2019-05-12T21:56:05.231: Step 1"
"2019-05-12T21:56:05.409: Step 2"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "_572", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :nonvar}}
{{:name "Dir", :record-type :var} {:record-type :ground}, {:name "TermLoc", :record-type :var} {:record-type :any}, {:name "Loc", :record-type :var} {:record-type :any}, {:name "_646", :record-type :var} {:record-type :any}}
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "_586", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "_T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "_474", :record-type :var} {:record-type :any}}
{}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_4254", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TArgs", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "All", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "TArgs", :record-type :var} {:record-type :any}}
{{:name "OptNames", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Garg", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Cd", :record-type :var} {:record-type :atom}, {:name "_Arg", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "_Goal", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{{:name "Serial", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Serial", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "NesTArgs", :record-type :var} {:record-type :any}, {:name "GArgs", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "_Wch", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "TArgs", :record-type :var} {:record-type :any}}
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}}
{{:name "Out", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Line1", :record-type :var} {:arglist #{{:type {:record-type :integer}, :record-type :list} {:record-type :atom}}, :record-type :one-of}}
{{:name "_408", :record-type :var} {:record-type :any}}
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Line", :record-type :var} {:record-type :atom}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Line2", :record-type :var} {:arglist #{{:type {:record-type :integer}, :record-type :list} {:record-type :atom}}, :record-type :one-of}}
{{:name "Body", :record-type :var} {:functor ",", :arglist ({:functor ";", :arglist ({:functor "->", :arglist ({:functor "atomic", :arglist ({:record-type :any}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "compound_name_arity", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ",", :arglist ({:functor "which", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:functor "@", :arglist ({:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Term2", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "goal_expansion", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "_Arity", :record-type :var} {:record-type :any}, {:name "_778", :record-type :var} {:record-type :any}, {:name "Term1", :record-type :var} {:record-type :any}, {:name "UnixCom", :record-type :var} {:record-type :any}}
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "goal_expansion", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
{{:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "All", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{{:name "Files", :record-type :var} {:record-type :any}}
{{:name "Atom", :record-type :var} {:record-type :atomic}, {:name "Files", :record-type :var} {:record-type :any}}
{{:name "Serial", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{{:name "Which", :record-type :var} {:record-type :atom}, {:name "This", :record-type :var} {:record-type :atom}}
{{:name "Which", :record-type :var} {:record-type :any}, {:name "This", :record-type :var} {:record-type :any}}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-12T21:56:06.210: Step 0"
"2019-05-12T21:56:06.495: Step 1"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{{:name "X", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "OptionType", :record-type :var} {:record-type :any}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Key", :record-type :var} {:record-type :atom}, {:name "_500", :record-type :var} {:record-type :atom}, {:name "KeyLine", :record-type :var} {:record-type :atom}, {:name "Path0", :record-type :var} {:record-type :atom}, {:name "Path", :record-type :var} {:record-type :atom}}
{}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{{:name "API", :record-type :var} {:record-type :atom}, {:name "Request0", :record-type :var} {:record-type :any}, {:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{{:name "NumResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ApiKey", :record-type :var} {:record-type :any}, {:name "SearchResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "OneResult", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{{:name "_4446", :record-type :var} {:record-type :any}, {:name "_4506", :record-type :var} {:record-type :any}, {:name "_4866", :record-type :var} {:record-type :any}, {:name "_4686", :record-type :var} {:record-type :any}, {:name "_4806", :record-type :var} {:record-type :any}, {:name "_4626", :record-type :var} {:record-type :any}, {:name "_4746", :record-type :var} {:record-type :any}, {:name "_4566", :record-type :var} {:record-type :any}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_472", :record-type :var} {:record-type :any}, {:name "_532", :record-type :var} {:record-type :any}, {:name "_652", :record-type :var} {:record-type :any}, {:name "_592", :record-type :var} {:record-type :any}, {:name "_712", :record-type :var} {:record-type :any}}
{{:name "NumResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SearchResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "OneResult", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Query", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{{:name "SetType", :record-type :var} {:record-type :atom}, {:name "Union", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "OptionType", :record-type :var} {:record-type :atom}}
{}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Key", :record-type :var} {:record-type :any}, {:name "_Value", :record-type :var} {:record-type :any}}
{{:name "_NumResults", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_Value", :record-type :var} {:record-type :any}}
{{:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}}
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:name "Query", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
