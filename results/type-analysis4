"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:29.261: Step 0"
"No predicates found"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:29.494: Step 0"
"No predicates found"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:29.604: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:29.745: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:29.898: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:30.046: Step 0"
"2019-05-13T10:27:30.190: Step 1"
"file_utilities find_files 3 0"
{{:name "_4268", :record-type :var} {:record-type :any}, {:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "XAbs", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 0"
{{:name "_4012", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4016", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 1"
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 4"
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "_498", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 3"
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "FileA", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_4090", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 2"
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}}
{}
"file_utilities traverse_files 4 5"
{{:name "DirPredicate", :record-type :var} {:record-type :any}, {:name "CWD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FilePredicate", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:30.537: Step 0"
"2019-05-13T10:27:30.579: Step 1"
"pager with_pager 1 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{}
"pager with_pager 1 1"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"pager with_pager_setup 2 0"
{{:name "Pager", :record-type :var} {:record-type :any}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "PagerIn", :record-type :var} {:record-type :any}}
{}
"pager with_pager_cleanup 2 0"
{{:name "PagerIn", :record-type :var} {:record-type :ground}, {:name "Pid", :record-type :var} {:record-type :any}, {:name "_Status", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:31.310: Step 0"
"2019-05-13T10:27:31.323: Step 1"
"simple_bootstrap sw_templates 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"simple_bootstrap bootstrap 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"simple_bootstrap bootstrap_reply 2 0"
{{:name "Out", :record-type :var} {:record-type :ground}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"simple_bootstrap location 3 0"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:31.493: Step 0"
"2019-05-13T10:27:33.265: Step 1"
"2019-05-13T10:27:34.926: Step 2"
"thousands n 2 0"
{{:name "_3986", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{}
"thousands n 3 0"
{{:name "_3998", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_4002", :record-type :var} {:record-type :any}}
{}
"thousands n 4 0"
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "_4010", :record-type :var} {:record-type :any}, {:name "_4012", :record-type :var} {:record-type :any}}
{}
"thousands function_expansion 3 0"
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}}
{}
"thousands function_expansion 3 1"
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}}
{}
"thousands function_expansion 3 2"
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{}
"thousands calc_n 5 0"
{{:name "Ones", :record-type :var} {:record-type :integer}, {:name "Thousands", :record-type :var} {:record-type :integer}, {:name "X", :record-type :var} {:record-type :number}, {:name "Millions", :record-type :var} {:record-type :integer}, {:name "Billions", :record-type :var} {:record-type :integer}}
{}
"thousands test 1 0"
{}
{{:functor "n", :arglist ({:value 1, :record-type :integer} {:value 123, :record-type :integer} {:value 456, :record-type :integer} {:value 789, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "n", :arglist ({:value 1, :record-type :integer} {:value 123, :record-type :integer} {:value 456, :record-type :integer} {:value 789, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"thousands test 1 1"
{}
{{:functor "n", :arglist ({:value 123, :record-type :integer} {:value 456, :record-type :integer} {:value 789, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "n", :arglist ({:value 123, :record-type :integer} {:value 456, :record-type :integer} {:value 789, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"thousands test 1 4"
{{:name "X", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:functor "n", :arglist ({:value 9, :record-type :integer} {:value 876, :record-type :integer} {:value 543, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:name "X", :record-type :var} {:reason "No valid intersection", :record-type :error}, {:head {:functor "n", :arglist ({:value 9, :record-type :integer} {:value 876, :record-type :integer} {:value 543, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "X", :record-type :var}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "X", :record-type :var}, :tail {:head {:functor "n", :arglist ({:value 9, :record-type :integer} {:value 876, :record-type :integer} {:value 543, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"thousands test 1 6"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"thousands test 1 3"
{}
{{:functor "a", :arglist ({:value 9876, :record-type :integer} {:functor "b", :arglist ({:value 1234, :record-type :integer}), :record-type :compound} {:functor "c", :arglist ({:functor "d", :arglist ({:value 6542, :record-type :integer}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "a", :arglist ({:functor "n", :arglist ({:value 9, :record-type :integer} {:value 876, :record-type :integer}), :record-type :compound} {:functor "b", :arglist ({:functor "n", :arglist ({:value 1, :record-type :integer} {:value 234, :record-type :integer}), :record-type :compound}), :record-type :compound} {:functor "c", :arglist ({:functor "d", :arglist ({:functor "n", :arglist ({:value 6, :record-type :integer} {:value 542, :record-type :integer}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "a", :arglist ({:functor "n", :arglist ({:value 9, :record-type :integer} {:value 876, :record-type :integer}), :record-type :compound} {:functor "b", :arglist ({:functor "n", :arglist ({:value 1, :record-type :integer} {:value 234, :record-type :integer}), :record-type :compound}), :record-type :compound} {:functor "c", :arglist ({:functor "d", :arglist ({:functor "n", :arglist ({:value 6, :record-type :integer} {:value 542, :record-type :integer}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"thousands test 1 2"
{}
{{:head {:functor "n", :arglist ({:value 123, :record-type :integer} {:value 456, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "n", :arglist ({:value 123, :record-type :integer} {:value 456, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"thousands test 1 5"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:36.855: Step 0"
"2019-05-13T10:27:36.865: Step 1"
"dotcloud server 2 0"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ServiceName", :record-type :var} {:record-type :any}, {:name "Env", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_944", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "PortAtom", :record-type :var} {:record-type :any}, {:name "ServiceAtom", :record-type :var} {:record-type :any}}
{}
"dotcloud server 1 0"
{{:name "ServiceAtom", :record-type :var} {:record-type :any}}
{}
"dotcloud getenv_default 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:37.169: Step 0"
"2019-05-13T10:27:37.242: Step 1"
"2019-05-13T10:27:37.324: Step 2"
"2019-05-13T10:27:37.416: Step 3"
"rtg term_expansion 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :nonvar}}
{}
"rtg term_expansion 2 1"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"rtg goal_expansion 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "_4028", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}}
{}
"rtg apply_expansion 3 0"
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "L", :record-type :var} {:record-type :nonvar}}
{}
"rtg apply_expansion 3 1"
{{:name "M", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "L", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rtg syntax_expansion 3 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :any}}
{}
"rtg syntax_expansion 3 1"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "B_", :record-type :var} {:record-type :nonvar}, {:name "Bs_", :record-type :var} {:record-type :nonvar}, {:name "B", :record-type :var} {:record-type :any}}
{}
"rtg syntax_expansion 3 4"
{{:name "A1", :record-type :var} {:record-type :any}, {:name "Es1", :record-type :var} {:record-type :any}, {:name "A_", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :nonvar}, {:name "B_", :record-type :var} {:record-type :any}, {:name "Es", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :nonvar}, {:name "Ps", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B1", :record-type :var} {:record-type :any}, {:name "Ms", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rtg syntax_expansion 3 3"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"rtg syntax_expansion 3 2"
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"rtg syntax 1 0"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:37.688: Step 0"
"2019-05-13T10:27:37.792: Step 1"
"fnotation fnotation_ops 2 0"
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "_4040", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}}
{}
"fnotation subterm 2 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"fnotation subterm 2 1"
{{:name "_4032", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :nonvar}, {:name "S", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation 6 0"
{{:name "_4034", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_4036", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation 6 1"
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "ResTerm", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "LTerm", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation_l 6 0"
{{:name "Arg2", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Res1", :record-type :var} {:record-type :any}, {:name "Arg1", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Tmp", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation_l 6 1"
{{:name "_484", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Expr", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "GsT", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation_l 6 4"
{{:name "GsT", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Var", :record-type :var} {:record-type :any}, {:name "ArgsRes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "GsH", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation_l 6 3"
{{:name "_464", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}}
{}
"fnotation expand_notation_l 6 2"
{{:name "Gs", :record-type :var} {:record-type :any}, {:name "Ftr", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{}
"fnotation fn_expand 2 0"
{{:name "RH", :record-type :var} {:record-type :any}, {:name "NB", :record-type :var} {:record-type :any}, {:name "RB", :record-type :var} {:record-type :any}, {:name "_680", :record-type :var} {:record-type :any}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "_678", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_576", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}}
{}
"fnotation fn_expand 2 1"
{{:name "R", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}}
{}
"fnotation term_expansion 2 0"
{{:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:39.375: Step 0"
"2019-05-13T10:27:39.427: Step 1"
"twitter bearer_token_credentials 3 0"
{{:name "Secret", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}}
{}
"twitter get_bearer_token 5 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "B_Token", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Secret", :record-type :var} {:record-type :any}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "ListofData", :record-type :var} {:arglist ({:functor "=", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "ErrorCode", :record-type :var} {:record-type :any}}
{{:term "access_token", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"twitter make_a_search 4 0"
{{:name "ErrorCode", :record-type :var} {:record-type :any}, {:name "My_Search", :record-type :var} {:record-type :any}, {:name "B_Token64", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :atom}, {:name "My_Auth", :record-type :var} {:record-type :any}, {:name "JSON", :record-type :var} {:record-type :any}}
{}
"twitter url_extend 3 0"
{{:name "Search", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Components0", :record-type :var} {:record-type :any}, {:name "Components", :record-type :var} {:record-type :any}, {:name "URL0", :record-type :var} {:record-type :any}, {:name "Search0", :record-type :var} {:record-type :any}}
{}
"twitter extend_search 3 0"
{{:name "Var", :record-type :var} {:record-type :var}, {:name "Params", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}}
{}
"twitter extend_search 3 1"
{{:name "String", :record-type :var} {:record-type :any}, {:name "AllParams", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Params0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String0", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:39.910: Step 0"
"2019-05-13T10:27:39.946: Step 1"
"dictype dict_type 2 0"
{{:name "TypeValues", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "TypeSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "DictSorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Keys", :record-type :var} {:record-type :any}, {:name "TypePairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "DictValues", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "DictPairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{}
"dictype dictype 1 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"dictype dictype 1 1"
{{:name "Spec1", :record-type :var} {:record-type :any}, {:name "Spec2", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:40.121: Step 0"
"2019-05-13T10:27:40.300: Step 1"
"bencode bencode 2 0"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"bencode --> 2 0"
{{:name "I", :record-type :var} {:record-type :any}}
{}
"bencode --> 2 7"
{}
{}
"bencode --> 2 1"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"bencode --> 2 4"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"bencode --> 2 6"
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"bencode --> 2 3"
{{:name "Dict", :record-type :var} {:record-type :any}}
{}
"bencode --> 2 2"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
"bencode --> 2 5"
{}
{}
"bencode keys_sorted 1 0"
{{:name "L", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{}
"bencode test 1 0"
{{:name "X", :record-type :var} {:record-type :string}}
{}
"bencode test 1 7"
{{:name "X", :record-type :var} {:arglist ({:record-type :atom} {:record-type :atom}), :record-type :tuple}}
{}
"bencode test 1 1"
{{:name "X", :record-type :var} {:record-type :atom}}
{}
"bencode test 1 4"
{{:name "X", :record-type :var} {:record-type :string}}
{}
"bencode test 1 6"
{{:name "X", :record-type :var} {:record-type :string}}
{}
"bencode test 1 3"
{{:name "X", :record-type :var} {:record-type :integer}}
{}
"bencode test 1 2"
{{:name "X", :record-type :var} {:record-type :string}}
{}
"bencode test 1 11"
{}
{}
"bencode test 1 9"
{{:name "X", :record-type :var} {:arglist ({:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "-", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}), :record-type :tuple}}
{}
"bencode test 1 5"
{{:name "X", :record-type :var} {:record-type :integer}}
{}
"bencode test 1 10"
{}
{}
"bencode test 1 8"
{{:name "X", :record-type :var} {:record-type :string}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:40.632: Step 0"
"2019-05-13T10:27:40.695: Step 1"
"log4p fatal 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p debug 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p info 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"log4p log_handler 1 0"
{}
{}
"log4p info 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p log_levels 1 0"
{}
{}
"log4p trace 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"log4p debug 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"log4p log 2 0"
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{}
"log4p log 2 1"
{{:name "_Message", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :any}}
{}
"log4p log 2 2"
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :any}}
{}
"log4p valid_log_levels 3 0"
{{:name "LogLevel", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"log4p valid_log_levels 3 1"
{{:name "_Head", :record-type :var} {:record-type :any}, {:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LogLevel", :record-type :var} {:record-type :any}}
{}
"log4p warn 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"log4p set_log_level 2 0"
{{:name "OldLevel", :record-type :var} {:record-type :atom}, {:name "NewLevel", :record-type :var} {:record-type :any}}
{}
"log4p warn 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p default_log_handler 2 0"
{{:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p error 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p add_log_handler 1 0"
{}
{}
"log4p trace 1 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p log_level 1 0"
{}
{}
"log4p error 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"log4p logf 3 0"
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "FullMessage", :record-type :var} {:record-type :any}, {:name "Level", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"log4p valid_log_levels 1 0"
{{:name "ValidLevels", :record-type :var} {:record-type :any}, {:name "Levels", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Level", :record-type :var} {:record-type :atom}}
{}
"log4p remove_log_handler 1 0"
{}
{}
"log4p fatal 2 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Arguments", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:41.195: Step 0"
"2019-05-13T10:27:41.211: Step 1"
"chatscript license 3 0"
{}
{}
"chatscript set_chatscript_address 1 0"
{{:name "Address", :record-type :var} {:record-type :any}, {:name "_5352", :record-type :var} {:record-type :any}}
{}
"chatscript talk 4 0"
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"chatscript talk_ 4 0"
{{:name "Codes1", :record-type :var} {:record-type :any}, {:name "Read", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Codes3", :record-type :var} {:record-type :any}, {:name "Address", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Codes2", :record-type :var} {:record-type :any}, {:name "Codes4", :record-type :var} {:record-type :any}, {:name "StreamPair", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Write", :record-type :var} {:record-type :any}}
{}
"chatscript start_conversation 3 0"
{{:name "User", :record-type :var} {:record-type :any}, {:name "Bot", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:41.400: Step 0"
"2019-05-13T10:27:47.071: Step 1"
"lcs lcs 3 0"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_Length", :record-type :var} {:record-type :any}, {:name "LCS_Pairs", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"lcs fst 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{}
"lcs lcs 5 0"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "_4284", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "_4280", :record-type :var} {:record-type :any}, {:name "_4106", :record-type :var} {:record-type :any}, {:name "_4282", :record-type :var} {:record-type :any}, {:name "_4110", :record-type :var} {:record-type :any}, {:name "_4108", :record-type :var} {:record-type :any}}
{}
"lcs lcs_ 5 0"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
"lcs lcs_ 5 1"
{{:name "LCS", :record-type :var} {:record-type :any}, {:name "Length_AB0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LCS_A", :record-type :var} {:record-type :any}, {:name "Hash", :record-type :var} {:record-type :any}, {:name "LCS_B", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Length_B", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Length_A", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "LCS_AB", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Length_AB", :record-type :var} {:record-type :number}}
{}
"lcs lcs_ 5 3"
{{:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"lcs lcs_ 5 2"
{{:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"lcs equality_metric 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Similarity", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:53.384: Step 0"
"2019-05-13T10:27:53.406: Step 1"
"readability_parser build_agent 2 0"
{{:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}}
{}
"readability_parser agent_token 2 0"
{{:name "Token", :record-type :var} {:record-type :any}}
{}
"readability_parser parse 4 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any}), :record-type :compound}, {:name "Token", :record-type :var} {:record-type :any}, {:name "UrlOrID", :record-type :var} {:record-type :any}, {:name "Options0", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:functor "put", :arglist ({:name "Type", :record-type :var} {:name "UrlOrID", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Any, Any))", :record-type :error}, {:functor "put", :arglist ({:term "token", :record-type :atom} {:name "Token", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Atom, Any))", :record-type :error}}
"readability_parser identifier_type 2 0"
{{:name "UrlOrId", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"readability_parser ssl_verify 5 0"
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:53.566: Step 0"
"2019-05-13T10:27:53.633: Step 1"
"function_expansion expand_arglist 3 0"
{}
{}
"function_expansion expand_arglist 3 1"
{{:name "H0", :record-type :var} {:record-type :nonvar}, {:name "Guard", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"function_expansion expand_arglist 3 3"
{{:name "H0", :record-type :var} {:record-type :var}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"function_expansion expand_arglist 3 2"
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TailGuards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NestedGuards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Guards", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H0", :record-type :var} {:record-type :nonvar}, {:name "H", :record-type :var} {:record-type :nonvar}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"function_expansion xfy_list 3 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"function_expansion xfy_list 3 1"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"function_expansion control 1 0"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{}
"function_expansion control 1 1"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{}
"function_expansion control 1 4"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"function_expansion control 1 3"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{}
"function_expansion control 1 2"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "_404", :record-type :var} {:record-type :any}}
{}
"function_expansion goal_expansion 2 0"
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Preconditions", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :nonvar}, {:name "NewArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NoTrues", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :nonvar}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:27:53.838: Step 0"
"2019-05-13T10:28:45.672: Step 1"
"uuid bytes_integer 2 0"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"uuid unsigned64_signed64 2 0"
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"uuid unsigned64_signed64 2 1"
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"uuid unsigned64_signed64 2 2"
{{:name "Un", :record-type :var} {:record-type :any}}
{}
"uuid random_uuid 1 0"
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{}
"uuid uuid_atom 2 0"
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{}
"uuid uuid_atom 2 1"
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"uuid uuid 1 0"
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{}
"uuid uuid 2 0"
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{}
"uuid uuid 2 1"
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{}
"uuid uuid 2 2"
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:29:36.978: Step 0"
"2019-05-13T10:29:36.995: Step 1"
"sort_dict sort_dict 4 0"
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Direction", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{}
"sort_dict asc 4 0"
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sort_dict desc 4 0"
{{:name "Dict2", :record-type :var} {:record-type :any}, {:name "Value2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Dict1", :record-type :var} {:record-type :any}, {:name "Value1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sort_dict sort_dict 3 0"
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:29:37.148: Step 0"
"2019-05-13T10:29:41.503: Step 1"
"2019-05-13T10:29:46.264: Step 2"
"timedcg now 3 0"
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"timedcg wait 2 0"
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"timedcg wait 3 0"
{{:name "Pre", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T1", :record-type :var} {:record-type :number}}
{}
"timedcg sleep_till 1 0"
{{:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "DT", :record-type :var} {:record-type :number}}
{}
"timedcg --> 2 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 1"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 4"
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 6"
{{:name "T0", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 3"
{{:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 2"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"timedcg --> 2 5"
{{:name "O", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"timedcg run_cued 2 0"
{{:name "_550", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}}
{}
"timedcg run_cued 3 0"
{{:name "_580", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}, {:name "_578", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:29:51.142: Step 0"
"2019-05-13T10:30:42.104: Step 1"
"pluuid bytes_integer 2 0"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"pluuid unsigned64_signed64 2 0"
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"pluuid unsigned64_signed64 2 1"
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"pluuid unsigned64_signed64 2 2"
{{:name "Un", :record-type :var} {:record-type :any}}
{}
"pluuid random_uuid 1 0"
{{:name "Hi_", :record-type :var} {:record-type :number}, {:name "LoUn", :record-type :var} {:record-type :number}, {:name "Lo64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "HiBytes", :record-type :var} {:record-type :any}, {:name "Hi64", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LoBytes", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "HiUn", :record-type :var} {:record-type :number}, {:name "Hi", :record-type :var} {:record-type :any}}
{}
"pluuid uuid_atom 2 0"
{{:name "Node", :record-type :var} {:record-type :number}, {:name "Hi_", :record-type :var} {:record-type :integer}, {:name "CS", :record-type :var} {:record-type :any}, {:name "TH", :record-type :var} {:record-type :any}, {:name "TM", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :integer}, {:name "TimeHi", :record-type :var} {:record-type :number}, {:name "TL", :record-type :var} {:record-type :any}, {:name "TimeLow", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "TimeMid", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ClockSeq", :record-type :var} {:record-type :number}}
{}
"pluuid uuid_atom 2 1"
{{:name "Node", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Hi_", :record-type :var} {:record-type :number}, {:name "Nums", :record-type :var} {:arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :tuple}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "AtomParts", :record-type :var} {:record-type :any}, {:name "CharParts", :record-type :var} {:record-type :any}, {:name "Lo_", :record-type :var} {:record-type :number}, {:name "TimeHi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TimeLow", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Chars", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "A", :record-type :var} {:record-type :atom}, {:name "TimeMid", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lo", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:record-type :any}, {:name "ClockSeq", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"pluuid uuid 1 0"
{{:name "U", :record-type :var} {:functor "uuid", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "UUID", :record-type :var} {:record-type :any}}
{}
"pluuid uuid 2 0"
{{:name "_UUID", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}}
{}
"pluuid uuid 2 1"
{{:name "Lo", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SHi", :record-type :var} {:record-type :any}, {:name "Hi", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "UUID", :record-type :var} {:record-type :number}, {:name "SLo", :record-type :var} {:record-type :any}}
{}
"pluuid uuid 2 2"
{{:name "UUID", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:31:33.208: Step 0"
"2019-05-13T10:31:33.714: Step 1"
"2019-05-13T10:31:34.164: Step 2"
"css_write ensure_list 2 0"
{{:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write ensure_list 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"css_write butlast 2 0"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lss", :record-type :var} {:record-type :any}, {:name "ButL", :record-type :var} {:record-type :number}, {:name "L", :record-type :var} {:record-type :integer}}
{}
"css_write split 3 0"
{{:name "_4022", :record-type :var} {:record-type :any}}
{}
"css_write split 3 1"
{{:name "Div", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write split 3 2"
{{:name "First", :record-type :var} {:record-type :any}, {:name "Div", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 0"
{{:name "Content", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 7"
{{:name "Style", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 1"
{}
{}
"css_write --> 2 4"
{{:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "StyleOrStyles", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 15"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 13"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Prop", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 6"
{}
{}
"css_write --> 2 3"
{{:name "Reference", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 12"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 2"
{{:name "Things", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Thing", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 11"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "DerivedSels", :record-type :var} {:record-type :any}, {:name "DerivedSel", :record-type :var} {:record-type :any}, {:name "SelCodes", :record-type :var} {:record-type :any}, {:name "CombinedCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 9"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 5"
{{:name "Children_", :record-type :var} {:record-type :any}, {:name "ThingStyles", :record-type :var} {:record-type :any}, {:name "Sel", :record-type :var} {:record-type :any}, {:name "SelStr", :record-type :var} {:record-type :any}, {:name "Thing", :record-type :var} {:record-type :any}, {:name "SelStrCodes", :record-type :var} {:record-type :any}, {:name "Styles", :record-type :var} {:record-type :any}, {:name "Children", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 14"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "NewCtx", :record-type :var} {:record-type :any}, {:name "AddCtx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write --> 2 10"
{{:name "Ctx", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"css_write --> 2 8"
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "ValueCodes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "AttrCodes", :record-type :var} {:record-type :any}, {:name "Style", :record-type :var} {:record-type :any}}
{}
"css_write write_css 2 0"
{{:name "Css", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Elements", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"css_write collapse_ampersands 2 0"
{{:name "Sels", :record-type :var} {:record-type :any}, {:name "CollapsedSels", :record-type :var} {:record-type :any}}
{}
"css_write add_selector 3 0"
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CtxHead", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Parent", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"css_write add_selector 3 1"
{{:name "Ctx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCtx", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubSel", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:31:34.776: Step 0"
"2019-05-13T10:31:34.913: Step 1"
"latex wr 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"switex write_phrase 1 0"
{{:name "Phrase", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"switex switex_main 0 0"
{{:name "_4012", :record-type :var} {:record-type :any}}
{}
"switex pre_query 1 0"
{}
{}
"switex pre_query 1 1"
{{:name "C2", :record-type :var} {:record-type :integer}}
{}
"switex pre_query 1 2"
{{:name "C1", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"switex log 2 0"
{{:name "Msg", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"switex switex 0 0"
{{:name "_4384", :record-type :var} {:record-type :any}, {:name "TTY", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}}
{}
"switex exit 1 0"
{{:name "Sig", :record-type :var} {:record-type :any}}
{}
"switex query 0 0"
{{:name "Ex", :record-type :var} {:record-type :nonvar}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"switex handle 1 0"
{{:name "Ex", :record-type :var} {:record-type :any}}
{}
"switex tex_output1 2 0"
{{:name "Head", :record-type :var} {:record-type :any}}
{}
"switex tex_output1 2 1"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"switex first_char 1 0"
{}
{}
"switex first_char 1 1"
{{:name "C1", :record-type :var} {:record-type :integer}}
{}
"switex first_char 1 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"switex first_char 1 2"
{{:name "C", :record-type :var} {:record-type :integer}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"latex --> 2 0"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"latex --> 2 7"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"latex --> 2 1"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"latex --> 2 4"
{}
{}
"latex --> 2 6"
{}
{}
"latex --> 2 3"
{}
{}
"latex --> 2 12"
{{:name "A1", :record-type :var} {:record-type :any}, {:name "AS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P", :record-type :var} {:record-type :any}}
{}
"latex --> 2 2"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Pattern", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{}
"latex --> 2 11"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"latex --> 2 9"
{{:name "A1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"latex --> 2 5"
{}
{}
"latex --> 2 10"
{{:name "A1", :record-type :var} {:record-type :any}, {:name "A2", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"latex --> 2 8"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"switex tex_output 1 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"switex start 0 0"
{{:name "C", :record-type :var} {:record-type :integer}}
{}
"switex pre_query2 1 0"
{}
{}
"switex pre_query2 1 1"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"switex pre_query2 1 2"
{{:name "C2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"switex tex_prompt 2 0"
{{:name "Prefix", :record-type :var} {:record-type :any}}
{}
"switex tex_prompt 2 1"
{{:name "Prefix", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"switex is_prompt 1 0"
{}
{}
"switex is_prompt 1 1"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:31:35.203: Step 0"
"2019-05-13T10:31:43.004: Step 1"
"2019-05-13T10:31:51.837: Step 2"
"2019-05-13T10:32:00.803: Step 3"
"resp resp_writef_array 2 0"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 2 0"
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one_array 2 0"
{}
{}
"resp resp_write_one_array 2 1"
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp resp_parse_array 3 0"
{{:name "_428", :record-type :var} {:record-type :any}}
{}
"resp resp_parse_array 3 1"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"resp resp_parse_array 3 2"
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp get_chars 3 0"
{{:name "_3998", :record-type :var} {:record-type :any}}
{}
"resp get_chars 3 1"
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp unicode_byte_length_list 2 0"
{}
{}
"resp unicode_byte_length_list 2 1"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{}
"resp resp_write 3 0"
{{:name "_3998", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 1"
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 4"
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 3"
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 2"
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp unicode_byte_length 2 0"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"resp resp_parse 4 0"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 1"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 4"
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp resp_parse 4 3"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp resp_parse 4 2"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 5"
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 0"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 1"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 4"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 3"
{{:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 2"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 5"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"resp unicode_size 2 0"
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
"resp unicode_size 2 1"
{}
{}
"resp unicode_size 2 4"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 3"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 2"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 5"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp resp_write 2 0"
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:32:09.889: Step 0"
"2019-05-13T10:32:17.640: Step 1"
"2019-05-13T10:32:26.573: Step 2"
"2019-05-13T10:32:35.355: Step 3"
"resp resp_writef_array 2 0"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 2 0"
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one_array 2 0"
{}
{}
"resp resp_write_one_array 2 1"
{{:name "FirstResult", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "MF", :record-type :var} {:record-type :any}, {:name "ResultString", :record-type :var} {:record-type :any}, {:name "ResultRest", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp resp_parse_array 3 0"
{{:name "_428", :record-type :var} {:record-type :any}}
{}
"resp resp_parse_array 3 1"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"resp resp_parse_array 3 2"
{{:name "TypeCode", :record-type :var} {:record-type :integer}, {:name "Arguments", :record-type :var} {:record-type :atom}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Count1", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ArgumentCodes", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :atom}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp get_chars 3 0"
{{:name "_3998", :record-type :var} {:record-type :any}}
{}
"resp get_chars 3 1"
{{:name "First", :record-type :var} {:record-type :atom}, {:name "SS", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "C", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp unicode_byte_length_list 2 0"
{}
{}
"resp unicode_byte_length_list 2 1"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :atom} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:record-type :number}, {:name "Length", :record-type :var} {:record-type :number}}
{}
"resp resp_write 3 0"
{{:name "_3998", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 1"
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 4"
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 3"
{{:name "IsFirst", :record-type :var} {:record-type :any}, {:name "First", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Length", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write 3 2"
{{:name "_4024", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp unicode_byte_length 2 0"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"resp resp_parse 4 0"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 1"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "ArgumentInteger", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 4"
{{:name "_652", :record-type :var} {:record-type :integer}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "ResultChars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_700", :record-type :var} {:record-type :integer}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"resp resp_parse 4 3"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp resp_parse 4 2"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "Argument", :record-type :var} {:record-type :any}}
{}
"resp resp_parse 4 5"
{{:name "Argument", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 0"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 1"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 4"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :number}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 3"
{{:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 2"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"resp resp_write_one 2 5"
{{:name "Stream", :record-type :var} {:record-type :any}, {:name "Array", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"resp unicode_size 2 0"
{{:name "Char", :record-type :var} {:record-type :atom}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :integer}}
{}
"resp unicode_size 2 1"
{}
{}
"resp unicode_size 2 4"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 3"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 2"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp unicode_size 2 5"
{{:name "Code", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resp resp_write 2 0"
{{:name "Array", :record-type :var} {:arglist #{{:functor "integer", :arglist ({:record-type :any}), :record-type :compound} {:functor "string", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "error", :arglist ({:record-type :any}), :record-type :compound} {:functor "bulk", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:32:44.417: Step 0"
"2019-05-13T10:32:57.492: Step 1"
"2019-05-13T10:33:13.592: Step 2"
"resource_bounds resource_bounded_call 4 0"
{{:name "StatusVar", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vars", :record-type :var} {:type {:record-type :var}, :record-type :list}, {:name "Status", :record-type :var} {:record-type :any}, {:name "ThreadOpts", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Id", :record-type :var} {:record-type :any}, {:name "QueueOpts", :record-type :var} {:arglist #{{:record-type :empty-list} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}}
{}
"resource_bounds run 4 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Main", :record-type :var} {:record-type :any}, {:name "Me", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{}
"resource_bounds queue_options 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Deadline", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Time", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:arglist ({:functor "deadline", :arglist ({:record-type :number}), :record-type :compound}), :record-type :tuple}}
{}
"resource_bounds queue_options 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"resource_bounds thread_options 2 0"
{}
{}
"resource_bounds thread_options 2 1"
{{:name "H0", :record-type :var} {:arglist #{{:functor "local", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "global", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "H", :record-type :var} {:arglist #{{:functor "local", :arglist ({:record-type :number}), :record-type :compound} {:functor "global", :arglist ({:record-type :number}), :record-type :compound}}, :record-type :one-of}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"resource_bounds thread_options 2 2"
{{:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"resource_bounds thread_option 2 0"
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{}
"resource_bounds thread_option 2 1"
{{:name "Cells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}}
{}
"resource_bounds cells_kb 2 0"
{{:name "Bits", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "KB", :record-type :var} {:record-type :number}, {:name "KCells", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"resource_bounds monitor_thread 7 0"
{{:name "MaxTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Self", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:record-type :number}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "UsedTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "QueueOpts", :record-type :var} {:record-type :any}}
{}
"resource_bounds map_status 2 0"
{{:name "Stack", :record-type :var} {:record-type :any}}
{}
"resource_bounds map_status 2 1"
{{:name "Status", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:29.731: Step 0"
"2019-05-13T10:33:30.603: Step 1"
"number_to_word term_expansion 2 0"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Prev", :record-type :var} {:record-type :nonvar}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Word0", :record-type :var} {:record-type :any}, {:name "Gen", :record-type :var} {:record-type :nonvar}, {:name "W2", :record-type :var} {:record-type :any}, {:name "GenRule", :record-type :var} {:functor ":-", :arglist ({:functor "gen", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :nonvar}), :record-type :compound}, {:name "A", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Rule", :record-type :var} {:functor "-->", :arglist ({:record-type :nonvar} {:functor ",", :arglist ({:functor "x", :arglist ({:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "call", :arglist ({:record-type :nonvar}), :record-type :compound} {:functor "{}", :arglist ({:functor ";", :arglist ({:functor "->", :arglist ({:functor "\\==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor ",", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor ";", :arglist ({:functor "->", :arglist ({:functor "==", :arglist ({:record-type :any} {:arglist ({:record-type :atom}), :record-type :tuple}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :empty-list}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "N", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}, {:name "Name0", :record-type :var} {:record-type :atom}, {:name "N0", :record-type :var} {:record-type :atom}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}}
{}
"number_to_word number_word 2 0"
{{:name "Num", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 0"
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 7"
{}
{}
"number_to_word --> 2 20"
{}
{}
"number_to_word --> 2 27"
{}
{}
"number_to_word --> 2 1"
{{:name "Ws", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 24"
{}
{}
"number_to_word --> 2 4"
{{:name "Word", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 15"
{}
{}
"number_to_word --> 2 21"
{}
{}
"number_to_word --> 2 31"
{}
{}
"number_to_word --> 2 32"
{}
{}
"number_to_word --> 2 33"
{}
{}
"number_to_word --> 2 13"
{}
{}
"number_to_word --> 2 22"
{}
{}
"number_to_word --> 2 29"
{}
{}
"number_to_word --> 2 6"
{{:name "W3", :record-type :var} {:record-type :any}, {:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 28"
{}
{}
"number_to_word --> 2 25"
{}
{}
"number_to_word --> 2 34"
{}
{}
"number_to_word --> 2 17"
{}
{}
"number_to_word --> 2 3"
{{:name "Word", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 12"
{}
{}
"number_to_word --> 2 2"
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 23"
{}
{}
"number_to_word --> 2 19"
{}
{}
"number_to_word --> 2 11"
{}
{}
"number_to_word --> 2 9"
{}
{}
"number_to_word --> 2 5"
{{:name "W1", :record-type :var} {:record-type :any}, {:name "W2", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
"number_to_word --> 2 14"
{}
{}
"number_to_word --> 2 26"
{}
{}
"number_to_word --> 2 16"
{}
{}
"number_to_word --> 2 30"
{}
{}
"number_to_word --> 2 10"
{}
{}
"number_to_word --> 2 18"
{}
{}
"number_to_word --> 2 8"
{}
{}
"number_to_word beyond 2 0"
{}
{}
"number_to_word beyond 2 7"
{}
{}
"number_to_word beyond 2 1"
{}
{}
"number_to_word beyond 2 4"
{}
{}
"number_to_word beyond 2 15"
{}
{}
"number_to_word beyond 2 13"
{}
{}
"number_to_word beyond 2 6"
{}
{}
"number_to_word beyond 2 17"
{}
{}
"number_to_word beyond 2 3"
{}
{}
"number_to_word beyond 2 12"
{}
{}
"number_to_word beyond 2 2"
{}
{}
"number_to_word beyond 2 19"
{}
{}
"number_to_word beyond 2 11"
{}
{}
"number_to_word beyond 2 9"
{}
{}
"number_to_word beyond 2 5"
{}
{}
"number_to_word beyond 2 14"
{}
{}
"number_to_word beyond 2 16"
{}
{}
"number_to_word beyond 2 10"
{}
{}
"number_to_word beyond 2 18"
{}
{}
"number_to_word beyond 2 8"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:31.576: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:31.875: Step 0"
"2019-05-13T10:33:33.195: Step 1"
"notes800 accum 4 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"notes800 accum 4 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"notes800 accum 4 2"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{}
"notes800 rb_increment 3 0"
{{:name "T0", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 0"
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 1"
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 4"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 6"
{{:name "Raw", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Transformed", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 3"
{}
{}
"notes800 --> 2 2"
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "PhoneCodes", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{}
"notes800 --> 2 5"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"notes800 fold_solutions 4 0"
{{:name "Ref", :record-type :var} {:functor "ref", :arglist ({:record-type :any}), :record-type :compound}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Accum0", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}}
{}
"notes800 url 3 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{}
"notes800 url 2 0"
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Url", :record-type :var} {:record-type :any}}
{}
"notes800 pager_specific 3 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:record-type :any}}
{}
"notes800 page 2 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "U", :record-type :var} {:record-type :any}, {:name "MaxPageN", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "FirstPage", :record-type :var} {:record-type :any}}
{}
"notes800 page_ 3 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "PageN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Page", :record-type :var} {:record-type :any}}
{}
"notes800 attribute 3 0"
{{:name "Phone", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "Page", :record-type :var} {:record-type :any}}
{}
"notes800 caller_id 3 0"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "A0", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "EmptyTypes", :record-type :var} {:record-type :any}, {:name "EmptyCallers", :record-type :var} {:record-type :any}, {:name "Callers", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "x", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Phone", :record-type :var} {:record-type :any}, {:name "Caller", :record-type :var} {:record-type :any}}
{}
"notes800 caller_id 3 1"
{{:name "_414", :record-type :var} {:record-type :any}}
{}
"notes800 transform_type 2 0"
{}
{}
"notes800 transform_type 2 1"
{{:name "U", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"notes800 transform_type 2 2"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"notes800 rb_popular 2 0"
{{:name "LeastToGreatest", :record-type :var} {:record-type :any}, {:name "_566", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_598", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:34.631: Step 0"
"2019-05-13T10:33:34.661: Step 1"
"hilog unset_functor_wrap 0 0"
{{:name "_412", :record-type :var} {:record-type :any}}
{}
"hilog term_expansion 2 0"
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{}
"hilog expand_var_functors 5 0"
{{:name "In", :record-type :var} {:record-type :any}, {:name "VFE", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Outer", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"hilog var_functor_quote 1 0"
{}
{}
"hilog var_functor_quote 1 1"
{}
{}
"hilog var_functor_quote 1 4"
{}
{}
"hilog var_functor_quote 1 3"
{{:name "C", :record-type :var} {:record-type :integer}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"hilog var_functor_quote 1 2"
{}
{}
"hilog goal_expansion 2 0"
{{:name "O", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "_568", :record-type :var} {:record-type :integer}, {:name "VFE", :record-type :var} {:record-type :atomic}, {:name "T", :record-type :var} {:record-type :any}}
{}
"hilog compound_or_atom_name_arguments 3 0"
{{:name "In", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Name", :record-type :var} {:record-type :any}, {:name "ArgsO", :record-type :var} {:record-type :any}}
{}
"hilog compound_or_atom_name_arguments 3 1"
{{:name "Name", :record-type :var} {:record-type :atom}, {:name "In", :record-type :var} {:record-type :atom}, {:name "ArgsO", :record-type :var} {:record-type :empty-list}}
{}
"hilog set_functor_wrap 1 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"hilog restore_allow_variable_name_as_functor 0 0"
{{:name "Was", :record-type :var} {:record-type :any}}
{}
"hilog save_allow_variable_name_as_functor 0 0"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:34.857: Step 0"
"2019-05-13T10:33:34.906: Step 1"
"nanp valid 1 0"
{{:name "_4262", :record-type :var} {:record-type :any}, {:name "_4100", :record-type :var} {:record-type :any}, {:name "_4266", :record-type :var} {:record-type :any}, {:name "_4096", :record-type :var} {:record-type :any}, {:name "_4172", :record-type :var} {:record-type :any}, {:name "_4264", :record-type :var} {:record-type :any}, {:name "Office", :record-type :var} {:record-type :any}, {:name "_4176", :record-type :var} {:record-type :any}, {:name "_4260", :record-type :var} {:record-type :any}, {:name "Area", :record-type :var} {:record-type :any}, {:name "_4174", :record-type :var} {:record-type :any}, {:name "Subscriber", :record-type :var} {:record-type :any}, {:name "_4098", :record-type :var} {:record-type :any}}
{}
"nanp erc 1 0"
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{}
"nanp n11 1 0"
{{:name "NXX", :record-type :var} {:record-type :any}, {:name "_4046", :record-type :var} {:record-type :any}}
{}
"nanp invalid 1 0"
{{:name "Number", :record-type :var} {:record-type :any}}
{}
"nanp format 3 0"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Number", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 0"
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 7"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 1"
{{:name "Number", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 4"
{{:name "Number", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 6"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 3"
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 2"
{{:name "O", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 5"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"nanp --> 2 8"
{{:name "C", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"nanp digit_char 2 0"
{}
{}
"nanp digit_char 2 7"
{}
{}
"nanp digit_char 2 1"
{}
{}
"nanp digit_char 2 4"
{}
{}
"nanp digit_char 2 6"
{}
{}
"nanp digit_char 2 3"
{}
{}
"nanp digit_char 2 2"
{}
{}
"nanp digit_char 2 9"
{}
{}
"nanp digit_char 2 5"
{}
{}
"nanp digit_char 2 8"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:35.228: Step 0"
"2019-05-13T10:33:35.516: Step 1"
"unified_diff try 2 0"
{{:name "Intro", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 0"
{{:name "Files", :record-type :var} {:record-type :any}, {:name "Intro", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 7"
{{:name "Heading", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 1"
{{:name "Intro", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 4"
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 15"
{{:name "I", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 13"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 6"
{}
{}
"unified_diff --> 2 3"
{}
{}
"unified_diff --> 2 12"
{{:name "Content", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 2"
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}, {:name "OldCodes", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NewCodes", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 11"
{{:name "Content", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 9"
{}
{}
"unified_diff --> 2 5"
{{:name "Deltas", :record-type :var} {:record-type :any}, {:name "OL", :record-type :var} {:record-type :any}, {:name "Heading", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "NL", :record-type :var} {:record-type :any}, {:name "Hunks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 14"
{{:name "S", :record-type :var} {:record-type :any}, {:name "Stop", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 10"
{{:name "Content", :record-type :var} {:record-type :any}}
{}
"unified_diff --> 2 8"
{{:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Delta", :record-type :var} {:record-type :any}}
{}
"unified_diff end 2 0"
{}
{}
"unified_diff unified_diff_ranges 3 0"
{}
{}
"unified_diff unified_diff_ranges 3 1"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"unified_diff unified_diff_ranges 3 3"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "OS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"unified_diff unified_diff_ranges 3 2"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Deltas", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS0", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:36.092: Step 0"
"2019-05-13T10:33:36.818: Step 1"
"graphviz_term dotty_term 1 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_4816", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"graphviz_term run_dotty 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_650", :record-type :var} {:record-type :any}, {:name "Program", :record-type :var} {:record-type :any}, {:name "PID", :record-type :var} {:record-type :any}}
{}
"graphviz_term kill_dotties 0 0"
{{:name "PID", :record-type :var} {:record-type :any}}
{}
"graphviz_term term_to_dot 1 0"
{{:name "Term", :record-type :var} {:record-type :any}}
{}
"graphviz_term term_to_dot 2 0"
{{:name "Skel", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Subst", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"graphviz_term label_factors 1 0"
{}
{}
"graphviz_term label_factors 1 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:functor "$VAR", :arglist ({:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphviz_term label_factors 1 2"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphviz_term --> 2 0"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 7"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 20"
{}
{}
"graphviz_term --> 2 27"
{}
{}
"graphviz_term --> 2 1"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Prim", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 24"
{}
{}
"graphviz_term --> 2 4"
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 15"
{{:name "Links", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 21"
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphviz_term --> 2 13"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 22"
{}
{}
"graphviz_term --> 2 6"
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 28"
{}
{}
"graphviz_term --> 2 25"
{}
{}
"graphviz_term --> 2 17"
{{:name "H", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Links", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphviz_term --> 2 3"
{{:name "Done", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 12"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 2"
{{:name "_446", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 23"
{}
{}
"graphviz_term --> 2 19"
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphviz_term --> 2 11"
{{:name "LT0", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 9"
{{:name "_550", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 5"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinksT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 14"
{{:name "RestLinks", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 26"
{}
{}
"graphviz_term --> 2 16"
{{:name "Id2", :record-type :var} {:record-type :any}, {:name "LinkT1", :record-type :var} {:record-type :any}, {:name "Compound", :record-type :var} {:record-type :any}, {:name "LinksT0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 10"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}}
{}
"graphviz_term --> 2 18"
{}
{}
"graphviz_term --> 2 8"
{{:name "Compound", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "FCodes", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Links", :record-type :var} {:record-type :any}, {:name "LinkT", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"graphviz_term primitive 1 0"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"graphviz_term primitive 1 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:37.674: Step 0"
"2019-05-13T10:33:37.679: Step 1"
"mail_merge mail_merge 3 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Addresses", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{}
"mail_merge send_mail 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "To", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"mail_merge send_message 3 0"
{{:name "Message", :record-type :var} {:record-type :any}, {:name "Fields", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:37.859: Step 0"
"2019-05-13T10:33:38.016: Step 1"
"2019-05-13T10:33:38.202: Step 2"
"coworkers wf_input_parameter 3 0"
{{:name "ParameterValue", :record-type :var} {:record-type :var}, {:name "Functor", :record-type :var} {:record-type :nonvar}, {:name "UProps", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atomic}, {:name "PropsDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}, {:name "KnownProps", :record-type :var} {:record-type :any}}
{}
"coworkers task 2 0"
{{:name "ParentRepoVersions", :record-type :var} {:arglist ({:functor "repo_a_ve", :arglist ({:record-type :string}), :record-type :compound} {:functor "repo_b_ve", :arglist ({:record-type :string}), :record-type :compound} {:functor "repo_c_ve", :arglist ({:record-type :string}), :record-type :compound}), :record-type :tuple}, {:name "Repo", :record-type :var} {:record-type :any}, {:name "Branch", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"coworkers task 2 1"
{{:name "ParentRepoVersions", :record-type :var} {:record-type :any}, {:name "RepoCVersion", :record-type :var} {:record-type :any}, {:name "RepoBVersion", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}, {:name "RepoAVersion", :record-type :var} {:record-type :any}}
{}
"coworkers activities 2 0"
{{:name "L2", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "L3", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}}
{}
"coworkers activities 2 1"
{{:name "L2", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:record-type :any}, {:name "L3", :record-type :var} {:record-type :any}, {:name "L1", :record-type :var} {:record-type :any}, {:name "Children", :record-type :var} {:record-type :any}}
{}
"coworkers activities 2 3"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"coworkers activities 2 2"
{{:name "_524", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:functor "task", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_526", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"coworkers dialog 4 0"
{{:name "PropsDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}, {:name "PropsDl2", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "NewDl", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Param", :record-type :var} {:record-type :nonvar}}
{}
"coworkers workflow 2 0"
{{:name "ParentRepoVersions", :record-type :var} {:record-type :any}, {:name "Props", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"coworkers wf_ask_parameter 1 0"
{{:name "P", :record-type :var} {:record-type :any}}
{}
"coworkers append_dl 3 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"coworkers init_dl_from_list 2 0"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"coworkers init_dl_from_list 2 1"
{{:name "Dlist", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "HDlist", :record-type :var} {:functor "-", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "TDlist", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "H", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"coworkers do_tasks_seq 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{}
"coworkers do_tasks_seq 4 1"
{{:name "RestActs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Act1", :record-type :var} {:record-type :any}, {:name "Act", :record-type :var} {:record-type :any}, {:name "Coordinator", :record-type :var} {:record-type :any}, {:name "PropsDl", :record-type :var} {:record-type :any}, {:name "PropsDl2", :record-type :var} {:record-type :any}, {:name "Term1", :record-type :var} {:record-type :any}, {:name "WorkflowModule", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"coworkers wf 3 0"
{{:name "PropsDList", :record-type :var} {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Queue", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_562", :record-type :var} {:record-type :any}, {:name "Coordinator", :record-type :var} {:record-type :any}, {:name "Props", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tree", :record-type :var} {:functor "node", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "WorkflowModule", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:33:38.571: Step 0"
"2019-05-13T10:33:43.576: Step 1"
"2019-05-13T10:33:49.808: Step 2"
"2019-05-13T10:33:56.219: Step 3"
"clitable get_col_width 2 0"
{{:name "Cells", :record-type :var} {:record-type :any}, {:name "MaxWidth", :record-type :var} {:record-type :any}, {:name "CellWidths", :record-type :var} {:record-type :any}}
{}
"clitable clitable 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Row", :record-type :var} {:record-type :any}, {:name "Rows", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable default_options 1 0"
{{:name "Default_Options", :record-type :var} {:arglist ({:functor "top", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_right", :arglist ({:record-type :atom}), :record-type :compound}), :record-type :tuple}}
{}
"clitable clitable 1 0"
{{:name "Rows", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable print_cell 3 0"
{{:name "ColWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Middle", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Space", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Cell", :record-type :var} {:record-type :any}, {:name "Center", :record-type :var} {:record-type :atom}, {:name "Entry", :record-type :var} {:record-type :any}, {:name "Width", :record-type :var} {:record-type :number}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"clitable add_headers_to_cols 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Cols", :record-type :var} {:record-type :any}, {:name "Cols_With_Headers", :record-type :var} {:record-type :any}}
{}
"clitable apply_length 3 0"
{{:name "Space", :record-type :var} {:record-type :atom}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Space_With_Length", :record-type :var} {:record-type :any}}
{}
"clitable apply_length 3 1"
{{:name "Space", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}, {:name "Space_With_Length", :record-type :var} {:record-type :any}}
{}
"clitable print_footer 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable get_cell_width 2 0"
{{:name "Cell", :record-type :var} {:record-type :atom}, {:name "Width", :record-type :var} {:record-type :integer}}
{}
"clitable option_char 3 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "KV", :record-type :var} {:record-type :nonvar}}
{}
"clitable transpose_ 4 0"
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "Lists", :record-type :var} {:record-type :any}, {:name "Lists0", :record-type :var} {:record-type :any}}
{}
"clitable clitable 2 0"
{{:name "Default_Options", :record-type :var} {:arglist ({:functor "top", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "top_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "bottom_right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "right", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_space", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_left", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_mid", :arglist ({:record-type :atom}), :record-type :compound} {:functor "mid_right", :arglist ({:record-type :atom}), :record-type :compound}), :record-type :tuple}, {:name "Options_", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Cols_", :record-type :var} {:record-type :any}, {:name "Cols", :record-type :var} {:record-type :any}, {:name "Rows", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable print_row 3 0"
{{:name "First", :record-type :var} {:record-type :any}, {:name "Cells", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "FirstWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable list_first_rest 3 0"
{{:name "L", :record-type :var} {:record-type :any}, {:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable print_first_cell 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Char", :record-type :var} {:record-type :any}, {:name "ColWidth", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Cell", :record-type :var} {:record-type :any}, {:name "Options_For_First", :record-type :var} {:record-type :any}}
{}
"clitable print_char_row 3 0"
{{:name "CellMocks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Char_Row_Options", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Space_", :record-type :var} {:record-type :any}, {:name "Identifiers", :record-type :var} {:record-type :any}, {:name "Space", :record-type :var} {:record-type :any}, {:name "OriginalSpace", :record-type :var} {:record-type :atom}, {:name "OriginalSpace_Length", :record-type :var} {:record-type :integer}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable add_header_to_col 3 0"
{{:name "Col", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Header", :record-type :var} {:record-type :any}}
{}
"clitable print_header 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "ColWidths", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"clitable transpose 2 0"
{}
{}
"clitable transpose 2 1"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_612", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}}
{}
"clitable mock_cell 3 0"
{{:name "_Char", :record-type :var} {:record-type :any}}
{}
"clitable mock_cell 3 1"
{{:name "Char", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "N_", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A_", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:02.955: Step 0"
"2019-05-13T10:34:02.977: Step 1"
"chan has_type 2 0"
{{:name "Chan", :record-type :var} {:record-type :any}}
{}
"chan has_type 2 1"
{{:name "Status", :record-type :var} {:record-type :ground}, {:name "Q", :record-type :var} {:record-type :ground}}
{}
"chan has_type 2 2"
{{:name "Q", :record-type :var} {:record-type :ground}}
{}
"chan recv 1 0"
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_414", :record-type :var} {:record-type :any}}
{}
"chan new 2 0"
{{:name "Q", :record-type :var} {:record-type :any}}
{}
"chan recv 2 0"
{{:name "MaybeTerm", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:record-type :nonvar}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"chan is_message_queue 1 0"
{{:name "_498", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :nonvar}, {:name "Q", :record-type :var} {:record-type :ground}}
{}
"chan send 1 0"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"chan recvd 2 0"
{{:name "Rx", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"chan recvd 2 1"
{{:name "Rx", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"chan send 2 0"
{{:name "Q", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"chan close 1 0"
{{:name "Status", :record-type :var} {:record-type :any}, {:name "Tx", :record-type :var} {:functor "tx_chan", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"chan close 1 1"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:03.085: Step 0"
"No predicates found"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:04.012: Step 0"
"2019-05-13T10:34:04.356: Step 1"
"graphql --> 2 0"
{{:name "_QQDict", :record-type :var} {:record-type :any}}
{}
"graphql --> 2 1"
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphql --> 2 4"
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Sep", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"graphql --> 2 6"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}}
{}
"graphql --> 2 3"
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"graphql --> 2 2"
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphql --> 2 5"
{{:name "_762", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "_688", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "Sep", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"graphql graphql 4 0"
{{:name "QQDict", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Content", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}}
{}
"graphql qq_var 2 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Var", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:04.841: Step 0"
"2019-05-13T10:34:04.906: Step 1"
"typedef type 1 0"
{{:name "_506", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"typedef expand_type_declaration 2 0"
{{:name "C1", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "user_type_syn", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Syn", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "C2", :record-type :var} {:functor ":-", :arglist ({:functor ":", :arglist ({:record-type :atom} {:functor "has_type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:functor "has_type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef expand_type_declaration 2 1"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Defs", :record-type :var} {:record-type :any}, {:name "Clauses", :record-type :var} {:record-type :any}}
{}
"typedef has_type 2 0"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"typedef has_type 2 1"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "Cons", :record-type :var} {:record-type :any}}
{}
"typedef check_not_defined 1 0"
{{:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef current_type 1 0"
{{:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef --> 2 0"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Defs", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef --> 2 1"
{{:name "C1", :record-type :var} {:record-type :any}, {:name "CX", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef --> 2 4"
{{:name "_448", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef --> 2 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"typedef --> 2 2"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "CZ", :record-type :var} {:record-type :any}}
{}
"typedef term_expansion 2 0"
{{:name "Decl", :record-type :var} {:record-type :any}, {:name "Clauses", :record-type :var} {:record-type :any}}
{}
"typedef wants_typedef 0 0"
{{:name "_4118", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"typedef current_type_constructor 2 0"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:06.558: Step 0"
"2019-05-13T10:34:08.657: Step 1"
"2019-05-13T10:34:10.753: Step 2"
"2019-05-13T10:34:12.877: Step 3"
"2019-05-13T10:34:15.008: Step 4"
"rdet rdet 1 0"
{{:name "PredicateIndicator", :record-type :var} {:record-type :any}}
{}
"rdet goal_expansion 2 0"
{{:name "In", :record-type :var} {:record-type :nonvar}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}}
{}
"wrap_lambda fails 2 0"
{{:name "_4426", :record-type :var} {:record-type :any}, {:name "_4428", :record-type :var} {:record-type :any}}
{}
"rdet --> 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"rdet --> 2 1"
{{:name "PredicateIndicator", :record-type :var} {:record-type :any}}
{}
"rdet handle_goal 2 0"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"rdet handle_goal 2 1"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "FromModule", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :integer}}
{}
"rdet handle_goal 2 2"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :integer}}
{}
"wrap_dcg wrap_dcg 0 0"
{}
{}
"wrap_module module_transitive 0 0"
{}
{}
"wrap_module module_explicit 0 0"
{}
{}
"wrap_module det 0 0"
{}
{}
"rdet rewrite_goal 5 0"
{{:name "Functor", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "At", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Pos", :record-type :var} {:record-type :any}}
{}
"wrap_module module_implicit 0 0"
{}
{}
"wrap_rdf wrap_rdf 0 0"
{}
{}
"wrap_dict := 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :number}}
{{:functor "fun", :arglist ({:name "F", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(fun(Any))", :record-type :error}, {:term "y", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:head {:functor "+", :arglist ({:functor "*", :arglist ({:head {:name "M", :record-type :var}, :tail {:term "x", :record-type :atom}, :record-type :list} {:name "F", :record-type :var}), :record-type :compound} {:functor "*", :arglist ({:head {:name "M", :record-type :var}, :tail {:term "y", :record-type :atom}, :record-type :list} {:name "F", :record-type :var}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "+", :arglist ({:functor "*", :arglist ({:head {:name "M", :record-type :var}, :tail {:term "x", :record-type :atom}, :record-type :list} {:name "F", :record-type :var}), :record-type :compound} {:functor "*", :arglist ({:head {:name "M", :record-type :var}, :tail {:term "y", :record-type :atom}, :record-type :list} {:name "F", :record-type :var}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:term "x", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"wrap_rdf rdf_test 1 0"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"wrap_dcg --> 2 0"
{}
{}
"wrap_dcg --> 2 1"
{}
{}
"rdet goal_marker 2 0"
{{:name "Marker", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :any} {:record-type :integer}), :record-type :compound}), :record-type :compound}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Byte", :record-type :var} {:record-type :any}, {:name "Aux", :record-type :var} {:record-type :any}, {:name "Pos", :record-type :var} {:record-type :any}}
{}
"rdet is_annotated 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"rdet is_annotated 3 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Module", :record-type :var} {:record-type :any}, {:name "DcgArity", :record-type :var} {:record-type :number}}
{}
"module_trans module_trans 0 0"
{}
{}
"rdet try_rewrite 5 0"
{{:name "Marker", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :any} {:record-type :integer}), :record-type :compound}), :record-type :compound}, {:name "_630", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ContextModule", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:functor ";", :arglist ({:functor "->", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:functor "throw", :arglist ({:functor "error", :arglist ({:functor "goal_failed", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Aux", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:17.295: Step 0"
"2019-05-13T10:34:17.415: Step 1"
"interpolate --> 2 0"
{{:name "Formats", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Static", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VarName", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{}
"interpolate --> 2 1"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}}
{}
"interpolate --> 2 2"
{{:name "VarName", :record-type :var} {:record-type :any}}
{}
"interpolate wants_interpolation 0 0"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"interpolate textual 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"interpolate textual 3 1"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}}
{}
"interpolate textual 3 3"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"interpolate textual 3 2"
{{:name "Text", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_502", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"interpolate build_text 3 0"
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Output", :record-type :var} {:record-type :any}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"interpolate instantiate_formats 3 0"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"interpolate instantiate_formats 3 1"
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Static", :record-type :var} {:record-type :atom}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"interpolate instantiate_formats 3 3"
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_464", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_400", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_452", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"interpolate instantiate_formats 3 2"
{{:name "Formats", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Formats0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :atom}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :var}}
{}
"interpolate preferred_tilde 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"interpolate preferred_tilde 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"interpolate function_expansion 3 0"
{{:name "TextCodes", :record-type :var} {:record-type :any}, {:name "Formats", :record-type :var} {:record-type :any}, {:name "Replacement", :record-type :var} {:record-type :any}, {:name "Output", :record-type :var} {:record-type :nonvar}, {:name "Guard", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "build_text", :arglist ({:record-type :nonvar} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"interpolate $interpolate_macro_sentinel 0 0"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:17.713: Step 0"
"2019-05-13T10:34:17.827: Step 1"
"2019-05-13T10:34:17.981: Step 2"
"term_diff term_diff 3 0"
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:record-type :nonvar} {:record-type :var}}, :record-type :one-of}, {:name "NameB", :record-type :var} {:record-type :any}, {:name "NameA", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff term_diff 3 7"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff term_diff 3 1"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff term_diff 3 4"
{{:name "Diffs", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :var}, {:name "B", :record-type :var} {:record-type :var}}
{}
"term_diff term_diff 3 6"
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "ListA", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ListB", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom}}, :record-type :one-of}}
{}
"term_diff term_diff 3 3"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"term_diff term_diff 3 2"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff term_diff 3 5"
{{:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "Diff", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 0"
{{:name "_432", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 1"
{{:name "N0", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 4"
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 3"
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 2"
{{:name "Right", :record-type :var} {:record-type :any}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{}
"term_diff lcs_diff 5 5"
{{:name "LCS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Diffs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"term_diff term_nth1 4 0"
{{:name "ArgsA", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "ArgsB", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist #{{:record-type :nonvar} {:record-type :var}}, :record-type :one-of}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"term_diff lazy_callable 1 0"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"term_diff lazy_univ 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :var}}
{}
"term_diff lazy_univ 3 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"term_diff when_proper_list 2 0"
{{:name "List", :record-type :var} {:record-type :var}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"term_diff when_proper_list 2 1"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"term_diff when_proper_list 2 2"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:18.293: Step 0"
"2019-05-13T10:34:18.302: Step 1"
"geoip to_ip 2 0"
{{:name "Atomic", :record-type :var} {:record-type :atomic}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}}
{}
"geoip to_ip 2 1"
{{:name "IP", :record-type :var} {:record-type :any}}
{}
"geoip geoip_open 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{}
"geoip geoip_open 2 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{}
"geoip geoip_lookup 3 0"
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "From", :record-type :var} {:record-type :any}}
{}
"geoip geoip_close 1 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{}
"geoip geoip_close 1 1"
{{:name "Handle", :record-type :var} {:record-type :any}}
{}
"geoip geoip_lookup 2 0"
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "From", :record-type :var} {:record-type :any}}
{}
"geoip geoip_open_sync 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Handle", :record-type :var} {:record-type :any}}
{}
"geoip geoip_open_sync 2 1"
{{:name "Handle", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{}
"geoip file_search_path 2 0"
{}
{}
"geoip byte_string 2 0"
{{:name "Byte", :record-type :var} {:record-type :integer}, {:name "String", :record-type :var} {:record-type :any}}
{}
"geoip geoip_close 0 0"
{{:name "_3986", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:18.441: Step 0"
"2019-05-13T10:34:18.446: Step 1"
"fluent fluent_create 3 0"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"fluent fluent_get 3 0"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Exit", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"fluent fluent_destroy 1 0"
{{:name "Thread", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:record-type :any}}
{}
"fluent fluent_work 3 0"
{{:name "Template", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "Message0", :record-type :var} {:record-type :any}}
{}
"fluent fluent_work 3 1"
{{:name "_408", :record-type :var} {:record-type :any}, {:name "ResponseQueue", :record-type :var} {:record-type :any}, {:name "_406", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:18.755: Step 0"
"2019-05-13T10:34:18.838: Step 1"
"with with 2 0"
{{:name "MTerm", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"with ctx_must_succeed 1 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"with term_has_context_manager 4 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Cleanup", :record-type :var} {:arglist #{{:functor "erase", :arglist ({:record-type :any}), :record-type :compound} {:functor "set_setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "close", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Setup", :record-type :var} {:arglist #{{:functor "asserta", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "absolute_file_name", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "open", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "assertz", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "set_setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}}, :record-type :one-of}, {:name "Term", :record-type :var} {:arglist #{{:functor "assertz", :arglist ({:record-type :any}), :record-type :compound} {:functor "asserta", :arglist ({:record-type :any}), :record-type :compound} {:functor "setting", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "open", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"with manage_context 3 0"
{{:name "Mode", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "AbsFile", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"with manage_context 3 1"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
{}
"with manage_context 3 3"
{{:name "NewValue", :record-type :var} {:record-type :any}, {:name "Setting", :record-type :var} {:record-type :any}, {:name "OldValue", :record-type :var} {:record-type :any}}
{}
"with manage_context 3 2"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:19.048: Step 0"
"2019-05-13T10:34:19.078: Step 1"
"lambda +\\ 5 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{}
"lambda \\ 1 0"
{{:name "FC", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"lambda ^ 4 0"
{{:name "V1", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}}
{}
"lambda no_hat_call 1 0"
{{:name "MGoal", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"lambda \\ 5 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 3 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 7 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda \\ 7 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda ^ 6 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda \\ 2 0"
{{:name "FC", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"lambda ^ 5 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 6 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 2 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{}
"lambda \\ 6 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 4 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{}
"lambda ^ 7 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda \\ 4 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}}
{}
"lambda ^ 8 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda ^ 9 0"
{{:name "V7", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda +\\ 8 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "GV", :record-type :var} {:record-type :any}, {:name "FC", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda \\ 3 0"
{{:name "FC", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"lambda ^ 3 0"
{{:name "V1", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:20.107: Step 0"
"2019-05-13T10:34:20.210: Step 1"
"response has_type 2 0"
{{:name "Response", :record-type :var} {:record-type :any}}
{}
"response status_code 2 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{}
"response term_pair 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"web cacert_file 1 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_1944", :record-type :var} {:record-type :any}}
{}
"web content_view 2 0"
{{:name "_1778", :record-type :var} {:record-type :any}}
{}
"web content_view 2 1"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Views", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "View", :record-type :var} {:arglist #{{:functor "codes", :arglist ({:record-type :any}), :record-type :compound} {:type {:record-type :any}, :record-type :list} {:functor "html5", :arglist ({:record-type :any}), :record-type :compound} {:functor "status_code", :arglist ({:record-type :any}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"web content_view 2 4"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{}
"web content_view 2 3"
{{:name "_1976", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{}
"web content_view 2 2"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}}
{}
"web content_view 2 5"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{}
"web text_atom 2 0"
{{:name "Text", :record-type :var} {:record-type :atom}, {:name "Atom", :record-type :var} {:record-type :atom}}
{}
"web text_atom 2 1"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}}
{}
"web text_atom 2 2"
{{:name "Text", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}}
{}
"web get_ 2 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "CacertFile", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:arglist ({:functor "method", :arglist ({:record-type :atom}), :record-type :compound} {:functor "header", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "status_code", :arglist ({:record-type :any}), :record-type :compound} {:functor "cacert_file", :arglist ({:record-type :any}), :record-type :compound}), :record-type :tuple}, {:name "ContentType", :record-type :var} {:record-type :any}, {:name "StatusCode", :record-type :var} {:record-type :any}}
{}
"response exists 1 0"
{{:name "Response", :record-type :var} {:record-type :any}}
{}
"web get 2 0"
{{:name "UrlText", :record-type :var} {:record-type :any}, {:name "Url", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "View", :record-type :var} {:record-type :any}}
{}
"response body 2 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"response well_formed 1 0"
{{:name "Response", :record-type :var} {:record-type :any}}
{}
"response content_type 2 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"response exists 2 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Attributes", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:20.484: Step 0"
"2019-05-13T10:34:20.498: Step 1"
"condition signal 2 0"
{{:name "Condition", :record-type :var} {:record-type :any}, {:name "Restart", :record-type :var} {:record-type :any}}
{}
"condition signal 3 0"
{{:name "Restart", :record-type :var} {:record-type :any}, {:name "Condition", :record-type :var} {:record-type :nonvar}, {:name "Default", :record-type :var} {:record-type :any}}
{}
"condition handle 3 0"
{{:name "Restart", :record-type :var} {:record-type :any}, {:name "Condition", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}}
{}
"condition handle 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Restarter", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}}
{}
"condition add_handler 2 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "Restarter", :record-type :var} {:record-type :any}}
{}
"condition rm_handler 1 0"
{{:name "Ref", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:20.884: Step 0"
"2019-05-13T10:34:20.927: Step 1"
"open_dicts unify_dicts 3 0"
{{:name "Unified", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Open2", :record-type :var} {:record-type :any}, {:name "Open1", :record-type :var} {:record-type :any}}
{{:functor "put", :arglist ({:name "Open2", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Any))", :record-type :error}}
"open_dicts attr_unify_hook 2 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Other", :record-type :var} {:record-type :any}}
{}
"open_dicts --> 2 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts function_expansion 3 0"
{{:name "In", :record-type :var} {:functor "+", :arglist ({:record-type :any}), :record-type :compound}, {:name "Guard", :record-type :var} {:functor "open_dict", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"open_dicts function_expansion 3 1"
{{:name "KeyPath", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:functor ".^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Guard", :record-type :var} {:functor ",", :arglist ({:functor "open_dict", :arglist ({:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:functor "open_dict_get", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts close_dict 2 0"
{{:name "Open", :record-type :var} {:record-type :any}, {:name "Closed", :record-type :var} {:record-type :any}}
{}
"open_dicts portray 1 0"
{{:name "V", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"open_dicts portray 1 1"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:functor "open_dict", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts open_dict 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts has_type 2 0"
{{:name "O", :record-type :var} {:record-type :var}, {:name "_4126", :record-type :var} {:record-type :any}}
{}
"open_dicts contains 2 0"
{{:name "_5254", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Open1", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts open_dict_get 3 0"
{{:name "KeyPath", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Open", :record-type :var} {:record-type :any}}
{}
"open_dicts close_dict 1 0"
{{:name "O", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:21.253: Step 0"
"2019-05-13T10:34:23.386: Step 1"
"dot_dcg --> 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "StmtList", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 7"
{{:name "SubGraph", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 20"
{{:name "NodeId", :record-type :var} {:record-type :any}, {:name "AttrList", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 27"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dot_dcg --> 2 1"
{}
{}
"dot_dcg --> 2 24"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 4"
{{:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stmt", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 15"
{{:name "Nodes", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 21"
{{:name "NodeId", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 31"
{{:name "String", :record-type :var} {:record-type :any}, {:name "AString", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 32"
{}
{}
"dot_dcg --> 2 33"
{}
{}
"dot_dcg --> 2 13"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 22"
{{:name "NodeId", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 36"
{}
{}
"dot_dcg --> 2 29"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 6"
{{:name "NodeStmt", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 28"
{{:name "Cs", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 25"
{{:name "Number", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 34"
{}
{}
"dot_dcg --> 2 17"
{{:name "First", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dot_dcg --> 2 3"
{{:name "Stmt", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 12"
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dot_dcg --> 2 2"
{{:name "Stmt", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 23"
{{:name "StmtList", :record-type :var} {:record-type :any}, {:name "SubGraphId", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 35"
{}
{}
"dot_dcg --> 2 19"
{{:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Node", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 11"
{{:name "Attr", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 9"
{{:name "Merged", :record-type :var} {:record-type :any}, {:name "AList", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 5"
{{:name "EdgeStmt", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 14"
{{:name "Name", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 26"
{{:name "Id", :record-type :var} {:record-type :any}, {:name "AId", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 16"
{{:name "AttrList", :record-type :var} {:record-type :any}, {:name "Nodes", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 30"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dot_dcg --> 2 10"
{}
{}
"dot_dcg --> 2 18"
{{:name "Node", :record-type :var} {:record-type :any}}
{}
"dot_dcg --> 2 37"
{}
{}
"dot_dcg --> 2 8"
{{:name "AList", :record-type :var} {:record-type :any}}
{}
"dot_dcg quoted_string_body 5 0"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dot_dcg quoted_string_body 5 1"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dot_dcg quoted_string_body 5 4"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dot_dcg quoted_string_body 5 3"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dot_dcg quoted_string_body 5 2"
{{:name "Codes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dot_dcg merge 3 0"
{{:name "Ys", :record-type :var} {:record-type :any}}
{}
"dot_dcg merge 3 1"
{{:name "Zs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:25.657: Step 0"
"2019-05-13T10:34:25.766: Step 1"
"2019-05-13T10:34:25.881: Step 2"
"plsmf smf_tempo 3 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Tempo", :record-type :var} {:functor "smf_tempo", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:arglist #{{:functor "time", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "crochet_duration", :arglist ({:record-type :any}), :record-type :compound} {:functor "time_signature", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "crochets_per_minute", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"plsmf smf_tempo 3 1"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Tempo", :record-type :var} {:functor "smf_tempo", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "T", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:arglist #{{:functor "time", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "crochet_duration", :arglist ({:record-type :any}), :record-type :compound} {:functor "time_signature", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "crochets_per_minute", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"plsmf smf_property 2 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Prop", :record-type :var} {:record-type :nonvar}}
{}
"plsmf timeline 1 0"
{}
{}
"plsmf timeline 1 1"
{}
{}
"plsmf smf_events 3 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{}
"plsmf smf_events_between 4 0"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"plsmf to_beats 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"plsmf to_beats 3 1"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"plsmf to_beats 3 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"plsmf to_beats 3 2"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PPQN", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{{:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "rdiv", :arglist ({:name "X", :record-type :var} {:name "PPQN", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"plsmf smf_add_events 2 0"
{{:name "SMF", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}}
{}
"plsmf smf_events 2 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}}
{}
"plsmf smf_events 4 0"
{{:name "Events1", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{}
"plsmf smf_events 4 1"
{{:name "Events1", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Events", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Timeline", :record-type :var} {:record-type :atom}}
{}
"plsmf tempo_property 2 0"
{{:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{}
"plsmf tempo_property 2 1"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{}
"plsmf tempo_property 2 4"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}}
{}
"plsmf tempo_property 2 3"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:functor "rdiv", :arglist ({:value 60000000, :record-type :integer} {:name "N", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "rdiv", :arglist ({:value 60000000, :record-type :integer} {:name "N", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"plsmf tempo_property 2 2"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{{:head {:functor "rdiv", :arglist ({:name "N", :record-type :var} {:value 1000000, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "rdiv", :arglist ({:name "N", :record-type :var} {:value 1000000, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"plsmf smf_duration 2 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Dur", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:34:26.175: Step 0"
"2019-05-13T10:36:07.356: Step 1"
"2019-05-13T10:38:48.679: Step 2"
"matrix matrix_inv_triang 2 0"
{{:name "ID", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LL1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L2", :record-type :var} {:record-type :any}, {:name "IDM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LL2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{}
"matrix get_diag 4 0"
{{:name "N", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}}
{}
"matrix get_diag 4 1"
{{:name "N1", :record-type :var} {:record-type :number}, {:name "N0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix inv 2 0"
{{:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:record-type :number}}
{}
"matrix mul 4 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"matrix row_multiply 3 0"
{{:name "T", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_j 5 0"
{{:name "Aii", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "L", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "S", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix cholesky_j 5 1"
{{:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Aij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "S", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :number}, {:name "J1", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Ljj", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix matrix_div_scal 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"matrix matrix_inv_i 3 0"
{{:name "N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}}
{}
"matrix matrix_inv_i 3 1"
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}, {:name "LT", :record-type :var} {:record-type :any}}
{}
"matrix determinant 2 0"
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DetL", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Det", :record-type :var} {:record-type :number}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"matrix matrix_mul 3 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"matrix identify_rows 3 0"
{{:name "_N", :record-type :var} {:record-type :any}}
{}
"matrix identify_rows 3 1"
{{:name "R", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"matrix dot_product 3 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"matrix list_to_term 2 0"
{{:name "LL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{}
"matrix get_diagonal 2 0"
{{:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "LT", :record-type :var} {:record-type :nonvar}}
{}
"matrix mult 3 0"
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix matrix_inversion 2 0"
{{:name "LIT", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LI", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"matrix matrix_inv_k 5 0"
{{:name "_N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "_J", :record-type :var} {:record-type :any}}
{}
"matrix matrix_inv_k 5 1"
{{:name "Vkj", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Vik", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LT", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Vij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "NVij", :record-type :var} {:record-type :number}}
{}
"matrix diff 3 0"
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix get_v 5 0"
{{:name "M", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Argij", :record-type :var} {:record-type :integer}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix div 3 0"
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix diag 2 0"
{{:name "N1", :record-type :var} {:record-type :number}, {:name "NN", :record-type :var} {:record-type :number}, {:name "L0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DT", :record-type :var} {:record-type :nonvar}, {:name "In", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"matrix matrix_sum 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_k 7 0"
{{:name "_N", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}, {:name "J", :record-type :var} {:record-type :any}, {:name "_I", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_k 7 1"
{{:name "S0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "S", :record-type :var} {:record-type :any}, {:name "S1", :record-type :var} {:record-type :number}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Ljk", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Lik", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "K1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix sum 3 0"
{{:name "C", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix matrix_inv_j 4 0"
{{:name "I", :record-type :var} {:record-type :any}, {:name "_N", :record-type :var} {:record-type :any}, {:name "_LT", :record-type :var} {:record-type :any}}
{}
"matrix matrix_inv_j 4 1"
{{:name "V_ij", :record-type :var} {:record-type :number}, {:name "Vij", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "J1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LT", :record-type :var} {:functor nil, :arglist (), :record-type :compound}}
{}
"matrix term_to_list 3 0"
{{:name "E", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_454", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :nonvar}, {:name "N", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_decomposition 2 0"
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LM", :record-type :var} {:record-type :nonvar}, {:name "LL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "NL", :record-type :var} {:record-type :integer}, {:name "AL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "AM", :record-type :var} {:record-type :nonvar}}
{}
"matrix list0 2 0"
{}
{}
"matrix list0 2 1"
{{:name "N1", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix matrix_mult_scal 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"matrix set_diag 4 0"
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix prod 3 0"
{{:name "P0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P", :record-type :var} {:record-type :number}}
{}
"matrix matrix_multiply 3 0"
{{:name "M0", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"matrix matrix_diff 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_i 4 0"
{{:name "N", :record-type :var} {:record-type :any}, {:name "_A", :record-type :var} {:record-type :any}, {:name "_L", :record-type :var} {:record-type :any}}
{}
"matrix cholesky_i 4 1"
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "L", :record-type :var} {:record-type :any}, {:name "I1", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"matrix set_v 5 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Argij", :record-type :var} {:record-type :number}, {:name "J", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:32.754: Step 0"
"2019-05-13T10:41:32.921: Step 1"
"julian_lang_en form_time 2 0"
{{:name "English", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:functor "english", :arglist ({:record-type :any}), :record-type :compound}, {:name "Dt", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 0"
{{:name "Part", :record-type :var} {:record-type :any}, {:name "Separator", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"julian_lang_en --> 2 7"
{}
{}
"julian_lang_en --> 2 20"
{{:name "Month", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 27"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 1"
{}
{}
"julian_lang_en --> 2 24"
{{:name "_426", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 4"
{}
{}
"julian_lang_en --> 2 15"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 21"
{{:name "Words", :record-type :var} {:record-type :any}, {:name "Months", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 13"
{}
{}
"julian_lang_en --> 2 22"
{{:name "Month", :record-type :var} {:record-type :any}, {:name "_5448", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 6"
{}
{}
"julian_lang_en --> 2 28"
{{:name "Form", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 25"
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "Part", :record-type :var} {:record-type :any}, {:name "Forms", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Form", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 17"
{}
{}
"julian_lang_en --> 2 3"
{}
{}
"julian_lang_en --> 2 12"
{}
{}
"julian_lang_en --> 2 2"
{}
{}
"julian_lang_en --> 2 23"
{{:name "Month", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 19"
{{:name "Days", :record-type :var} {:record-type :any}, {:name "Words", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 11"
{}
{}
"julian_lang_en --> 2 9"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 5"
{}
{}
"julian_lang_en --> 2 14"
{}
{}
"julian_lang_en --> 2 26"
{{:name "Form", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 16"
{}
{}
"julian_lang_en --> 2 10"
{}
{}
"julian_lang_en --> 2 18"
{{:name "Word", :record-type :var} {:record-type :any}, {:name "Day", :record-type :var} {:record-type :any}}
{}
"julian_lang_en --> 2 8"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"julian_lang_en split 4 0"
{{:name "_5460", :record-type :var} {:record-type :any}, {:name "Part", :record-type :var} {:record-type :any}}
{}
"julian_lang_en end_of_content 2 0"
{}
{}
"julian_lang_en codes_dow 2 0"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "_5560", :record-type :var} {:record-type :any}, {:name "Day", :record-type :var} {:record-type :any}}
{}
"julian_lang_en codes_month 2 0"
{{:name "Month", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "_5560", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:33.253: Step 0"
"2019-05-13T10:41:33.413: Step 1"
"test_graphml g 2 0"
{}
{}
"graphml_ugraph node_data 4 0"
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph node_data 4 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DataT", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph node_dom 6 0"
{{:name "NodeDOM", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeMap0", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph graphml_write_ugraph 4 0"
{{:name "Options", :record-type :var} {:record-type :empty-list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:functor "element", :arglist ({:record-type :atom} {:type {:arglist #{{:functor "=", :arglist ({:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :atom}), :record-type :compound} {:functor "=", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "UGraph", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph --> 2 0"
{{:name "Node", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph edge_dom 5 0"
{{:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphml_ugraph edge_dom 6 0"
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_444", :record-type :var} {:record-type :any}, {:name "_448", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph edge_dom 6 1"
{{:name "Data", :record-type :var} {:record-type :any}, {:name "IdI1", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TID", :record-type :var} {:record-type :any}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FID", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "IdI", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"test_graphml cmap 3 0"
{{:name "Node", :record-type :var} {:record-type :any}, {:name "Color", :record-type :var} {:record-type :any}}
{}
"test_graphml t1 0 0"
{{:name "Graph", :record-type :var} {:type {:functor "-", :arglist ({:record-type :integer} {:type {:record-type :integer}, :record-type :list}), :record-type :compound}, :record-type :list}}
{}
"graphml_ugraph node_dom 8 0"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}, {:name "_470", :record-type :var} {:record-type :any}, {:name "_468", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph node_dom 8 1"
{{:name "Data", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}, {:name "IdI1", :record-type :var} {:record-type :any}, {:name "NodeMap0", :record-type :var} {:record-type :any}, {:name "NodeMap1", :record-type :var} {:record-type :any}, {:name "Map", :record-type :var} {:record-type :any}, {:name "DOM0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}, {:name "VT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "V0", :record-type :var} {:record-type :any}, {:name "IdI", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph key_dom 5 0"
{{:name "_434", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph key_dom 5 1"
{{:name "DOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyType", :record-type :var} {:record-type :any}, {:name "KeyTerm", :record-type :var} {:functor "key", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "For", :record-type :var} {:record-type :any}, {:name "KeyName", :record-type :var} {:record-type :any}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "N0", :record-type :var} {:record-type :any}}
{}
"test_graphml nomap 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph key_dom 4 0"
{{:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyDOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:record-type :any}}
{}
"graphml_ugraph ugraph_xml_dom 4 0"
{{:name "DOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Map", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "EdgeDom", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NodeKeys", :record-type :var} {:record-type :any}, {:name "NodeMap", :record-type :var} {:record-type :any}, {:name "Ugraph", :record-type :var} {:record-type :any}, {:name "EdgeKeys", :record-type :var} {:record-type :any}, {:name "NodeDOM", :record-type :var} {:record-type :any}, {:name "KeyDOM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"test_graphml t2 0 0"
{{:name "Graph", :record-type :var} {:type {:functor "-", :arglist ({:record-type :integer} {:type {:record-type :integer}, :record-type :list}), :record-type :compound}, :record-type :list}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:33.937: Step 0"
"2019-05-13T10:41:33.972: Step 1"
"2019-05-13T10:41:34.073: Step 2"
"djson json_term 2 0"
{{:name "Json", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"djson finalize 1 0"
{{:name "X", :record-type :var} {:record-type :empty-list}}
{}
"djson finalize 1 1"
{{:name "J", :record-type :var} {:record-type :any}}
{}
"djson finalize 1 4"
{{:name "_382", :record-type :var} {:record-type :any}}
{}
"djson finalize 1 3"
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"djson finalize 1 2"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Key", :record-type :var} {:record-type :any}}
{}
"djson json 3 0"
{{:name "TypeCheck", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"djson json 3 1"
{{:name "_432", :record-type :var} {:record-type :any}}
{}
"djson json 3 4"
{{:name "_590", :record-type :var} {:record-type :any}, {:name "JT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "JH", :record-type :var} {:record-type :any}}
{}
"djson json 3 3"
{{:name "_410", :record-type :var} {:record-type :any}}
{}
"djson json 3 2"
{{:name "J0", :record-type :var} {:record-type :any}, {:name "J", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}}
{}
"djson json 3 5"
{{:name "J", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}}
{}
"djson eq_colon 2 0"
{{:name "V0", :record-type :var} {:record-type :any}, {:name "_542", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"djson is_like_json 1 0"
{{:name "Atom", :record-type :var} {:record-type :atom}}
{}
"djson is_like_json 1 7"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"djson is_like_json 1 1"
{{:name "Number", :record-type :var} {:record-type :number}}
{}
"djson is_like_json 1 4"
{{:name "H", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"djson is_like_json 1 6"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Rest", :record-type :var} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}}
{}
"djson is_like_json 1 3"
{}
{}
"djson is_like_json 1 2"
{}
{}
"djson is_like_json 1 5"
{{:name "_402", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:arglist #{{:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :number} {:type {:record-type :any}, :record-type :list} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:arglist #{{:record-type :number} {:type {:record-type :any}, :record-type :list} {:record-type :atom} {:functor "{}", :arglist ({:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "{}", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}), :record-type :compound} {:record-type :atom} {:functor "json", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:34.923: Step 0"
"2019-05-13T10:41:34.980: Step 1"
"consul kv_url 2 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Key", :record-type :var} {:record-type :any}}
{}
"consul read_consul_key 3 0"
{{:name "Data", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "_1102", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "_1812", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_1020", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "_1098", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{{:term "Value", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"consul convert_result 3 0"
{{:name "In", :record-type :var} {:record-type :any}}
{}
"consul convert_result 3 1"
{{:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"consul convert_result 3 3"
{{:name "Ins", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :ground}}
{}
"consul convert_result 3 2"
{{:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"consul svs_url 1 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}}
{}
"consul dereg_url 2 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Service", :record-type :var} {:record-type :any}}
{}
"consul reg_url 1 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}}
{}
"consul delete_consul_key 1 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}}
{}
"consul update_consul_key 2 0"
{{:name "_730", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "ValueToSend", :record-type :var} {:record-type :any}}
{}
"consul update_consul_key 2 1"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_584", :record-type :var} {:record-type :any}}
{}
"consul read_consul_key 2 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"consul consul_services 1 0"
{{:name "_5602", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Services", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:functor "get", :arglist ({:name "X", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(get(Any))", :record-type :error}}
"consul connection 1 0"
{}
{}
"consul deregister_consul_service 1 0"
{{:name "Service", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "_5138", :record-type :var} {:record-type :any}, {:name "_5140", :record-type :var} {:record-type :any}}
{}
"consul sv_url 2 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Connection", :record-type :var} {:record-type :atom}, {:name "Service", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:35.239: Step 0"
"2019-05-13T10:41:35.306: Step 1"
"2019-05-13T10:41:35.380: Step 2"
"uri_qq qq_an_atom 3 0"
{{:name "Atom", :record-type :var} {:arglist #{{:record-type :atom} {:record-type :var}}, :record-type :one-of}, {:name "Uri0", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{}
"uri_qq replace_variables 3 0"
{{:name "Name", :record-type :var} {:record-type :atom}, {:name "Term0", :record-type :var} {:record-type :atom}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"uri_qq replace_variables 3 1"
{{:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"uri_qq replace_variables 3 2"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"uri_qq uri_uriqq 2 0"
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{}
"uri_qq fragment 2 0"
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Fragment", :record-type :var} {:record-type :any}}
{}
"uri_qq qq 4 0"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "MaybeBase", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Scheme", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"uri_qq path_term 2 0"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "_470", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :var}, {:name "Term", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "PathList", :record-type :var} {:record-type :any}}
{}
"uri_qq path_term 2 1"
{{:name "Path", :record-type :var} {:record-type :atom}, {:name "Term", :record-type :var} {:record-type :atom}}
{}
"uri_qq authority 2 0"
{{:name "Password", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}, {:name "Authority", :record-type :var} {:record-type :any}}
{}
"uri_qq list_slashes 2 0"
{{:name "Slashes", :record-type :var} {:record-type :any}, {:name "ReverseList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "List", :record-type :var} {:record-type :nonvar}}
{}
"uri_qq list_slashes 2 1"
{{:name "List", :record-type :var} {:record-type :any}, {:name "Slashes", :record-type :var} {:record-type :nonvar}, {:name "ReverseList", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"uri_qq function_expansion 3 0"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{}
"uri_qq function_expansion 3 1"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "RelUri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{}
"uri_qq function_expansion 3 2"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Suffix", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}}
{}
"uri_qq uri 4 0"
{{:name "Result", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Content", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}, {:name "MaybeBase", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"uri_qq list_slashes_ 2 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"uri_qq list_slashes_ 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"uri_qq scheme 2 0"
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Scheme", :record-type :var} {:record-type :any}}
{}
"uri_qq atom_uri 2 0"
{{:name "Atom", :record-type :var} {:record-type :var}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}}
{}
"uri_qq atom_uri 2 1"
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Uri", :record-type :var} {:record-type :any}}
{}
"uri_qq search 2 0"
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "Search", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}}
{}
"uri_qq path 2 0"
{{:name "Uri", :record-type :var} {:record-type :any}, {:name "UriQQ", :record-type :var} {:record-type :any}, {:name "PathA", :record-type :var} {:record-type :any}, {:name "PathB", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:41:35.779: Step 0"
"2019-05-13T10:48:01.405: Step 1"
"auc compute_areas 5 0"
{{:name "Neg", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "NPos", :record-type :var} {:record-type :number}, {:name "E", :record-type :var} {:record-type :any}, {:name "LG1", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "ROC", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "AUCROC", :record-type :var} {:record-type :any}, {:name "NEx", :record-type :var} {:record-type :integer}, {:name "NNeg", :record-type :var} {:record-type :integer}, {:name "_4128", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "AUCPR", :record-type :var} {:record-type :any}}
{}
"auc compute_acc_list 7 0"
{{:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "AccList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc compute_acc_list 7 1"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "AccListNew", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_P", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AccList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc compute_acc_list 7 2"
{{:name "AccListNew", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_P", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "AccList0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "AccList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc compute_pointsroc 8 0"
{{:name "_FP", :record-type :var} {:record-type :any}, {:name "_TP", :record-type :var} {:record-type :any}, {:name "_P0", :record-type :var} {:record-type :any}, {:name "_FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_TN", :record-type :var} {:record-type :any}}
{}
"auc compute_pointsroc 8 1"
{{:name "P", :record-type :var} {:record-type :any}, {:name "Po1", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Po2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Po0", :record-type :var} {:record-type :any}}
{}
"auc compute_pointsroc 8 2"
{{:name "P", :record-type :var} {:record-type :any}, {:name "Po1", :record-type :var} {:record-type :any}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "Po2", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Po0", :record-type :var} {:record-type :any}}
{}
"auc compute_curve_points 7 0"
{{:name "_P0", :record-type :var} {:record-type :any}, {:name "_FN", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Prec", :record-type :var} {:record-type :number}, {:name "_TN", :record-type :var} {:record-type :any}}
{}
"auc compute_curve_points 7 1"
{{:name "P", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}, {:name "FP1", :record-type :var} {:record-type :number}, {:name "TP", :record-type :var} {:record-type :any}, {:name "FP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Pr", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}, {:name "TN1", :record-type :var} {:record-type :number}, {:name "TN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc compute_curve_points 7 2"
{{:name "P", :record-type :var} {:record-type :any}, {:name "TP", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FP", :record-type :var} {:record-type :any}, {:name "Pr", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "FN", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_412", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "Pr1", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}, {:name "TP1", :record-type :var} {:record-type :number}, {:name "FN1", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc compute_maxacc 2 0"
{{:name "Neg", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LG", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "NPos", :record-type :var} {:record-type :number}, {:name "E", :record-type :var} {:record-type :any}, {:name "LG1", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "LG2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "MaxAcc", :record-type :var} {:record-type :any}, {:name "NEx", :record-type :var} {:record-type :integer}, {:name "NNeg", :record-type :var} {:record-type :integer}, {:name "_9854", :record-type :var} {:record-type :any}, {:name "AccList", :record-type :var} {:record-type :any}}
{}
"auc area 9 0"
{{:name "_TPA", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_Flag", :record-type :var} {:record-type :any}, {:name "_Pos", :record-type :var} {:record-type :any}, {:name "_FPA", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}}
{}
"auc area 9 1"
{{:name "R0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Pos", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "PR3", :record-type :var} {:record-type :any}, {:name "PR0", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :any}, {:name "A0", :record-type :var} {:record-type :any}, {:name "TPA", :record-type :var} {:record-type :any}, {:name "TPB", :record-type :var} {:record-type :number}, {:name "PR2", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "FPA", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "Flag", :record-type :var} {:record-type :any}, {:name "FPB", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"auc interpolate 13 0"
{{:name "_TPB", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_R0", :record-type :var} {:record-type :any}, {:name "_FPB", :record-type :var} {:record-type :any}, {:name "_TPA", :record-type :var} {:record-type :any}, {:name "_Pos", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "_P0", :record-type :var} {:record-type :any}, {:name "_FPA", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"auc interpolate 13 1"
{{:name "R0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P", :record-type :var} {:record-type :number}, {:name "Pos", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "PR0", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :number}, {:name "A0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPA", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPB", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "A", :record-type :var} {:record-type :any}, {:name "FPA", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "P0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "R", :record-type :var} {:record-type :number}, {:name "PR", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}, {:name "FPB", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I1", :record-type :var} {:record-type :number}}
{}
"auc hull 5 0"
{{:name "FPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC1", :record-type :var} {:record-type :number}, {:name "AUC0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"auc hull 5 1"
{{:name "TPR1", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC2", :record-type :var} {:record-type :number}, {:name "FPR1", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "FPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AUC1", :record-type :var} {:record-type :any}, {:name "AUC0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TPR", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"auc compute_aucpr 5 0"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "Neg", :record-type :var} {:record-type :any}, {:name "Pos", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Points", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TP", :record-type :var} {:record-type :any}, {:name "_TPoints", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FP", :record-type :var} {:record-type :any}, {:name "P_0", :record-type :var} {:record-type :any}, {:name "TL", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "FN", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "PR", :record-type :var} {:record-type :any}, {:name "Flag", :record-type :var} {:record-type :any}, {:name "TN", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:48.975: Step 0"
"2019-05-13T10:54:49.192: Step 1"
"dirtree dirtree 2 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:functor "element", :arglist ({:record-type :atom} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"dirtree get_ftp_ls_output 2 0"
{{:name "Stdout", :record-type :var} {:record-type :any}, {:name "Ftped", :record-type :var} {:record-type :any}}
{}
"dirtree scandir 3 0"
{{:name "_Dir", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"dirtree sortree 3 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:record-type :any}, {:name "Ss", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:record-type :any}}
{}
"dirtree sortree 3 1"
{{:name "_C", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}}
{}
"dirtree month 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}}
{}
"dirtree extensions_from_saved 1 0"
{{:name "Exts", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}, {:name "XML", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}}
{}
"dirtree --> 2 0"
{}
{}
"dirtree --> 2 7"
{{:name "H2", :record-type :var} {:record-type :any}, {:name "MM", :record-type :var} {:record-type :any}, {:name "H1", :record-type :var} {:record-type :any}, {:name "H3", :record-type :var} {:record-type :any}, {:name "H4", :record-type :var} {:record-type :any}, {:name "M1", :record-type :var} {:record-type :any}, {:name "M2", :record-type :var} {:record-type :any}, {:name "YYYY", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "SS", :record-type :var} {:record-type :any}, {:name "DD", :record-type :var} {:record-type :any}, {:name "D2", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "D1", :record-type :var} {:record-type :any}, {:name "MO", :record-type :var} {:record-type :any}, {:name "HH", :record-type :var} {:record-type :any}}
{}
"dirtree --> 2 1"
{{:name "E", :record-type :var} {:record-type :any}, {:name "Es", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dirtree --> 2 4"
{}
{}
"dirtree --> 2 6"
{{:name "GroupP", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "NameC", :record-type :var} {:record-type :any}, {:name "GroupC", :record-type :var} {:record-type :any}, {:name "UserP", :record-type :var} {:record-type :any}, {:name "UserC", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Kind", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "I1", :record-type :var} {:record-type :any}, {:name "User", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "OthersP", :record-type :var} {:record-type :any}}
{}
"dirtree --> 2 3"
{{:name "E", :record-type :var} {:record-type :any}}
{}
"dirtree --> 2 2"
{{:name "E", :record-type :var} {:record-type :any}}
{}
"dirtree --> 2 5"
{{:name "W", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{}
"dirtree assign_path 3 0"
{{:name "Wp", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Sp", :record-type :var} {:record-type :any}, {:name "Next", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"dirtree assign_path 2 0"
{{:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NoPath", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "WithPath", :record-type :var} {:record-type :any}}
{}
"dirtree dirtree 3 0"
{{:name "_826", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_822", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "As", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"dirtree dirtree 3 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"dirtree capture_attrs 3 0"
{{:name "Attr", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Attrs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tree", :record-type :var} {:record-type :any}, {:name "SList", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dirtree extension_embedding_enable 0 0"
{{:name "E", :record-type :var} {:record-type :any}}
{}
"dirtree sortree 2 0"
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"dirtree embed 2 0"
{{:name "XLines", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "XLine", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{}
"dirtree embed 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"dirtree fetch_lines 2 0"
{{:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:49.669: Step 0"
"2019-05-13T10:54:49.693: Step 1"
"maybe shrink 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "X0", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"maybe has_type 2 0"
{{:name "Maybe", :record-type :var} {:record-type :nonvar}, {:name "_4162", :record-type :var} {:record-type :any}}
{}
"maybe has_type 2 1"
{{:name "Maybe", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"maybe fold_maybe 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{}
"maybe fold_maybe 4 1"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Accum0", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"maybe default_maybe_value 3 0"
{{:name "Maybe", :record-type :var} {:arglist #{{:functor "just", :arglist ({:record-type :any}), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}}
{}
"maybe is_nothing 1 0"
{}
{}
"maybe call_maybe 3 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Maybe", :record-type :var} {:record-type :any}}
{}
"maybe is_just 1 0"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"maybe just_value 2 0"
{{:name "Value", :record-type :var} {:record-type :any}}
{}
"maybe just_value 2 1"
{{:name "_396", :record-type :var} {:record-type :any}}
{}
"maybe maybe_list 2 0"
{}
{}
"maybe maybe_list 2 1"
{{:name "H", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"maybe map_maybe 3 0"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"maybe map_maybe 3 1"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "V0", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"maybe maybe_default_value 3 0"
{{:name "Default", :record-type :var} {:record-type :any}}
{}
"maybe maybe_default_value 3 1"
{{:name "_430", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"maybe maybe_value 2 0"
{{:name "Value", :record-type :var} {:record-type :any}}
{}
"maybe arbitrary 2 0"
{{:name "Maybe", :record-type :var} {:record-type :any}}
{}
"maybe arbitrary 2 1"
{{:name "Maybe", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:50.124: Step 0"
"2019-05-13T10:54:50.363: Step 1"
"dcg_util --> 2 0"
{{:name "N", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_4050", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 7"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 1"
{{:name "N0", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg_util --> 2 4"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 13"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 6"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg_util --> 2 3"
{{:name "N", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 12"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 2"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 11"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 9"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 5"
{{:name "_Goal", :record-type :var} {:record-type :any}}
{}
"dcg_util --> 2 10"
{{:name "SepDCG", :record-type :var} {:record-type :any}, {:name "Elem", :record-type :var} {:record-type :any}, {:name "ElemDCG", :record-type :var} {:record-type :any}, {:name "Tail", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg_util --> 2 8"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg_util eos 2 0"
{}
{}
"dcg_util parsing 2 0"
{{:name "H", :record-type :var} {:record-type :nonvar}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:51.093: Step 0"
"2019-05-13T10:54:51.182: Step 1"
"amazon_api agent_secret 2 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "Secret", :record-type :var} {:record-type :any}}
{}
"amazon_api build_agent 2 0"
{{:name "SecretKey", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "AccessKey", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}}
{}
"amazon_api must_have 4 0"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"amazon_api --> 2 0"
{}
{}
"amazon_api --> 2 1"
{}
{}
"amazon_api --> 2 4"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"amazon_api --> 2 3"
{}
{}
"amazon_api --> 2 2"
{}
{}
"amazon_api --> 2 5"
{}
{}
"amazon_api timestamp 1 0"
{{:name "T", :record-type :var} {:record-type :any}, {:name "Now", :record-type :var} {:record-type :any}, {:name "DT", :record-type :var} {:record-type :any}}
{}
"amazon_api url_dom_ 2 0"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "_460", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"amazon_api encode_pairs 2 0"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "Encoded", :record-type :var} {:record-type :any}, {:name "Sorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "_456", :record-type :var} {:record-type :any}}
{}
"amazon_api price_node 2 0"
{}
{}
"amazon_api price_node 2 1"
{}
{}
"amazon_api price_node 2 2"
{}
{}
"amazon_api agent_tag 2 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Tag", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{}
"amazon_api inventory_node 2 0"
{}
{}
"amazon_api inventory_node 2 1"
{}
{}
"amazon_api inventory_node 2 2"
{}
{}
"amazon_api agent_host 2 0"
{{:name "Host", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{}
"amazon_api sign_request 4 0"
{{:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "HmacBytes", :record-type :var} {:record-type :any}, {:name "SignMe", :record-type :var} {:record-type :any}, {:name "Agent", :record-type :var} {:functor "agent", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Secret", :record-type :var} {:record-type :any}, {:name "Args0", :record-type :var} {:record-type :any}, {:name "Signature", :record-type :var} {:record-type :any}, {:name "Method", :record-type :var} {:record-type :any}}
{{:functor "put", :arglist ({:term "Signature", :record-type :atom} {:name "Signature", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Atom, Any))", :record-type :error}, {:functor "put", :arglist ({:term "Timestamp", :record-type :atom} {:functor "timestamp", :arglist ({:term "~", :record-type :atom}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Atom, Compound(timestamp(Atom))))", :record-type :error}}
"amazon_api url_dom 2 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{}
"amazon_api agent_key 2 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}}
{}
"amazon_api uri_encode 2 0"
{{:name "Encoded", :record-type :var} {:record-type :atom}, {:name "Value", :record-type :var} {:record-type :any}, {:name "E0", :record-type :var} {:record-type :atom}, {:name "E1", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "E2", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:51.450: Step 0"
"2019-05-13T10:54:51.507: Step 1"
"inotify inotify_close 1 0"
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "_4098", :record-type :var} {:record-type :any}, {:name "_4100", :record-type :var} {:record-type :any}, {:name "_4102", :record-type :var} {:record-type :any}}
{}
"inotify inotify_add_watch 3 0"
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :atom}}
{}
"inotify spec_path 3 0"
{{:name "Path0", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"inotify spec_path 3 1"
{{:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"inotify inotify_rm_watch 2 0"
{{:name "_4176", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :integer}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_4174", :record-type :var} {:record-type :any}}
{}
"inotify inotify_rm_watch 2 1"
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :atom}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"inotify inotify_rm_watch 2 2"
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :atom}}
{}
"inotify inotify_current_watch 2 0"
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "_Watch", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"inotify inotify_read_event 3 0"
{{:name "INotify", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "On", :record-type :var} {:record-type :nonvar}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "Flags", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "Event0", :record-type :var} {:record-type :nonvar}, {:name "On0", :record-type :var} {:arglist #{{:record-type :atom} {:functor "member", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Cookie", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}}
{}
"inotify on_object 4 0"
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"inotify on_object 4 1"
{{:name "Directory", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"inotify on_object 4 3"
{{:name "Directory", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"inotify on_object 4 2"
{{:name "Watch", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"inotify map_event 7 0"
{{:name "Flags", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Cookie", :record-type :var} {:record-type :any}, {:name "Watch", :record-type :var} {:record-type :any}, {:name "_620", :record-type :var} {:record-type :any}, {:name "INotify", :record-type :var} {:record-type :any}, {:name "_Obj", :record-type :var} {:record-type :any}, {:name "_618", :record-type :var} {:record-type :any}}
{}
"inotify map_event 7 1"
{{:name "_Cookie", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}, {:name "_Watch", :record-type :var} {:record-type :any}, {:name "_Flags", :record-type :var} {:record-type :any}, {:name "_INotify", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :nonvar}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:52.604: Step 0"
"2019-05-13T10:54:52.801: Step 1"
"recaptcha remote_IP 2 0"
{{:name "IP0", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"recaptcha remote_IP 2 1"
{{:name "Peer", :record-type :var} {:functor "ip", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "IP", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"recaptcha remote_IP 2 2"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"recaptcha_demo --> 2 0"
{{:name "HREF", :record-type :var} {:record-type :any}}
{}
"recaptcha_demo --> 2 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "RecapthaParams", :record-type :var} {:record-type :any}, {:name "Back", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"recaptcha_demo key 2 0"
{}
{}
"recaptcha_demo key 2 1"
{}
{}
"recaptcha_demo server 1 0"
{{:name "Port", :record-type :var} {:record-type :any}}
{}
"recaptcha recaptcha_verify 3 0"
{{:name "Peer", :record-type :var} {:record-type :any}, {:name "Challenge", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:record-type :any}, {:name "Atoms", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "PrivateKey", :record-type :var} {:record-type :any}}
{}
"recaptcha peer_to_ip 2 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "IP", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"recaptcha_demo captcha_form 1 0"
{{:name "_Request", :record-type :var} {:record-type :any}}
{}
"recaptcha read_stream_to_lines 2 0"
{{:name "In", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Line0", :record-type :var} {:record-type :any}}
{}
"recaptcha recaptcha_verify 2 0"
{{:name "Parameters", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_546", :record-type :var} {:record-type :any}, {:name "Challenge", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}, {:name "_462", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"recaptcha --> 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Theme", :record-type :var} {:record-type :any}, {:name "PublicKey", :record-type :var} {:record-type :any}}
{}
"recaptcha --> 2 1"
{{:name "Theme", :record-type :var} {:record-type :any}, {:name "PublicKey", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"recaptcha read_stream_to_lines 3 0"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"recaptcha read_stream_to_lines 3 1"
{{:name "More", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Line", :record-type :var} {:record-type :any}, {:name "Line1", :record-type :var} {:record-type :any}}
{}
"recaptcha_demo captcha_callback 1 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "RecapthaParams", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"recaptcha recaptcha_parameters 1 0"
{{:name "_Response", :record-type :var} {:record-type :any}, {:name "_Challenge", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:53.205: Step 0"
"2019-05-13T10:54:53.430: Step 1"
"2019-05-13T10:54:53.690: Step 2"
"with_state get 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"with_state mk_get_term 5 0"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"with_state gets 4 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"with_state expand 2 0"
{{:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Plain1", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "StateOut", :record-type :var} {:record-type :any}, {:name "Mod", :record-type :var} {:record-type :any}, {:name "Goal1", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "In", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "StateIn", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"with_state expand 2 1"
{{:name "StateIn", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_704", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term1", :record-type :var} {:functor ":-", :arglist ({:functor "go", :arglist ({:arglist ({:record-type :any}), :record-type :tuple} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :any}), :record-type :compound}, {:name "StateOut", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:functor "-->", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}}
{}
"with_state expand 2 4"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FieldValue", :record-type :var} {:record-type :nonvar}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"with_state expand 2 3"
{{:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:record-type :atom} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}}, :record-type :one-of}, {:name "M", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"with_state expand 2 2"
{{:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "M", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"with_state expand 2 5"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FieldValue", :record-type :var} {:record-type :nonvar}, {:name "Tail", :record-type :var} {:record-type :any}}
{}
"with_state expand_puts 6 0"
{{:name "_450", :record-type :var} {:record-type :any}, {:name "_444", :record-type :var} {:record-type :any}, {:name "_448", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{}
"with_state expand_puts 6 1"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "M", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"with_state expand_puts 6 2"
{{:name "RecOut", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Field", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "RecTmp", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:record-type :atom} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}}, :record-type :one-of}}
{}
"with_state mod_state 3 0"
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_3998", :record-type :var} {:record-type :any}}
{}
"with_state mk_put_term 6 0"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "RecOut", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "RecIn", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"with_state expand_gets 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"with_state expand_gets 5 1"
{{:name "Field", :record-type :var} {:record-type :any}, {:name "Rec", :record-type :var} {:record-type :any}, {:name "Constructor", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:arglist #{{:record-type :atom} {:functor ",", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}, :record-type :one-of}, {:name "Pair", :record-type :var} {:record-type :nonvar}, {:name "M", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"with_state goal_expansion 2 0"
{{:name "In", :record-type :var} {:arglist #{{:functor "run_state", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "gets", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "get", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "mod_state", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "put", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "puts", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"with_state list_to_conj 2 0"
{}
{}
"with_state list_to_conj 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"with_state list_to_conj 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"with_state run_state 3 0"
{{:name "_4002", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}, {:name "_3998", :record-type :var} {:record-type :any}}
{}
"with_state --> 2 0"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"with_state --> 2 1"
{{:name "S0", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"with_state put 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"with_state puts 4 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:54:54.143: Step 0"
"2019-05-13T10:55:00.381: Step 1"
"2019-05-13T10:55:06.585: Step 2"
"tokenize untokenize 2 0"
{{:name "Tokens", :record-type :var} {:record-type :any}, {:name "Untokens", :record-type :var} {:record-type :any}}
{}
"tokenize codes_to_lower 2 0"
{}
{}
"tokenize codes_to_lower 2 1"
{{:name "Lowers", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Uppers", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "U", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"tokenize tokenize_file 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 7"
{{:name "S0", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 20"
{}
{}
"tokenize --> 2 27"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 1"
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 24"
{{:name "F", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 55"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 39"
{}
{}
"tokenize --> 2 46"
{{:name "C", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 4"
{{:name "DCG", :record-type :var} {:record-type :any}, {:name "Selection", :record-type :var} {:record-type :any}, {:name "Text0", :record-type :var} {:record-type :any}, {:name "DCG_Selection", :record-type :var} {:record-type :any}, {:name "Text1", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Opt_Selection", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 54"
{{:name "P", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 15"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 48"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 50"
{}
{}
"tokenize --> 2 21"
{{:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 31"
{{:name "W", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 32"
{{:name "W", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 40"
{}
{}
"tokenize --> 2 33"
{{:name "W", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 13"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 22"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 36"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 41"
{{:name "W", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 43"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 29"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 44"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 6"
{{:name "DCG", :record-type :var} {:record-type :any}, {:name "Text0", :record-type :var} {:record-type :any}, {:name "Text1", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 28"
{{:name "NewCount", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 51"
{}
{}
"tokenize --> 2 25"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 34"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 17"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "T0", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 3"
{{:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opt_DCG", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 12"
{}
{}
"tokenize --> 2 2"
{}
{}
"tokenize --> 2 23"
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 47"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tokenize --> 2 35"
{{:name "P", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 19"
{{:name "CodeTokens", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 11"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Tokenized", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 9"
{}
{}
"tokenize --> 2 5"
{{:name "_410", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Opt", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 14"
{}
{}
"tokenize --> 2 45"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 53"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 26"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Total", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 16"
{}
{}
"tokenize --> 2 38"
{}
{}
"tokenize --> 2 30"
{{:name "Ts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 10"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Str", :record-type :var} {:record-type :any}, {:name "LowerStr", :record-type :var} {:record-type :any}, {:name "LowerCodes", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 18"
{}
{}
"tokenize --> 2 52"
{{:name "_392", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 42"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 37"
{{:name "O", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 8"
{{:name "S0", :record-type :var} {:record-type :any}, {:name "S1", :record-type :var} {:record-type :any}}
{}
"tokenize --> 2 49"
{}
{}
"tokenize inverse 3 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"tokenize tokenize 3 0"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"tokenize untokenize 3 0"
{{:name "TokenCodes", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}, {:name "Untokens", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}}
{}
"tokenize eos 2 0"
{}
{}
"tokenize token_to 3 0"
{{:name "Converted", :record-type :var} {:record-type :nonvar}, {:name "Token", :record-type :var} {:record-type :nonvar}, {:name "Conversion", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"tokenize call_into_term 3 0"
{{:name "ResultArg", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :nonvar}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"tokenize tokenize_file 3 0"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"tokenize tokenize 2 0"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"tokenize pad 3 0"
{{:name "T_Args", :record-type :var} {:record-type :nonvar}, {:name "T_X_Args", :record-type :var} {:record-type :nonvar}, {:name "X", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:13.160: Step 0"
"2019-05-13T10:55:13.161: Step 1"
"lam_mpi mpi_msg_size 2 0"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Buf", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:13.368: Step 0"
"2019-05-13T10:55:13.838: Step 1"
"format_spec format_error 2 0"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{}
"format_spec format_error 2 1"
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{}
"format_spec format_error 2 2"
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}}
{}
"format_spec types_error_ 3 0"
{{:name "_400", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_440", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :ground}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "_Location", :record-type :var} {:record-type :any}}
{}
"format_spec types_error_ 3 1"
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_438", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"format_spec action_types 2 0"
{}
{}
"format_spec action_types 2 7"
{}
{}
"format_spec action_types 2 20"
{}
{}
"format_spec action_types 2 1"
{}
{}
"format_spec action_types 2 24"
{}
{}
"format_spec action_types 2 4"
{}
{}
"format_spec action_types 2 15"
{}
{}
"format_spec action_types 2 21"
{}
{}
"format_spec action_types 2 13"
{}
{}
"format_spec action_types 2 22"
{}
{}
"format_spec action_types 2 6"
{}
{}
"format_spec action_types 2 25"
{}
{}
"format_spec action_types 2 17"
{}
{}
"format_spec action_types 2 3"
{}
{}
"format_spec action_types 2 12"
{}
{}
"format_spec action_types 2 2"
{}
{}
"format_spec action_types 2 23"
{}
{}
"format_spec action_types 2 19"
{}
{}
"format_spec action_types 2 11"
{}
{}
"format_spec action_types 2 9"
{}
{}
"format_spec action_types 2 5"
{}
{}
"format_spec action_types 2 14"
{}
{}
"format_spec action_types 2 16"
{}
{}
"format_spec action_types 2 10"
{}
{}
"format_spec action_types 2 18"
{}
{}
"format_spec action_types 2 8"
{}
{}
"format_spec spec_arity 2 0"
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"format_spec format_error_ 3 0"
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"format_spec format_error_ 3 1"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "_4000", :record-type :var} {:record-type :any}}
{}
"format_spec spec_types 2 0"
{{:name "Spec", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}}
{}
"format_spec text_codes 2 0"
{{:name "Var", :record-type :var} {:record-type :var}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"format_spec text_codes 2 1"
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{}
"format_spec text_codes 2 3"
{{:name "Codes", :record-type :var} {:record-type :any}}
{}
"format_spec text_codes 2 2"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 7"
{{:name "_426", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}, {:name "Numeric", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 1"
{}
{}
"format_spec --> 2 4"
{}
{}
"format_spec --> 2 15"
{}
{}
"format_spec --> 2 13"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 6"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 17"
{}
{}
"format_spec --> 2 3"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"format_spec --> 2 12"
{{:name "Action", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 2"
{{:name "Action", :record-type :var} {:record-type :any}, {:name "Modifier", :record-type :var} {:record-type :any}, {:name "Numeric", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"format_spec --> 2 19"
{{:name "Action", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 11"
{}
{}
"format_spec --> 2 9"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 5"
{{:name "Item", :record-type :var} {:record-type :any}, {:name "Items", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"format_spec --> 2 14"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"format_spec --> 2 16"
{}
{}
"format_spec --> 2 10"
{}
{}
"format_spec --> 2 18"
{}
{}
"format_spec --> 2 8"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"format_spec format_spec 2 0"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"format_spec types_error 3 0"
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ArgsLen", :record-type :var} {:record-type :integer}, {:name "TypesLen", :record-type :var} {:record-type :integer}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}}
{}
"format_spec types_error 3 1"
{{:name "Types", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Error", :record-type :var} {:record-type :any}}
{}
"format_spec check_format 3 0"
{{:name "Goal", :record-type :var} {:arglist #{{:functor "debug", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "format", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "format", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Source", :record-type :var} {:record-type :any}, {:name "_Caller", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{}
"format_spec check_format 3 1"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"format_spec is_action 1 0"
{{:name "Action", :record-type :var} {:record-type :integer}, {:name "_430", :record-type :var} {:type {:record-type :atom}, :record-type :list}}
{}
"format_spec checker 2 0"
{}
{}
"format_spec checker 0 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :any}, {:name "Location", :record-type :var} {:record-type :any}}
{}
"format_spec checker 0 1"
{}
{}
"format_spec can_check 1 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "_484", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:14.596: Step 0"
"2019-05-13T10:55:15.206: Step 1"
"2019-05-13T10:55:15.810: Step 2"
"mididcg text_type_code 2 0"
{}
{}
"mididcg text_type_code 2 1"
{}
{}
"mididcg text_type_code 2 4"
{}
{}
"mididcg text_type_code 2 6"
{}
{}
"mididcg text_type_code 2 3"
{}
{}
"mididcg text_type_code 2 2"
{}
{}
"mididcg text_type_code 2 5"
{}
{}
"mididcg --> 2 0"
{{:name "B1", :record-type :var} {:record-type :any}, {:name "B2", :record-type :var} {:record-type :any}, {:name "B0", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 7"
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "MSB", :record-type :var} {:record-type :any}, {:name "LSB", :record-type :var} {:record-type :any}, {:name "Instr", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 1"
{{:name "Sharps", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 4"
{{:name "NN", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 6"
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "MSB", :record-type :var} {:record-type :any}, {:name "LSB", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 3"
{{:name "NN", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 2"
{{:name "Sharps", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 9"
{{:name "Ch", :record-type :var} {:record-type :any}, {:name "Vol", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 5"
{{:name "Prog", :record-type :var} {:record-type :any}, {:name "Ch", :record-type :var} {:record-type :any}}
{}
"mididcg --> 2 8"
{{:name "Ch", :record-type :var} {:record-type :any}, {:name "Pan", :record-type :var} {:record-type :any}}
{}
"genmidi gm 1 0"
{{:name "_4046", :record-type :var} {:record-type :any}, {:name "_4048", :record-type :var} {:record-type :integer}, {:name "_4050", :record-type :var} {:record-type :integer}, {:name "Instr", :record-type :var} {:arglist #{{:functor "/", :arglist ({:record-type :atom} {:record-type :integer}), :record-type :compound} {:record-type :atom} {:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "/", :arglist ({:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :integer}), :record-type :compound}}, :record-type :one-of}}
{}
"genmidi gm 4 0"
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "LSB", :record-type :var} {:record-type :integer}, {:name "Instr", :record-type :var} {:arglist #{{:functor "/", :arglist ({:record-type :atom} {:record-type :integer}), :record-type :compound} {:record-type :atom} {:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:functor "/", :arglist ({:functor "/", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :integer}), :record-type :compound}}, :record-type :one-of}}
{}
"genmidi gm 4 1"
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "Type", :record-type :var} {:record-type :atom}}
{}
"genmidi gm 4 2"
{{:name "P0", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :integer}, {:name "Type", :record-type :var} {:record-type :atom}}
{}
"genmidi primo 3 0"
{}
{}
"genmidi primo 3 121"
{}
{}
"genmidi primo 3 65"
{}
{}
"genmidi primo 3 70"
{}
{}
"genmidi primo 3 62"
{}
{}
"genmidi primo 3 74"
{}
{}
"genmidi primo 3 110"
{}
{}
"genmidi primo 3 130"
{}
{}
"genmidi primo 3 128"
{}
{}
"genmidi primo 3 153"
{}
{}
"genmidi primo 3 7"
{}
{}
"genmidi primo 3 59"
{}
{}
"genmidi primo 3 86"
{}
{}
"genmidi primo 3 154"
{}
{}
"genmidi primo 3 20"
{}
{}
"genmidi primo 3 72"
{}
{}
"genmidi primo 3 58"
{}
{}
"genmidi primo 3 60"
{}
{}
"genmidi primo 3 27"
{}
{}
"genmidi primo 3 1"
{}
{}
"genmidi primo 3 69"
{}
{}
"genmidi primo 3 101"
{}
{}
"genmidi primo 3 24"
{}
{}
"genmidi primo 3 102"
{}
{}
"genmidi primo 3 135"
{}
{}
"genmidi primo 3 55"
{}
{}
"genmidi primo 3 85"
{}
{}
"genmidi primo 3 39"
{}
{}
"genmidi primo 3 88"
{}
{}
"genmidi primo 3 46"
{}
{}
"genmidi primo 3 149"
{}
{}
"genmidi primo 3 157"
{}
{}
"genmidi primo 3 4"
{}
{}
"genmidi primo 3 77"
{}
{}
"genmidi primo 3 106"
{}
{}
"genmidi primo 3 119"
{}
{}
"genmidi primo 3 95"
{}
{}
"genmidi primo 3 144"
{}
{}
"genmidi primo 3 54"
{}
{}
"genmidi primo 3 92"
{}
{}
"genmidi primo 3 141"
{}
{}
"genmidi primo 3 137"
{}
{}
"genmidi primo 3 104"
{}
{}
"genmidi primo 3 15"
{}
{}
"genmidi primo 3 48"
{}
{}
"genmidi primo 3 50"
{}
{}
"genmidi primo 3 116"
{}
{}
"genmidi primo 3 75"
{}
{}
"genmidi primo 3 99"
{}
{}
"genmidi primo 3 21"
{}
{}
"genmidi primo 3 31"
{}
{}
"genmidi primo 3 113"
{}
{}
"genmidi primo 3 32"
{}
{}
"genmidi primo 3 136"
{}
{}
"genmidi primo 3 139"
{}
{}
"genmidi primo 3 40"
{}
{}
"genmidi primo 3 129"
{}
{}
"genmidi primo 3 91"
{}
{}
"genmidi primo 3 117"
{}
{}
"genmidi primo 3 108"
{}
{}
"genmidi primo 3 156"
{}
{}
"genmidi primo 3 56"
{}
{}
"genmidi primo 3 33"
{}
{}
"genmidi primo 3 13"
{}
{}
"genmidi primo 3 22"
{}
{}
"genmidi primo 3 90"
{}
{}
"genmidi primo 3 109"
{}
{}
"genmidi primo 3 143"
{}
{}
"genmidi primo 3 36"
{}
{}
"genmidi primo 3 41"
{}
{}
"genmidi primo 3 118"
{}
{}
"genmidi primo 3 150"
{}
{}
"genmidi primo 3 89"
{}
{}
"genmidi primo 3 100"
{}
{}
"genmidi primo 3 131"
{}
{}
"genmidi primo 3 122"
{}
{}
"genmidi primo 3 43"
{}
{}
"genmidi primo 3 61"
{}
{}
"genmidi primo 3 29"
{}
{}
"genmidi primo 3 151"
{}
{}
"genmidi primo 3 44"
{}
{}
"genmidi primo 3 93"
{}
{}
"genmidi primo 3 6"
{}
{}
"genmidi primo 3 111"
{}
{}
"genmidi primo 3 28"
{}
{}
"genmidi primo 3 134"
{}
{}
"genmidi primo 3 64"
{}
{}
"genmidi primo 3 155"
{}
{}
"genmidi primo 3 103"
{}
{}
"genmidi primo 3 51"
{}
{}
"genmidi primo 3 25"
{}
{}
"genmidi primo 3 34"
{}
{}
"genmidi primo 3 146"
{}
{}
"genmidi primo 3 125"
{}
{}
"genmidi primo 3 148"
{}
{}
"genmidi primo 3 17"
{}
{}
"genmidi primo 3 3"
{}
{}
"genmidi primo 3 12"
{}
{}
"genmidi primo 3 152"
{}
{}
"genmidi primo 3 2"
{}
{}
"genmidi primo 3 66"
{}
{}
"genmidi primo 3 142"
{}
{}
"genmidi primo 3 107"
{}
{}
"genmidi primo 3 23"
{}
{}
"genmidi primo 3 47"
{}
{}
"genmidi primo 3 35"
{}
{}
"genmidi primo 3 127"
{}
{}
"genmidi primo 3 82"
{}
{}
"genmidi primo 3 76"
{}
{}
"genmidi primo 3 97"
{}
{}
"genmidi primo 3 19"
{}
{}
"genmidi primo 3 57"
{}
{}
"genmidi primo 3 68"
{}
{}
"genmidi primo 3 11"
{}
{}
"genmidi primo 3 115"
{}
{}
"genmidi primo 3 9"
{}
{}
"genmidi primo 3 145"
{}
{}
"genmidi primo 3 5"
{}
{}
"genmidi primo 3 112"
{}
{}
"genmidi primo 3 83"
{}
{}
"genmidi primo 3 138"
{}
{}
"genmidi primo 3 14"
{}
{}
"genmidi primo 3 45"
{}
{}
"genmidi primo 3 53"
{}
{}
"genmidi primo 3 78"
{}
{}
"genmidi primo 3 132"
{}
{}
"genmidi primo 3 26"
{}
{}
"genmidi primo 3 123"
{}
{}
"genmidi primo 3 140"
{}
{}
"genmidi primo 3 16"
{}
{}
"genmidi primo 3 133"
{}
{}
"genmidi primo 3 81"
{}
{}
"genmidi primo 3 120"
{}
{}
"genmidi primo 3 79"
{}
{}
"genmidi primo 3 38"
{}
{}
"genmidi primo 3 126"
{}
{}
"genmidi primo 3 98"
{}
{}
"genmidi primo 3 124"
{}
{}
"genmidi primo 3 87"
{}
{}
"genmidi primo 3 30"
{}
{}
"genmidi primo 3 73"
{}
{}
"genmidi primo 3 96"
{}
{}
"genmidi primo 3 10"
{}
{}
"genmidi primo 3 18"
{}
{}
"genmidi primo 3 105"
{}
{}
"genmidi primo 3 52"
{}
{}
"genmidi primo 3 114"
{}
{}
"genmidi primo 3 147"
{}
{}
"genmidi primo 3 67"
{}
{}
"genmidi primo 3 71"
{}
{}
"genmidi primo 3 42"
{}
{}
"genmidi primo 3 80"
{}
{}
"genmidi primo 3 37"
{}
{}
"genmidi primo 3 63"
{}
{}
"genmidi primo 3 94"
{}
{}
"genmidi primo 3 8"
{}
{}
"genmidi primo 3 49"
{}
{}
"genmidi primo 3 84"
{}
{}
"genmidi seco 2 0"
{}
{}
"genmidi seco 2 7"
{}
{}
"genmidi seco 2 1"
{}
{}
"genmidi seco 2 4"
{}
{}
"genmidi seco 2 6"
{}
{}
"genmidi seco 2 3"
{}
{}
"genmidi seco 2 2"
{}
{}
"genmidi seco 2 9"
{}
{}
"genmidi seco 2 5"
{}
{}
"genmidi seco 2 10"
{}
{}
"genmidi seco 2 8"
{}
{}
"genmidi perc 2 0"
{}
{}
"genmidi perc 2 7"
{}
{}
"genmidi perc 2 20"
{}
{}
"genmidi perc 2 27"
{}
{}
"genmidi perc 2 1"
{}
{}
"genmidi perc 2 24"
{}
{}
"genmidi perc 2 39"
{}
{}
"genmidi perc 2 46"
{}
{}
"genmidi perc 2 4"
{}
{}
"genmidi perc 2 15"
{}
{}
"genmidi perc 2 21"
{}
{}
"genmidi perc 2 31"
{}
{}
"genmidi perc 2 32"
{}
{}
"genmidi perc 2 40"
{}
{}
"genmidi perc 2 33"
{}
{}
"genmidi perc 2 13"
{}
{}
"genmidi perc 2 22"
{}
{}
"genmidi perc 2 36"
{}
{}
"genmidi perc 2 41"
{}
{}
"genmidi perc 2 43"
{}
{}
"genmidi perc 2 29"
{}
{}
"genmidi perc 2 44"
{}
{}
"genmidi perc 2 6"
{}
{}
"genmidi perc 2 28"
{}
{}
"genmidi perc 2 25"
{}
{}
"genmidi perc 2 34"
{}
{}
"genmidi perc 2 17"
{}
{}
"genmidi perc 2 3"
{}
{}
"genmidi perc 2 12"
{}
{}
"genmidi perc 2 2"
{}
{}
"genmidi perc 2 23"
{}
{}
"genmidi perc 2 35"
{}
{}
"genmidi perc 2 19"
{}
{}
"genmidi perc 2 11"
{}
{}
"genmidi perc 2 9"
{}
{}
"genmidi perc 2 5"
{}
{}
"genmidi perc 2 14"
{}
{}
"genmidi perc 2 45"
{}
{}
"genmidi perc 2 26"
{}
{}
"genmidi perc 2 16"
{}
{}
"genmidi perc 2 38"
{}
{}
"genmidi perc 2 30"
{}
{}
"genmidi perc 2 10"
{}
{}
"genmidi perc 2 18"
{}
{}
"genmidi perc 2 42"
{}
{}
"genmidi perc 2 37"
{}
{}
"genmidi perc 2 8"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:16.621: Step 0"
"2019-05-13T10:55:16.807: Step 1"
"2019-05-13T10:55:17.003: Step 2"
"edcgs list_to_comma_structure 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcgs list_to_comma_structure 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"edcgs add_variable_to_atoms 3 0"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"edcgs add_variable_to_atoms 3 1"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"edcgs expansion_mode 1 0"
{{:name "Mode", :record-type :var} {:record-type :any}}
{}
"edcgs expansion_mode 1 1"
{}
{}
"edcgs edcg_formula_to_dcg_formula 3 0"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"edcgs edcg_formula_to_dcg_formula 3 7"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"edcgs edcg_formula_to_dcg_formula 3 1"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "_4062", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_4060", :record-type :var} {:record-type :any}}
{}
"edcgs edcg_formula_to_dcg_formula 3 4"
{{:name "R1s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Last", :record-type :var} {:record-type :empty-list}, {:name "_4050", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "_4052", :record-type :var} {:record-type :any}, {:name "R0s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R1s_", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X1", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "R0s_", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcgs edcg_formula_to_dcg_formula 3 6"
{{:name "X2", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "SingleNonTerminal", :record-type :var} {:record-type :any}}
{}
"edcgs edcg_formula_to_dcg_formula 3 3"
{{:name "X2", :record-type :var} {:functor ",", :arglist ({:record-type :atom} {:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :atom}}
{}
"edcgs edcg_formula_to_dcg_formula 3 2"
{{:name "X2", :record-type :var} {:functor "{}", :arglist ({:functor ",", :arglist ({:record-type :any} {:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "{}", :arglist ({:record-type :any}), :record-type :compound}}
{}
"edcgs edcg_formula_to_dcg_formula 3 5"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "Xsn2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vs", :record-type :var} {:record-type :any}}
{}
"edcgs apply_sequence 2 0"
{{:name "DCGBodyList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :nonvar}, {:name "PredicateName", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 1"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 4"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 6"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 3"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 2"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs sequence 5 5"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs list_to_semicolon_structure 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcgs list_to_semicolon_structure 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"edcgs add_variable_to_atom 3 0"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcgs add_variable_to_atom 3 1"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "As2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "As1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"edcgs split_tuple 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"edcgs add_variable_binding 4 0"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X2n", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}, {:name "Bind", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"edcgs call_sequence_ground 6 0"
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{}
"edcgs call_sequence_ground 6 1"
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{}
"edcgs $edcg_append 4 0"
{{:name "Zs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcgs comma_structure_to_list 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs comma_structure_to_list 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"edcgs edcg_formula_to_dcg_formula_ 3 0"
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}}
{}
"edcgs semicolon_structure_to_list 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"edcgs semicolon_structure_to_list 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"edcgs conj_body 4 0"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "*", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"edcgs conj_body 4 1"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "?", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"edcgs conj_body 4 3"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}}
{}
"edcgs conj_body 4 2"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_484", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor "call_sequence_ground", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:17.986: Step 0"
"2019-05-13T10:55:24.746: Step 1"
"jwt_io get_jti 1 0"
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Generator", :record-type :var} {:record-type :any}}
{}
"jwt_io not_after_now 1 0"
{{:name "NowTolerated", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Tolerance", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Epoch", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"jwt_io jwt_exp_valid 1 0"
{{:name "Payload", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_iat_valid 1 0"
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "Iat", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:head {:head {:name "Payload", :record-type :var}, :tail {:term "iat", :record-type :atom}, :record-type :list}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Iat", :record-type :var}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:term "iat", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:head {:name "Payload", :record-type :var}, :tail {:term "iat", :record-type :atom}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Iat", :record-type :var}, :tail {:head {:head {:name "Payload", :record-type :var}, :tail {:term "iat", :record-type :atom}, :record-type :list}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Iat", :record-type :var}, :tail {:head {:value 0, :record-type :integer}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:name "Iat", :record-type :var} {:reason "No valid intersection", :record-type :error}}
"jwt_io get_key_file 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "KeyStr", :record-type :var} {:record-type :any}}
{}
"jwt_io get_kid 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"jwt_io get_kid 3 1"
{{:name "_412", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyResult", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:term "kid", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"jwt_io get_kid 3 2"
{{:name "_410", :record-type :var} {:record-type :any}, {:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "KeyDict", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_jti_valid 1 0"
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "MaxInt", :record-type :var} {:record-type :any}, {:name "BlacklistAdd", :record-type :var} {:record-type :any}, {:name "BlacklistCheck", :record-type :var} {:record-type :any}}
{}
"jwt_io check_blacklist_default 1 0"
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"jwt_io check_blacklist_default 1 1"
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_decode 3 0"
{{:name "PayloadDict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "KeyDict", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}, {:name "_3098", :record-type :var} {:record-type :any}, {:name "PayloadFirst", :record-type :var} {:record-type :any}}
{{:term "kid", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"jwt_io not_before_now 1 0"
{{:name "NowTolerated", :record-type :var} {:record-type :number}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Tolerance", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Epoch", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"jwt_io read_key_file 2 0"
{{:name "Key", :record-type :var} {:record-type :any}}
{{:term "HMAC", :record-type :atom} {:reason "No valid intersection of Atom and List(Any)", :record-type :error}, {:head {:head {:name "Key", :record-type :var}, :tail {:term "type", :record-type :atom}, :record-type :list}, :tail {:head {:term "HMAC", :record-type :atom}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:term "type", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:head {:term "HMAC", :record-type :atom}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Key", :record-type :var}, :tail {:term "type", :record-type :atom}, :record-type :list} {:reason "No valid intersection of Atom and List(Any)", :record-type :error}}
"jwt_io jwt_decode_from_string 3 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:term "type", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:term "algorithm", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:term "public_key", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"jwt_io jwt_decode_from_string 3 1"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:term "algorithm", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"jwt_io jwt_iss_valid 2 0"
{{:name "_394", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_iss_valid 2 1"
{{:name "IssPayload", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Iss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Payload", :record-type :var} {:record-type :any}}
{{:functor "get", :arglist ({:term "iss", :record-type :atom}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(get(Atom))", :record-type :error}}
"jwt_io get_key_from_settings 2 0"
{{:name "Keys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Key", :record-type :var} {:record-type :any}, {:name "Kid", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_nbf_valid 1 0"
{{:name "Payload", :record-type :var} {:record-type :any}}
{}
"jwt_io jwt_aud_valid 2 0"
{{:name "Payload", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{}
"jwt_io add_to_blacklist_default 2 0"
{{:name "Jti", :record-type :var} {:record-type :any}, {:name "Exp", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:31.885: Step 0"
"2019-05-13T10:55:36.516: Step 1"
"2019-05-13T10:55:44.067: Step 2"
"plosc osc_add_handler 4 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"plosc osc_time_ts 2 0"
{{:name "Time", :record-type :var} {:record-type :any}, {:name "Secs", :record-type :var} {:record-type :any}, {:name "Fracs", :record-type :var} {:record-type :any}}
{}
"plosc osc_now 1 0"
{{:name "Secs", :record-type :var} {:record-type :any}, {:name "Fracs", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 0"
{{:name "Port", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 1"
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 4"
{{:name "_464", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 6"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "S", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 3"
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 2"
{{:name "S", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"testosc osc 1 5"
{{:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_478", :record-type :var} {:record-type :any}}
{}
"testosc echo 4 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Time", :record-type :var} {:record-type :any}, {:name "Sender", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{}
"testosc run 1 0"
{{:name "Port", :record-type :var} {:record-type :any}}
{}
"plosc osc_add_handler_x 4 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"testosc sched_at 2 0"
{{:name "_564", :record-type :var} {:record-type :any}, {:name "Now", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Delay", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Time", :record-type :var} {:record-type :number}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "Addr", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{}
"plosc osc_send_from 5 0"
{{:name "Targ", :record-type :var} {:record-type :any}, {:name "Time", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Srv", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :number}}
{}
"plosc osc_send 4 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "T1", :record-type :var} {:record-type :number}, {:name "B", :record-type :var} {:record-type :any}}
{}
"testosc forward 2 0"
{{:name "_524", :record-type :var} {:record-type :any}, {:name "Host", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "Addr", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{}
"plosc osc_send 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"testosc echo 2 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}}
{}
"testosc ack 2 0"
{{:name "_3986", :record-type :var} {:record-type :any}, {:name "_3988", :record-type :var} {:record-type :any}}
{}
"plosc message 3 0"
{{:name "Num", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{}
"plosc osc_del_handler 3 0"
{{:name "Ref", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:52.340: Step 0"
"2019-05-13T10:55:55.900: Step 1"
"semantria eq_dash 2 0"
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"semantria now 1 0"
{{:name "T", :record-type :var} {:record-type :number}, {:name "Tfloat", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"semantria --> 2 0"
{}
{}
"semantria --> 2 1"
{}
{}
"semantria --> 2 4"
{}
{}
"semantria --> 2 3"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"semantria --> 2 2"
{}
{}
"semantria ssl_verify 5 0"
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
{}
"semantria process_document 2 0"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Document", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"semantria poll_document 3 0"
{{:name "Tries0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :number}, {:name "_788", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"semantria failable_exception 1 0"
{{:name "E", :record-type :var} {:record-type :any}}
{}
"semantria uri_encode 2 0"
{{:name "Encoded", :record-type :var} {:record-type :atom}, {:name "Value", :record-type :var} {:record-type :any}, {:name "E0", :record-type :var} {:record-type :atom}, {:name "E1", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "E2", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{}
"semantria nonce 1 0"
{{:name "Nonce", :record-type :var} {:record-type :any}}
{}
"semantria process_document_ 4 0"
{{:name "_6494", :record-type :var} {:record-type :any}, {:name "_6674", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :any}, {:name "_6678", :record-type :var} {:record-type :any}, {:name "Response0", :record-type :var} {:record-type :any}, {:name "_6684", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{{:term "status", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"semantria process_document_ 4 1"
{{:name "Response", :record-type :var} {:record-type :any}, {:name "Tries", :record-type :var} {:record-type :any}, {:name "Document", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"semantria json_pair 2 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Value0", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"semantria request_document 2 0"
{{:name "Id", :record-type :var} {:record-type :any}, {:name "Response", :record-type :var} {:record-type :any}}
{}
"semantria request_open 4 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Auth", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"semantria request_open 4 1"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Json", :record-type :var} {:record-type :any}, {:name "Pairs0", :record-type :var} {:record-type :any}, {:name "Auth", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"semantria api_base 1 0"
{}
{}
"semantria document_id 2 0"
{{:name "_5290", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :ground}}
{}
"semantria document_id 2 1"
{{:name "Document", :record-type :var} {:record-type :any}, {:name "IdLong", :record-type :var} {:record-type :atom}, {:name "_5490", :record-type :var} {:record-type :integer}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HashBytes", :record-type :var} {:record-type :any}, {:name "IdShort", :record-type :var} {:record-type :atom}}
{}
"semantria json_to_dict 2 0"
{{:name "DashPairs", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "EqPairs", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}}
{}
"semantria json_to_dict 2 1"
{{:name "Term", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:55:59.833: Step 0"
"2019-05-13T10:56:08.099: Step 1"
"2019-05-13T10:56:18.838: Step 2"
"fld fld_template 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"fld fld_fields 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Vals", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fields", :record-type :var} {:record-type :any}}
{}
"fld fld_add_default 3 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Field", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"fld obj 4 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "Len", :record-type :var} {:record-type :integer}}
{}
"fld flds_set 3 0"
{{:name "O", :record-type :var} {:record-type :any}}
{}
"fld flds_set 3 1"
{{:name "New", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Newer", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"fld fld_object 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:record-type :any}}
{}
"fld fld_object 2 1"
{{:name "_518", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}}
{}
"fld fld_set_arg 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{}
"fld fld_set_arg 4 1"
{{:name "Nt", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N1", :record-type :var} {:record-type :number}, {:name "Val", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"fld fld_set_arg 4 2"
{{:name "Nt", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Val", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"fld fld_field_object 3 0"
{{:name "Field", :record-type :var} {:record-type :nonvar}, {:name "Value", :record-type :var} {:record-type :any}, {:name "FldName", :record-type :var} {:record-type :any}}
{}
"fld fld_arg 3 0"
{{:name "_412", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Val", :record-type :var} {:record-type :any}}
{}
"fld fld_arg 3 1"
{{:name "N1", :record-type :var} {:record-type :number}, {:name "Val", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"fld fld_destroy 1 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{}
"fld fld_destroy 1 1"
{{:name "_732", :record-type :var} {:record-type :any}, {:name "NewObj", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "_814", :record-type :var} {:record-type :any}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObj", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "_668", :record-type :var} {:record-type :any}}
{}
"fld generate_flds 4 0"
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{}
"fld generate_flds 4 1"
{{:name "Len", :record-type :var} {:record-type :integer}, {:name "Obj", :record-type :var} {:record-type :nonvar}, {:name "NewObj", :record-type :var} {:record-type :nonvar}, {:name "NewObjFlds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObjFlds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SetObj", :record-type :var} {:record-type :nonvar}, {:name "F", :record-type :var} {:record-type :any}, {:name "Fld", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "X", :record-type :var} {:record-type :any}, {:name "N1", :record-type :var} {:record-type :number}, {:name "Flds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"fld flds 2 0"
{{:name "_3988", :record-type :var} {:record-type :any}}
{}
"fld flds 2 1"
{{:name "F", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"fld fld_template 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:56:30.562: Step 0"
"2019-05-13T10:56:30.626: Step 1"
"lambda_abstractions :- 10 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}, {:name "V7", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V8", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 9 0"
{{:name "V7", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 3 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 4 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 2 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 8 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V6", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions lambda 3 0"
{{:name "H", :record-type :var} {:record-type :any}, {:name "Globalscopy", :record-type :var} {:record-type :any}, {:name "Hcopy", :record-type :var} {:record-type :any}, {:name "Bcopy", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Globals", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 7 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V5", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 6 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "V4", :record-type :var} {:record-type :any}}
{}
"lambda_abstractions :- 5 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:56:31.277: Step 0"
"2019-05-13T10:56:36.644: Step 1"
"index_util materialize_index 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util materialize_indexes_to_path 2 0"
{{:name "Terms", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util materialize_index_to_file 3 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util predicate_ixname 3 0"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}}
{}
"index_util materialize_goal_to_file 2 0"
{{:name "IO", :record-type :var} {:type {:arglist #{{:functor "eof_action", :arglist ({:arglist #{{:value "eof_code", :record-type :exact} {:value "error", :record-type :exact} {:value "reset", :record-type :exact}}, :record-type :one-of}), :record-type :compound} {:functor "alias", :arglist ({:record-type :atom}), :record-type :compound} {:functor "encoding", :arglist ({:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list}, {:name "F", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "G", :record-type :var} {:record-type :any}}
{}
"index_util reorder_args 4 0"
{{:name "IxVar", :record-type :var} {:record-type :any}, {:name "L2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ix", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Args2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"index_util materialize_goals_to_file 2 0"
{{:name "IO", :record-type :var} {:type {:arglist #{{:functor "eof_action", :arglist ({:arglist #{{:value "eof_code", :record-type :exact} {:value "error", :record-type :exact} {:value "reset", :record-type :exact}}, :record-type :one-of}), :record-type :compound} {:functor "alias", :arglist ({:record-type :atom}), :record-type :compound} {:functor "encoding", :arglist ({:record-type :atom}), :record-type :compound}}, :record-type :one-of}, :record-type :list}, {:name "Gs", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "G", :record-type :var} {:record-type :any}}
{}
"index_util materialize_indexes_to_file 3 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Opts2", :record-type :var} {:record-type :any}}
{}
"index_util materialize_indexes_to_file 3 1"
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util materialize_indexes_to_file 3 2"
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom} {:record-type :string}}, :record-type :one-of}, {:name "Terms", :record-type :var} {:record-type :any}, {:name "IO", :record-type :var} {:record-type :ground}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util load_factfile 1 0"
{{:name "PlFile", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "QlfFile", :record-type :var} {:record-type :any}, {:name "_Ext", :record-type :var} {:record-type :any}}
{}
"index_util rewrite_goal_with_index_list 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"index_util rewrite_goal_with_index_list 4 1"
{{:name "Ix2", :record-type :var} {:record-type :number}, {:name "M", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CalledGoal", :record-type :var} {:record-type :any}}
{}
"index_util materialize_index_to_file 2 0"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"index_util rewrite_goal_with_index 4 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Ix", :record-type :var} {:record-type :any}, {:name "CalledGoal", :record-type :var} {:record-type :any}}
{}
"index_util rewrite_goal_with_index 4 1"
{{:name "_9374", :record-type :var} {:record-type :any}, {:name "_9368", :record-type :var} {:record-type :any}, {:name "_9372", :record-type :var} {:record-type :any}, {:name "_9370", :record-type :var} {:record-type :any}}
{}
"index_util materialize_index_to_stream 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "IO", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Pred", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"index_util materialize_index_to_stream 2 1"
{{:name "IO", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Pred", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"index_util materialize_indexes_to_file 2 0"
{{:name "Terms", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"index_util materialize_index_to_path 2 0"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "FileName", :record-type :var} {:record-type :atom}, {:name "_442", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DirAbs", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :atom}, {:name "AbsFilePath", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"index_util materialize_index 1 0"
{{:name "Mod", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"index_util materialize_index 1 1"
{{:name "Term", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}}
{}
"index_util predicate_storedname 3 0"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"index_util predicate_storedname 3 1"
{{:name "N1", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "N2", :record-type :var} {:record-type :any}}
{}
"index_util assert_unique 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :ground}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:56:42.476: Step 0"
"2019-05-13T10:56:42.580: Step 1"
"turing turing 4 0"
{{:name "TapeOut", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ls", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TapeIn", :record-type :var} {:record-type :any}, {:name "Config", :record-type :var} {:record-type :any}, {:name "Rules", :record-type :var} {:record-type :any}, {:name "_4118", :record-type :var} {:record-type :any}, {:name "_4120", :record-type :var} {:record-type :any}, {:name "_4116", :record-type :var} {:record-type :any}, {:name "_4114", :record-type :var} {:record-type :any}, {:name "IS", :record-type :var} {:record-type :any}, {:name "Ls1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"turing symbol 4 0"
{{:name "B", :record-type :var} {:record-type :any}}
{}
"turing symbol 4 1"
{{:name "Sym", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_452", :record-type :var} {:record-type :any}}
{}
"turing right 5 0"
{{:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"turing right 5 1"
{{:name "_494", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}}
{}
"turing action 4 0"
{{:name "Rout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"turing action 4 1"
{{:name "Tape", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{}
"turing action 4 2"
{{:name "Rout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lin", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lout", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"turing perform 5 0"
{{:name "TapeOut", :record-type :var} {:record-type :any}, {:name "RS", :record-type :var} {:record-type :any}, {:name "TapeIn", :record-type :var} {:record-type :any}, {:name "Config", :record-type :var} {:record-type :any}, {:name "Rules", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Symbols", :record-type :var} {:record-type :any}, {:name "FS", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}}
{}
"turing left 5 0"
{{:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "B", :record-type :var} {:record-type :any}}
{}
"turing left 5 1"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_494", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}}
{}
"turing default_config 5 0"
{{:name "Blank", :record-type :var} {:record-type :atom}, {:name "RStates", :record-type :var} {:arglist ({:record-type :atom}), :record-type :tuple}, {:name "IState", :record-type :var} {:record-type :atom}, {:name "Symbols", :record-type :var} {:arglist ({:record-type :atom} {:record-type :integer} {:record-type :integer}), :record-type :tuple}, {:name "FStates", :record-type :var} {:arglist ({:record-type :atom}), :record-type :tuple}}
{}
"turing rule 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"turing license 3 0"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:56:43.285: Step 0"
"2019-05-13T10:56:43.349: Step 1"
"func_issue_11 unique 2 0"
{{:name "XX", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"func function_composition_term 1 0"
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_414", :record-type :var} {:record-type :any}}
{}
"func_issue_11 len 2 0"
{{:name "X", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"func functions_to_compose 2 0"
{{:name "Funcs", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :atom}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"func thread_state 4 0"
{{:name "Out", :record-type :var} {:record-type :any}}
{}
"func thread_state 4 1"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Funcs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Goals", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tmp", :record-type :var} {:record-type :any}}
{}
"func function_expansion 3 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"func function_expansion 3 1"
{{:name "Term", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "MGoal", :record-type :var} {:record-type :any}, {:name "Output", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "MTerm", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"func $ 2 0"
{{:name "_396", :record-type :var} {:record-type :any}, {:name "_590", :record-type :var} {:record-type :any}, {:name "_394", :record-type :var} {:record-type :any}}
{}
"func compile_function 4 0"
{{:name "_4016", :record-type :var} {:record-type :any}, {:name "_4014", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :var}, {:name "_4012", :record-type :var} {:record-type :any}}
{}
"func compile_function 4 1"
{{:name "In", :record-type :var} {:record-type :var}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Expr", :record-type :var} {:record-type :any}}
{}
"func compile_function 4 4"
{{:name "Goal", :record-type :var} {:functor "get_dict", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "In", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"func compile_function 4 3"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"func compile_function 4 2"
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "In", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:functor "of", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Out", :record-type :var} {:record-type :any}}
{}
"func format_template 1 0"
{{:name "Format", :record-type :var} {:record-type :atom}, {:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}}
{}
"func format_template 1 1"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"func format_template 1 2"
{{:name "Format", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"func wants_func 0 0"
{{:name "_4132", :record-type :var} {:record-type :any}, {:name "_4130", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"func of 2 0"
{{:name "_394", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:56:43.882: Step 0"
"2019-05-13T10:56:50.446: Step 1"
"2019-05-13T10:56:56.510: Step 2"
"miser forget 2 0"
{{:name "Predicate", :record-type :var} {:record-type :any}, {:name "Implementation", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
"miser_sort verify 1 0"
{{:name "_4136", :record-type :var} {:record-type :any}, {:name "Sorter", :record-type :var} {:record-type :any}}
{}
"miser implementation_cost 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "TotalCost", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "AvgCost", :record-type :var} {:record-type :number}, {:name "Count", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Cost", :record-type :var} {:record-type :any}}
{}
"miser random_implementation 2 0"
{{:name "Predicate", :record-type :var} {:record-type :any}, {:name "Chosen", :record-type :var} {:record-type :any}, {:name "Choices", :record-type :var} {:record-type :any}}
{}
"miser qualify 3 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser_sort divide 3 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Target", :record-type :var} {:record-type :number}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"miser_sort divide_loop 5 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:record-type :any}}
{}
"miser_sort divide_loop 5 1"
{{:name "N1", :record-type :var} {:record-type :number}, {:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Accum", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"miser_sort quick_sort 2 0"
{}
{}
"miser_sort quick_sort 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"miser_sort quick_sort 2 2"
{{:name "Left", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pivot", :record-type :var} {:record-type :any}, {:name "LeftSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "RightSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"miser measure_cost 3 0"
{{:name "Arguments", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Cost", :record-type :var} {:record-type :number}, {:name "Before", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "After", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Implementation", :record-type :var} {:record-type :any}}
{}
"miser_sort lucky 1 0"
{}
{}
"miser_sort lucky 1 1"
{{:name "X", :record-type :var} {:record-type :number}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:functor "random", :arglist ({:value 100, :record-type :integer}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "random", :arglist ({:value 100, :record-type :integer}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"miser_sort is_sorted 1 0"
{}
{}
"miser_sort is_sorted 1 1"
{{:name "_398", :record-type :var} {:record-type :any}}
{}
"miser_sort is_sorted 1 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"miser_sort merge_sort 2 0"
{}
{}
"miser_sort merge_sort 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"miser_sort merge_sort 2 2"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Left0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"miser measure_one 2 0"
{{:name "Arguments", :record-type :var} {:record-type :any}, {:name "Chosen", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser quniv 3 0"
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"miser quniv 3 1"
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"miser_sort verify_work 1 0"
{{:name "Sorter", :record-type :var} {:record-type :any}, {:name "MaxLen", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"miser trim_implementations 1 0"
{{:name "MostCostly", :record-type :var} {:record-type :any}, {:name "ObservationCount", :record-type :var} {:record-type :integer}, {:name "Keepers", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser trim_implementations 1 1"
{{:name "_382", :record-type :var} {:record-type :any}}
{}
"miser remove_implementation 3 0"
{{:name "_630", :record-type :var} {:record-type :any}, {:name "Leftover", :record-type :var} {:record-type :any}, {:name "Choices", :record-type :var} {:record-type :any}, {:name "Needle", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser_sort random_list 2 0"
{{:name "MaxLen", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:head {:functor "random", :arglist ({:name "MaxLen", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "random", :arglist ({:name "MaxLen", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"miser rename_term 3 0"
{{:name "_454", :record-type :var} {:record-type :any}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "NewName", :record-type :var} {:record-type :any}}
{}
"miser --> 2 0"
{{:name "Chosen", :record-type :var} {:record-type :any}}
{}
"miser --> 2 1"
{{:name "Cost", :record-type :var} {:record-type :any}}
{}
"miser --> 2 3"
{{:name "Winner", :record-type :var} {:record-type :any}}
{}
"miser --> 2 2"
{{:name "Loser", :record-type :var} {:record-type :any}}
{}
"miser_sort verify 0 0"
{{:name "Sorters", :record-type :var} {:arglist ({:record-type :atom} {:record-type :atom} {:record-type :atom} {:record-type :atom}), :record-type :tuple}, {:name "Sorter", :record-type :var} {:record-type :any}}
{}
"miser most_costly_implementation 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "MostCostly", :record-type :var} {:record-type :any}, {:name "_704", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_672", :record-type :var} {:record-type :any}, {:name "AscendingCost", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "Costs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort 2 0"
{}
{}
"miser_sort tiny_sort 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort 2 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "BC", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "AB", :record-type :var} {:record-type :atom}, {:name "AC", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser observation_count 2 0"
{{:name "Names", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Count", :record-type :var} {:record-type :integer}, {:name "_488", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 1"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 4"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 2"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser_sort tiny_sort_table 7 5"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"miser miserly 2 0"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Sym", :record-type :var} {:record-type :any}, {:name "Base", :record-type :var} {:record-type :any}, {:name "Implementations", :record-type :var} {:record-type :any}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Term0", :record-type :var} {:record-type :nonvar}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:functor "/", :arglist ({:record-type :atomic} {:record-type :integer}), :record-type :compound}), :record-type :compound}}
{}
"miser observe 3 0"
{{:name "Cost", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}, {:name "Implementation", :record-type :var} {:record-type :any}}
{}
"miser_sort permutation_sort 2 0"
{{:name "Sorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"miser_sort merge 3 0"
{{:name "Ys", :record-type :var} {:record-type :any}}
{}
"miser_sort merge 3 1"
{{:name "Xs", :record-type :var} {:record-type :any}}
{}
"miser_sort merge 3 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Smaller", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:03.067: Step 0"
"2019-05-13T10:57:03.197: Step 1"
"2019-05-13T10:57:03.341: Step 2"
"tap_raw diag 2 0"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"tap_raw diag 2 1"
{{:name "_394", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}}
{}
"tap term_expansion 2 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "TestCount", :record-type :var} {:record-type :integer}, {:name "_1112", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Tests0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :integer} {:record-type :integer}), :record-type :compound}, {:name "State", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "Tests2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tests1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap term_expansion 2 1"
{{:name "_458", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "_416", :record-type :var} {:record-type :any}}
{}
"tap term_expansion 2 2"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "_568", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}}
{}
"tap_raw run_test 4 0"
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{}
"tap_raw run_test 4 1"
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{}
"tap_raw run_test 4 3"
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{}
"tap_raw run_test 4 2"
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Reason", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:record-type :any}, {:name "Todo", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}}
{}
"tap_raw tap_call 3 0"
{{:name "State0", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}, {:name "Expectation", :record-type :var} {:arglist #{{:functor "throws", :arglist ({:record-type :any}), :record-type :compound} {:functor "todo", :arglist ({:record-type :any}), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "Options0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap_raw tap_header 1 0"
{{:name "TestCount", :record-type :var} {:record-type :any}}
{}
"tap_raw test_result 4 0"
{{:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_510", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Test", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"tap xfy_list 3 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"tap xfy_list 3 1"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"tap_raw tap_footer 2 0"
{{:name "TestCount", :record-type :var} {:record-type :any}, {:name "_4016", :record-type :var} {:record-type :any}, {:name "PassedCount", :record-type :var} {:record-type :any}}
{}
"tap_raw test_expectation 3 0"
{}
{}
"tap_raw test_expectation 3 1"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap_raw test_expectation 3 4"
{{:name "Reason", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap_raw test_expectation 3 6"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:record-type :any}}
{}
"tap_raw test_expectation 3 3"
{{:name "Reason", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap_raw test_expectation 3 2"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"tap_raw test_expectation 3 5"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "E", :record-type :var} {:record-type :any}}
{}
"tap_raw tap_state 1 0"
{}
{}
"tap term_wants_tap_expansion 0 0"
{}
{}
"tap register_test 1 0"
{{:name "Head", :record-type :var} {:record-type :any}}
{}
"tap_raw test_expectation 2 0"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_398", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"tap thread_state 4 0"
{{:name "Out", :record-type :var} {:record-type :any}}
{}
"tap thread_state 4 1"
{{:name "P", :record-type :var} {:record-type :nonvar}, {:name "Preds0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Functor", :record-type :var} {:record-type :any}, {:name "Preds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :nonvar}, {:name "NewArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Tmp", :record-type :var} {:record-type :any}}
{}
"tap_raw test_result 5 0"
{{:name "Passed", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "Status", :record-type :var} {:record-type :any}, {:name "Passed0", :record-type :var} {:record-type :any}, {:name "State0", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Test", :record-type :var} {:record-type :nonvar}, {:name "Count", :record-type :var} {:record-type :any}, {:name "Count0", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"tap_raw call_ending 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Cleanup", :record-type :var} {:record-type :any}, {:name "Ending", :record-type :var} {:record-type :any}, {:name "Exception", :record-type :var} {:record-type :nonvar}}
{}
"tap_raw call_ending 2 1"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"tap_raw tap_call 1 0"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "State", :record-type :var} {:functor "state", :arglist ({:record-type :integer} {:record-type :integer}), :record-type :compound}, {:name "_478", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:03.612: Step 0"
"2019-05-13T10:57:03.714: Step 1"
"2019-05-13T10:57:03.836: Step 2"
"by_unix cd 1 0"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "_572", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :nonvar}}
{}
"by_unix cd 1 1"
{{:name "Dir", :record-type :var} {:record-type :ground}, {:name "TermLoc", :record-type :var} {:record-type :any}, {:name "Loc", :record-type :var} {:record-type :any}, {:name "_646", :record-type :var} {:record-type :any}}
{}
"by_unix cd 1 3"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "_586", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "_T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"by_unix cd 1 2"
{{:name "Atom", :record-type :var} {:record-type :atom}, {:name "_474", :record-type :var} {:record-type :any}}
{}
"by_unix by_unix_version 2 0"
{}
{}
"by_unix @@ 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_4254", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TArgs", :record-type :var} {:record-type :any}}
{}
"by_unix @@ 2 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "All", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"by_unix @ 1 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "TArgs", :record-type :var} {:record-type :any}}
{}
"by_unix pc_option 1 0"
{{:name "OptNames", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Name", :record-type :var} {:record-type :atom}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"by_unix unix_process 4 0"
{{:name "Garg", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Cd", :record-type :var} {:record-type :atom}, {:name "_Arg", :record-type :var} {:record-type :any}}
{}
"by_unix unix_process 4 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "_Goal", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"by_unix to_list 2 0"
{{:name "Serial", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"by_unix to_list 2 1"
{{:name "Serial", :record-type :var} {:record-type :any}}
{}
"by_unix by_unix_separate 4 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "NesTArgs", :record-type :var} {:record-type :any}, {:name "GArgs", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "_Wch", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "TArgs", :record-type :var} {:record-type :any}}
{}
"by_unix cd 2 0"
{{:name "Old", :record-type :var} {:record-type :any}, {:name "New", :record-type :var} {:record-type :any}}
{}
"by_unix read_lines 2 0"
{{:name "Out", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Line1", :record-type :var} {:arglist #{{:type {:record-type :integer}, :record-type :list} {:record-type :atom}}, :record-type :one-of}}
{}
"by_unix read_lines 3 0"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"by_unix read_lines 3 1"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Line", :record-type :var} {:record-type :atom}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Line2", :record-type :var} {:arglist #{{:type {:record-type :integer}, :record-type :list} {:record-type :atom}}, :record-type :one-of}}
{}
"by_unix by_unix_assert 0 0"
{{:name "Body", :record-type :var} {:functor ",", :arglist ({:functor ";", :arglist ({:functor "->", :arglist ({:functor "atomic", :arglist ({:record-type :any}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "compound_name_arity", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ",", :arglist ({:functor "which", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "=", :arglist ({:record-type :any} {:functor "@", :arglist ({:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Term2", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "goal_expansion", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "_Arity", :record-type :var} {:record-type :any}, {:name "_778", :record-type :var} {:record-type :any}, {:name "Term1", :record-type :var} {:record-type :any}, {:name "UnixCom", :record-type :var} {:record-type :any}}
{}
"by_unix by_unix_retract 0 0"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "goal_expansion", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"by_unix known_pc_options 1 0"
{}
{}
"by_unix @@ 3 0"
{{:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Serials", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arg", :record-type :var} {:record-type :any}, {:name "All", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Serial", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"by_unix compound 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"by_unix compound 3 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"by_unix by_unix_term_to_serial 2 0"
{{:name "Files", :record-type :var} {:record-type :any}}
{}
"by_unix by_unix_term_to_serial 2 1"
{{:name "Atom", :record-type :var} {:record-type :atomic}, {:name "Files", :record-type :var} {:record-type :any}}
{}
"by_unix by_unix_term_to_serial 2 2"
{{:name "Serial", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"by_unix which 2 0"
{{:name "Which", :record-type :var} {:record-type :atom}, {:name "This", :record-type :var} {:record-type :atom}}
{}
"by_unix which 2 1"
{{:name "Which", :record-type :var} {:record-type :any}, {:name "This", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:04.609: Step 0"
"2019-05-13T10:57:04.793: Step 1"
"pl_omdb omdb_call 4 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_call 4 1"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_search 3 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"pl_omdb omdb_fetch_dict 3 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{}
"omdb_query encode_atom 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"omdb_query set_default 2 0"
{{:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "OptionType", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_fetch 3 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"pl_omdb get_key 0 0"
{{:name "Key", :record-type :var} {:record-type :atom}, {:name "_500", :record-type :var} {:record-type :atom}, {:name "KeyLine", :record-type :var} {:record-type :atom}, {:name "Path0", :record-type :var} {:record-type :atom}, {:name "Path", :record-type :var} {:record-type :atom}}
{}
"pl_omdb omdb_api 1 0"
{}
{}
"pl_omdb omdb_connect 2 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_call 3 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_call 3 1"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}}
{}
"pl_omdb make_connection 3 0"
{{:name "API", :record-type :var} {:record-type :atom}, {:name "Request0", :record-type :var} {:record-type :any}, {:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_search_results 4 0"
{{:name "NumResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ApiKey", :record-type :var} {:record-type :any}, {:name "SearchResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "OneResult", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:term "Search", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:term "totalResults", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"omdb_query --> 2 0"
{}
{}
"omdb_query --> 2 7"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 1"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 4"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 15"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 13"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 6"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 3"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 12"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 2"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 11"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 9"
{}
{}
"omdb_query --> 2 5"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 14"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 10"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query --> 2 8"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"pl_omdb omdb_search_dict 3 0"
{{:name "ApiKey", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Dict", :record-type :var} {:record-type :any}}
{}
"omdb_query retrieval_option_set 1 0"
{{:name "_4446", :record-type :var} {:record-type :any}, {:name "_4506", :record-type :var} {:record-type :any}, {:name "_4866", :record-type :var} {:record-type :any}, {:name "_4686", :record-type :var} {:record-type :any}, {:name "_4806", :record-type :var} {:record-type :any}, {:name "_4626", :record-type :var} {:record-type :any}, {:name "_4746", :record-type :var} {:record-type :any}, {:name "_4566", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_fetch_dict 2 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{}
"omdb_query search_option_set 1 0"
{{:name "_412", :record-type :var} {:record-type :any}, {:name "_472", :record-type :var} {:record-type :any}, {:name "_532", :record-type :var} {:record-type :any}, {:name "_652", :record-type :var} {:record-type :any}, {:name "_592", :record-type :var} {:record-type :any}, {:name "_712", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_search_results 3 0"
{{:name "NumResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SearchResults", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "OneResult", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:term "Search", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}, {:term "totalResults", :record-type :atom} {:reason "No valid intersection of List(Any) and Atom", :record-type :error}}
"omdb_query search_query 2 0"
{{:name "Query", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"pl_omdb omdb_search_dict 2 0"
{{:name "Dict", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}}
{}
"omdb_query pretreat_params 3 0"
{{:name "SetType", :record-type :var} {:record-type :atom}, {:name "Union", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "OptionType", :record-type :var} {:record-type :atom}}
{}
"pl_omdb omdb_poster_api 1 0"
{}
{}
"pl_omdb omdb_search 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"pl_omdb test 1 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "_Value", :record-type :var} {:record-type :any}}
{}
"pl_omdb test 1 1"
{{:name "_NumResults", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}, {:name "_Value", :record-type :var} {:record-type :any}}
{}
"omdb_query option_set 3 0"
{{:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}}
{}
"omdb_query option_set 3 1"
{{:name "Set", :record-type :var} {:type {:functor "=", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound}, :record-type :list}}
{}
"pl_omdb omdb_fetch 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dict", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"omdb_query retrieval_query 2 0"
{{:name "Query", :record-type :var} {:record-type :any}, {:name "Treated", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:05.428: Step 0"
"2019-05-13T10:57:05.488: Step 1"
"2019-05-13T10:57:05.540: Step 2"
"mavis bodyless_predicate 1 0"
{{:name "_686", :record-type :var} {:record-type :any}, {:name "_688", :record-type :var} {:record-type :any}, {:name "_554", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_556", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"mavis shared_value 3 0"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "Subtype", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis module_wants_mavis 1 0"
{{:name "_4106", :record-type :var} {:record-type :any}, {:name "_4104", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"mavis read_mode_declaration 2 0"
{{:name "Mode", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:arglist ({:functor "module", :arglist ({:record-type :atom}), :record-type :compound} {:functor "variable_names", :arglist ({:record-type :any}), :record-type :compound}), :record-type :tuple}, {:name "ModeCodes", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{}
"mavis the 2 0"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis counter_example 3 0"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "Subtype", :record-type :var} {:record-type :any}, {:name "Example", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis has_intersection 2 0"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Intersection", :record-type :var} {:record-type :any}}
{}
"mavis has_intersection 2 1"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Intersection", :record-type :var} {:record-type :any}}
{}
"mavis has_intersection 2 2"
{{:name "_638", :record-type :var} {:record-type :any}, {:name "Subtype", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis term_expansion 2 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Slash", :record-type :var} {:record-type :atom}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "TypeGoal", :record-type :var} {:record-type :any}}
{}
"mavis term_expansion 2 1"
{{:name "Slash", :record-type :var} {:record-type :atom}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "TypeGoal", :record-type :var} {:record-type :any}}
{}
"mavis term_expansion 2 2"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "Slash", :record-type :var} {:record-type :atom}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "TypeGoal", :record-type :var} {:record-type :any}}
{}
"mavis mode_declaration 2 0"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "_4808", :record-type :var} {:record-type :any}, {:name "Prefixes", :record-type :var} {:record-type :any}, {:name "_4870", :record-type :var} {:record-type :any}, {:name "ModeCodes", :record-type :var} {:record-type :any}, {:name "Lines", :record-type :var} {:record-type :any}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "_5020", :record-type :var} {:record-type :any}}
{}
"mavis known_type 1 0"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "_Ref", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "_Body", :record-type :var} {:record-type :any}}
{}
"mavis build_type_assertions 3 0"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Slash", :record-type :var} {:record-type :any}, {:name "ModeText", :record-type :var} {:record-type :any}, {:name "_836", :record-type :var} {:record-type :any}, {:name "Comment", :record-type :var} {:record-type :any}, {:name "_Determinism", :record-type :var} {:record-type :any}, {:name "ModeArgs", :record-type :var} {:record-type :any}, {:name "_1148", :record-type :var} {:record-type :any}, {:name "RawMode", :record-type :var} {:record-type :any}, {:name "_834", :record-type :var} {:record-type :any}, {:name "AllTypes", :record-type :var} {:record-type :any}, {:name "Types", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atomic}, {:name "TypeGoal", :record-type :var} {:record-type :any}, {:name "Indicator", :record-type :var} {:record-type :nonvar}, {:name "Module", :record-type :var} {:record-type :any}, {:name "HeadArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"mavis normalize_mode 3 0"
{{:name "RawArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Slash", :record-type :var} {:record-type :any}, {:name "_956", :record-type :var} {:record-type :any}, {:name "Mode2", :record-type :var} {:record-type :nonvar}, {:name "Mode0", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Det", :record-type :var} {:record-type :any}, {:name "_1014", :record-type :var} {:record-type :any}}
{}
"mavis has_subtype 2 0"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Subtype", :record-type :var} {:record-type :any}}
{}
"mavis has_subtype 2 1"
{{:name "Type", :record-type :var} {:record-type :any}, {:name "Subtype", :record-type :var} {:record-type :any}}
{}
"mavis has_subtype 2 2"
{{:name "Subtype", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "_644", :record-type :var} {:record-type :any}}
{}
"mavis type_declaration 3 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_438", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis normalize_args 2 0"
{{:name "X0", :record-type :var} {:record-type :any}, {:name "Mode", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"mavis has_type 2 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:06.589: Step 0"
"2019-05-13T10:57:07.610: Step 1"
"race_ape prove_with_answers 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Theorem", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"race_ape check_consistency 3 0"
{{:name "Variant", :record-type :var} {:record-type :any}, {:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "_4186", :record-type :var} {:record-type :any}}
{}
"sentence get_substitutions 3 0"
{{:name "Entities", :record-type :var} {:record-type :any}, {:name "Entities_Without_Substitutions_R", :record-type :var} {:record-type :any}, {:name "Entities_Without_Substitutions", :record-type :var} {:record-type :any}, {:name "Substitutions_R", :record-type :var} {:record-type :any}, {:name "Substitutions", :record-type :var} {:record-type :any}}
{}
"sentence generate_answer 2 0"
{{:name "EWS_Fragment", :record-type :var} {:record-type :any}, {:name "Entities", :record-type :var} {:record-type :any}, {:name "EWS_Fragments", :record-type :var} {:record-type :any}, {:name "Entities_Without_Substitutions", :record-type :var} {:record-type :any}, {:name "Substitutions", :record-type :var} {:record-type :any}, {:name "Substitutions_Fragment", :record-type :var} {:record-type :any}, {:name "Answer", :record-type :var} {:record-type :any}}
{}
"sentence generate_answer 2 1"
{{:name "Entities", :record-type :var} {:record-type :any}, {:name "Fragments", :record-type :var} {:record-type :any}, {:name "Answer", :record-type :var} {:record-type :any}}
{}
"race_ape ask_with_answers 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"race check_consistency 2 0"
{{:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
{{:head {:name "Operation", :record-type :var}, :tail {:head {:head {:functor "=", :arglist ({:term "Axioms", :record-type :atom} {:name "Knowledge", :record-type :var}), :record-type :compound}, :tail {:head {:functor "=", :arglist ({:term "Mode", :record-type :atom} {:term "check_consistency", :record-type :atom}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :tail {:head {:head {:name "ReplyDOM", :record-type :var}, :tail {:record-type :empty-list}, :record-type :list}, :tail {:head {:head {:term "dom", :record-type :atom}, :tail {:record-type :empty-list}, :record-type :list}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor ":", :arglist ({:name "A__160429", :record-type :var} {:name "A__160430", :record-type :var}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:head {:name "Operation", :record-type :var}, :tail {:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
"race ask_with_answers 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"race get_inconsistencies 2 0"
{{:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "_704", :record-type :var} {:record-type :any}, {:name "FirstMessage", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "Result", :record-type :var} {:functor "error", :arglist ({:record-type :atom}), :record-type :compound}, {:name "Elements", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_626", :record-type :var} {:record-type :any}, {:name "Subject", :record-type :var} {:record-type :atom}, {:name "_530", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}}
{}
"race get_inconsistencies 2 1"
{{:name "_550", :record-type :var} {:record-type :any}, {:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "_548", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Axioms", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"sentence substitutions_fragment 2 0"
{}
{}
"sentence substitutions_fragment 2 1"
{{:name "Substitutions", :record-type :var} {:record-type :any}, {:name "JoinedFragments", :record-type :var} {:record-type :any}, {:name "Fragments", :record-type :var} {:record-type :any}}
{}
"race prove 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Theorem", :record-type :var} {:record-type :any}}
{}
"race_ape replace_possible_var 2 0"
{{:name "Codes", :record-type :var} {:arglist ({:record-type :integer}), :record-type :tuple}, {:name "Variant", :record-type :var} {:record-type :atom}, {:name "C", :record-type :var} {:record-type :integer}, {:name "Cn", :record-type :var} {:record-type :integer}, {:name "Token", :record-type :var} {:record-type :atom}}
{}
"race_ape replace_possible_var 2 1"
{{:name "Token", :record-type :var} {:record-type :any}}
{}
"race prove 4 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Theorem", :record-type :var} {:record-type :any}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
{{:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor ":", :arglist ({:name "A__160593", :record-type :var} {:name "A__160594", :record-type :var}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:head {:name "Operation", :record-type :var}, :tail {:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Operation", :record-type :var}, :tail {:head {:head {:functor "=", :arglist ({:term "Axioms", :record-type :atom} {:name "Knowledge", :record-type :var}), :record-type :compound}, :tail {:head {:functor "=", :arglist ({:term "Mode", :record-type :atom} {:term "prove", :record-type :atom}), :record-type :compound}, :tail {:head {:functor "=", :arglist ({:term "Theorems", :record-type :atom} {:name "Theorem", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :record-type :list}, :tail {:head {:name "ReplyDOM", :record-type :var}, :tail {:head {:head {:term "dom", :record-type :atom}, :tail {:record-type :empty-list}, :record-type :list}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
"race soap_call 4 0"
{{:name "OutputElements", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}, {:name "InputElements", :record-type :var} {:arglist ({:functor "arg", :arglist ({:record-type :any} {:functor "element", :arglist ({:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :tuple}, {:name "ContentType", :record-type :var} {:record-type :any}, {:name "SoapOptions", :record-type :var} {:record-type :any}, {:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "InputElement", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Operation", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "URL", :record-type :var} {:record-type :any}, {:name "InputContentDOM", :record-type :var} {:record-type :any}, {:name "Input", :record-type :var} {:record-type :any}, {:name "InputContentDOM0", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Version", :record-type :var} {:record-type :any}, {:name "ReplyContentType", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "InputDOM", :record-type :var} {:functor "element", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:record-type :empty-list} {:arglist ({:functor "element", :arglist ({:functor ":", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound} {:record-type :empty-list} {:arglist ({:record-type :any}), :record-type :tuple}), :record-type :compound}), :record-type :tuple}), :record-type :compound}, {:name "SoapPrefix", :record-type :var} {:record-type :any}, {:name "Action", :record-type :var} {:record-type :any}, {:name "_Name", :record-type :var} {:record-type :any}}
{}
"race proof_list 2 0"
{{:name "ProofDOMs", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"race prove_with_answers 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Theorem", :record-type :var} {:record-type :any}}
{}
"util join 3 0"
{{:name "Ls", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "Ls1", :record-type :var} {:record-type :any}, {:name "Ls2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Glue", :record-type :var} {:record-type :any}}
{}
"util string_list_concat 2 0"
{}
{}
"util string_list_concat 2 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ss", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sentence get_only 4 0"
{{:name "NonSelected", :record-type :var} {:record-type :any}, {:name "What", :record-type :var} {:record-type :any}, {:name "Entity", :record-type :var} {:record-type :any}, {:name "Selected", :record-type :var} {:record-type :any}}
{}
"race xpath_select 3 0"
{{:name "_608", :record-type :var} {:record-type :any}, {:name "Element", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "_606", :record-type :var} {:record-type :any}, {:name "DOM", :record-type :var} {:record-type :any}, {:name "_486", :record-type :var} {:record-type :any}}
{}
"util pp 1 0"
{{:name "Term", :record-type :var} {:record-type :any}}
{}
"util join_ 3 0"
{{:name "_4004", :record-type :var} {:record-type :any}}
{}
"util join_ 3 1"
{{:name "_4020", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{}
"util join_ 3 2"
{{:name "R", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "R2", :record-type :var} {:record-type :any}, {:name "Glue", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"race ask 4 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
{{:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:name "Operation", :record-type :var}, :tail {:head {:head {:functor "=", :arglist ({:term "Axioms", :record-type :atom} {:name "Knowledge", :record-type :var}), :record-type :compound}, :tail {:head {:functor "=", :arglist ({:term "Mode", :record-type :atom} {:term "answer_query", :record-type :atom}), :record-type :compound}, :tail {:head {:functor "=", :arglist ({:term "Theorems", :record-type :atom} {:name "Question", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :record-type :list}, :tail {:head {:name "ReplyDOM", :record-type :var}, :tail {:head {:head {:term "dom", :record-type :atom}, :tail {:record-type :empty-list}, :record-type :list}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:head {:name "Operation", :record-type :var}, :tail {:head {:functor "/", :arglist ({:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RacePortType", :record-type :atom}), :record-type :compound} {:functor ":", :arglist ({:term "http://attempto.ifi.uzh.ch/race", :record-type :atom} {:term "RunRace", :record-type :atom}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:name "Operation", :record-type :var} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}, {:functor ":", :arglist ({:name "A__160724", :record-type :var} {:name "A__160725", :record-type :var}), :record-type :compound} {:reason "No valid intersection of Compound(/(Compound(:(Atom, Atom)), Compound(:(Atom, Atom)))) and Compound(:(Any, Any))", :record-type :error}}
"race_ape replace_variables 2 0"
{{:name "SentencesTokenVariant", :record-type :var} {:record-type :any}, {:name "TokenVariant", :record-type :var} {:record-type :any}, {:name "Text", :record-type :var} {:record-type :any}, {:name "SentencesVariant", :record-type :var} {:record-type :any}, {:name "Variant", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}}
{}
"sentence fragment 2 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Fragment", :record-type :var} {:record-type :any}}
{}
"sentence fragment 2 1"
{{:name "F", :record-type :var} {:record-type :any}, {:name "FragmentWithDot", :record-type :var} {:record-type :any}, {:name "Fragment", :record-type :var} {:record-type :any}}
{}
"sentence fragment 2 2"
{{:name "X", :record-type :var} {:record-type :nonvar}, {:name "_460", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fragment", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "_Type", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Eq", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 1"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 4"
{{:name "E", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 6"
{{:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 3"
{{:name "_4184", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "FactNumber", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 2"
{{:name "Verb", :record-type :var} {:record-type :any}, {:name "VerbWithS", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"axiom axiom_to_entity 2 5"
{{:name "Axiom", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}}
{}
"race proof 2 0"
{{:name "Entities", :record-type :var} {:record-type :any}, {:name "ProofDOM", :record-type :var} {:record-type :any}, {:name "_572", :record-type :var} {:record-type :any}, {:name "_570", :record-type :var} {:record-type :any}, {:name "Axioms", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"race ask 3 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}, {:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"race get_result 3 0"
{{:name "WhyNotDOM", :record-type :var} {:record-type :any}, {:name "ProofDOM", :record-type :var} {:record-type :any}, {:name "ReplyDOM", :record-type :var} {:record-type :any}, {:name "WhyNotDOMs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}, {:name "_Options", :record-type :var} {:record-type :any}, {:name "ProofDOMs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"race_ape variant 2 0"
{{:name "Cn", :record-type :var} {:record-type :any}}
{}
"race_ape variant 2 1"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cn", :record-type :var} {:record-type :any}}
{}
"race why_not_list 2 0"
{{:name "WhyNotDOM", :record-type :var} {:record-type :any}, {:name "Entities", :record-type :var} {:record-type :any}, {:name "_572", :record-type :var} {:record-type :any}, {:name "_570", :record-type :var} {:record-type :any}, {:name "Word", :record-type :var} {:record-type :any}, {:name "Words", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"race check_consistency 1 0"
{{:name "Knowledge", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:09.037: Step 0"
"2019-05-13T10:57:11.346: Step 1"
"quickcheck run_tests 5 0"
{{:name "TestCount", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Values", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Property", :record-type :var} {:record-type :any}, {:name "_2112", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Example", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"quickcheck run_tests 5 1"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"quickcheck generate_argument 2 0"
{{:name "_394", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"quickcheck shrink_argument 2 0"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "Shrunken", :record-type :var} {:record-type :any}}
{}
"quickcheck shrink_argument 2 1"
{{:name "Value", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"quickcheck shrink_example 5 0"
{{:name "Values", :record-type :var} {:record-type :any}, {:name "Property", :record-type :var} {:record-type :any}, {:name "Depth", :record-type :var} {:record-type :number}, {:name "ShrinkGoal", :record-type :var} {:record-type :nonvar}, {:name "Example", :record-type :var} {:record-type :any}, {:name "Shrunk", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Depth0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"quickcheck shrink_example 5 1"
{{:name "Depth", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "Example", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"quickcheck warn 2 0"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"quickcheck warn 2 1"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:14.702: Step 0"
"2019-05-13T10:57:14.810: Step 1"
"rdf_notification handle_message 3 0"
{{:name "Old", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "NewSubscribersDict", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Topic", :record-type :var} {:record-type :any}, {:name "Callback", :record-type :var} {:record-type :any}}
{{:functor "put", :arglist ({:name "Topic", :record-type :var} {:head {:functor "subscriber", :arglist ({:name "SubscriberId", :record-type :var} {:name "Callback", :record-type :var} {:name "Options", :record-type :var}), :record-type :compound}, :tail {:name "Old", :record-type :var}, :record-type :list}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Any, List(Any)))", :record-type :error}}
"rdf_notification handle_message 3 1"
{{:name "Old", :record-type :var} {:record-type :any}, {:name "_572", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "_574", :record-type :var} {:record-type :any}, {:name "NewSubscribersDict", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Topic", :record-type :var} {:record-type :any}}
{}
"rdf_notification handle_message 3 3"
{{:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :nonvar}}
{}
"rdf_notification handle_message 3 2"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "_412", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_subscribe 3 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Topic", :record-type :var} {:record-type :any}, {:name "Callback", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_indirect_subscribers0 6 0"
{{:name "Subjects", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_550", :record-type :var} {:record-type :any}, {:name "Seen0", :record-type :var} {:record-type :any}, {:name "Seen", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:record-type :any}, {:name "Subject", :record-type :var} {:record-type :any}, {:name "Object", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"ex5 ex5 0 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"rdf_notification select_subscriber 5 0"
{{:name "Subscribers", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:record-type :any}, {:name "_558", :record-type :var} {:record-type :any}, {:name "FromDescendant", :record-type :var} {:record-type :any}, {:name "_556", :record-type :var} {:record-type :any}, {:name "Subscriber", :record-type :var} {:functor "subscriber", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_indirect_subscribers 4 0"
{{:name "_550", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:record-type :any}, {:name "Object", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_subscribe 4 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "RestOptions1", :record-type :var} {:record-type :any}, {:name "MonitorDescendant", :record-type :var} {:record-type :any}, {:name "RestOptions2", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Topic", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}, {:name "Callback", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_event_received 1 0"
{{:name "Event", :record-type :var} {:record-type :any}}
{}
"ex1 callback 3 0"
{{:name "Subject", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"ex4 ex4 0 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"ex1 ex1 0 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_direct_subscribers0 4 0"
{{:name "DB", :record-type :var} {:record-type :any}, {:name "FromDescendant", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "Topic", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_direct_subscribers 3 0"
{{:name "EventMeta", :record-type :var} {:functor "event_meta", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"ex4 callback 3 0"
{{:name "Object", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"ex2 ex2 0 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_unsubscribe 1 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify 2 0"
{{:name "DB", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Subject", :record-type :var} {:record-type :any}, {:name "Object", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :nonvar}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"ex3 ex3 0 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}}
{}
"ex3 callback 3 0"
{{:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_indirect_subscribers1 6 0"
{{:name "Seen", :record-type :var} {:record-type :any}, {:name "_448", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{}
"rdf_notification rdf_notify_indirect_subscribers1 6 1"
{{:name "Seen0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Seen", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:record-type :any}, {:name "Seen1", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "SubscribersDict", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdf_notification rdf_notification_main 1 0"
{{:name "Subscribers", :record-type :var} {:record-type :any}, {:name "NewSubscribers", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"ex2 callback 3 0"
{{:name "Subject", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"ex5 callback 3 0"
{{:name "Object", :record-type :var} {:record-type :any}, {:name "SubscriberId", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:15.413: Step 0"
"2019-05-13T10:57:15.541: Step 1"
"2019-05-13T10:57:15.668: Step 2"
"delay mode 1 0"
{}
{}
"delay mode 1 7"
{{:name "_4028", :record-type :var} {:record-type :any}}
{}
"delay mode 1 20"
{{:name "_4030", :record-type :var} {:record-type :any}, {:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 27"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 1"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 24"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 4"
{{:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 15"
{{:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 21"
{{:name "_4028", :record-type :var} {:record-type :any}, {:name "_4030", :record-type :var} {:record-type :any}}
{}
"delay mode 1 31"
{{:name "_4028", :record-type :var} {:record-type :any}}
{}
"delay mode 1 32"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 33"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 13"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 22"
{}
{}
"delay mode 1 29"
{{:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 6"
{{:name "_4030", :record-type :var} {:record-type :any}, {:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 28"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 25"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 34"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 17"
{{:name "_4030", :record-type :var} {:record-type :any}, {:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 3"
{{:name "_4030", :record-type :var} {:record-type :any}, {:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 12"
{}
{}
"delay mode 1 2"
{{:name "_4032", :record-type :var} {:record-type :any}}
{}
"delay mode 1 23"
{}
{}
"delay mode 1 35"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 19"
{}
{}
"delay mode 1 11"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 9"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 5"
{{:name "_4030", :record-type :var} {:record-type :any}}
{}
"delay mode 1 14"
{{:name "_4016", :record-type :var} {:record-type :any}}
{}
"delay mode 1 26"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 16"
{{:name "_4028", :record-type :var} {:record-type :any}}
{}
"delay mode 1 30"
{{:name "_4030", :record-type :var} {:record-type :any}}
{}
"delay mode 1 10"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay mode 1 18"
{{:name "_4028", :record-type :var} {:record-type :any}}
{}
"delay mode 1 8"
{{:name "_4018", :record-type :var} {:record-type :any}}
{}
"delay assert_followup_clause 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "ListConditions", :record-type :var} {:record-type :any}, {:name "Guard", :record-type :var} {:record-type :any}, {:name "GuardConditions", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "ComplexConditions", :record-type :var} {:record-type :any}}
{}
"delay map_include_ 5 0"
{{:name "_434", :record-type :var} {:record-type :any}}
{}
"delay map_include_ 5 1"
{{:name "Hb", :record-type :var} {:record-type :any}, {:name "Tb", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ha", :record-type :var} {:record-type :any}, {:name "Lc0", :record-type :var} {:record-type :any}, {:name "Ld", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Ta", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ld0", :record-type :var} {:record-type :any}, {:name "Lc", :record-type :var} {:record-type :any}}
{}
"delay is_list_mode 1 0"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"delay make_condition 4 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :var}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"delay make_condition 4 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"delay make_condition 4 3"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"delay make_condition 4 2"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"delay partition_modes 4 0"
{{:name "_420", :record-type :var} {:record-type :any}}
{}
"delay partition_modes 4 1"
{{:name "ModeArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "SimpleT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Mode", :record-type :var} {:record-type :nonvar}, {:name "HeadArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ComplexT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_552", :record-type :var} {:record-type :any}, {:name "ComplexH", :record-type :var} {:record-type :any}, {:name "SimpleH", :record-type :var} {:record-type :any}, {:name "Modes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"delay univ 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"delay delay 1 0"
{{:name "Condition", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Simples", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DelayedGoal", :record-type :var} {:record-type :any}, {:name "SimpleConditions", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Module", :record-type :var} {:record-type :any}, {:name "ComplexConditions", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"delay delay 1 1"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :nonvar}}
{}
"delay xfy_list 3 0"
{{:name "Left", :record-type :var} {:record-type :any}, {:name "Right", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"delay xfy_list 3 1"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"delay map_include 5 0"
{{:name "La", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ld", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Lb", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lc", :record-type :var} {:record-type :any}}
{}
"delay goal_to_conditions 4 0"
{{:name "Name", :record-type :var} {:record-type :atomic}, {:name "Goal", :record-type :var} {:record-type :nonvar}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "HeadArgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "SimpleConditions", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Module", :record-type :var} {:record-type :any}, {:name "ComplexConditions", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Modes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"delay when_proper_list 2 0"
{{:name "List", :record-type :var} {:record-type :var}, {:name "Goal", :record-type :var} {:record-type :any}}
{}
"delay when_proper_list 2 1"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"delay when_proper_list 2 2"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:16.002: Step 0"
"2019-05-13T10:57:17.999: Step 1"
"2019-05-13T10:57:20.011: Step 2"
"lbfgs optimizer_initialize 3 0"
{{:name "Call_Evaluate", :record-type :var} {:record-type :any}, {:name "Call_Progress", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"lbfgs optimizer_initialize 4 0"
{{:name "Call_Evaluate", :record-type :var} {:record-type :any}, {:name "_E1", :record-type :var} {:record-type :any}, {:name "EvalGoal", :record-type :var} {:record-type :nonvar}, {:name "_P2", :record-type :var} {:record-type :any}, {:name "P5", :record-type :var} {:record-type :any}, {:name "_P5", :record-type :var} {:record-type :any}, {:name "_E3", :record-type :var} {:record-type :any}, {:name "P4", :record-type :var} {:record-type :any}, {:name "_P6", :record-type :var} {:record-type :any}, {:name "E3", :record-type :var} {:record-type :any}, {:name "P2", :record-type :var} {:record-type :any}, {:name "P6", :record-type :var} {:record-type :any}, {:name "P7", :record-type :var} {:record-type :any}, {:name "P8", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "_P7", :record-type :var} {:record-type :any}, {:name "P3", :record-type :var} {:record-type :any}, {:name "_P1", :record-type :var} {:record-type :any}, {:name "_P3", :record-type :var} {:record-type :any}, {:name "E2", :record-type :var} {:record-type :any}, {:name "_E2", :record-type :var} {:record-type :any}, {:name "_P4", :record-type :var} {:record-type :any}, {:name "Call_Progress", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "ProgressGoal", :record-type :var} {:record-type :nonvar}, {:name "_P8", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "E1", :record-type :var} {:record-type :any}}
{}
"lbfgs optimizer_initialize 6 0"
{{:name "Call_Evaluate", :record-type :var} {:record-type :any}, {:name "_E1", :record-type :var} {:record-type :any}, {:name "EvalGoal", :record-type :var} {:record-type :nonvar}, {:name "_P2", :record-type :var} {:record-type :any}, {:name "NP", :record-type :var} {:record-type :integer}, {:name "P5", :record-type :var} {:record-type :any}, {:name "_P5", :record-type :var} {:record-type :any}, {:name "_E3", :record-type :var} {:record-type :any}, {:name "P4", :record-type :var} {:record-type :any}, {:name "_P6", :record-type :var} {:record-type :any}, {:name "E3", :record-type :var} {:record-type :any}, {:name "P2", :record-type :var} {:record-type :any}, {:name "P6", :record-type :var} {:record-type :any}, {:name "P7", :record-type :var} {:record-type :any}, {:name "P8", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "_P7", :record-type :var} {:record-type :any}, {:name "P3", :record-type :var} {:record-type :any}, {:name "_P1", :record-type :var} {:record-type :any}, {:name "_P3", :record-type :var} {:record-type :any}, {:name "NE", :record-type :var} {:record-type :integer}, {:name "E2", :record-type :var} {:record-type :any}, {:name "ArE", :record-type :var} {:record-type :number}, {:name "_E2", :record-type :var} {:record-type :any}, {:name "_P4", :record-type :var} {:record-type :any}, {:name "Call_Progress", :record-type :var} {:record-type :any}, {:name "ArgsProg", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :integer}, {:name "ArP", :record-type :var} {:record-type :number}, {:name "ArgsEv", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ProgressGoal", :record-type :var} {:record-type :nonvar}, {:name "_P8", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "E1", :record-type :var} {:record-type :any}}
{}
"lbfgs optimizer_finalize 0 0"
{{:name "_662", :record-type :var} {:record-type :any}, {:name "_668", :record-type :var} {:record-type :any}, {:name "_472", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "_660", :record-type :var} {:record-type :any}, {:name "_664", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}, {:name "_670", :record-type :var} {:record-type :any}, {:name "_672", :record-type :var} {:record-type :any}, {:name "_666", :record-type :var} {:record-type :any}, {:name "_658", :record-type :var} {:record-type :any}}
{}
"lbfgs optimizer_parameters 0 0"
{{:name "Gtol", :record-type :var} {:record-type :any}, {:name "Orthantwise_C", :record-type :var} {:record-type :any}, {:name "Max_Step", :record-type :var} {:record-type :any}, {:name "Ftol", :record-type :var} {:record-type :any}, {:name "Orthantwise_End", :record-type :var} {:record-type :any}, {:name "Max_Iterations", :record-type :var} {:record-type :any}, {:name "Xtol", :record-type :var} {:record-type :any}, {:name "Past", :record-type :var} {:record-type :any}, {:name "Orthantwise_Start", :record-type :var} {:record-type :any}, {:name "Linesearch", :record-type :var} {:record-type :any}, {:name "Min_Step", :record-type :var} {:record-type :any}, {:name "Epsilon", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Delta", :record-type :var} {:record-type :any}, {:name "Max_Linesearch", :record-type :var} {:record-type :any}}
{}
"lbfgs print_param 4 0"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{}
"lbfgs interpret_return_value 2 0"
{}
{}
"lbfgs interpret_return_value 2 1"
{}
{}
"lbfgs interpret_return_value 2 3"
{{:name "M", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"lbfgs interpret_return_value 2 2"
{}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:22.130: Step 0"
"2019-05-13T10:57:22.261: Step 1"
"sindice si_facet 2 0"
{{:name "R", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 7"
{{:name "R", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 1"
{{:name "C", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 4"
{{:name "C", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 6"
{{:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 3"
{{:name "R", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 2"
{{:name "R", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 5"
{{:name "R", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{}
"sindice si_facet 2 8"
{{:name "R", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}}
{}
"sindice rdf_number 3 0"
{{:name "S", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Num", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 0"
{{:name "K", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 7"
{{:name "I", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 1"
{{:name "KS", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 4"
{{:name "B", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 6"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 3"
{{:name "Fields", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 2"
{{:name "Query", :record-type :var} {:record-type :any}, {:name "URI", :record-type :var} {:record-type :any}, {:name "_530", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 5"
{{:name "P", :record-type :var} {:record-type :any}}
{}
"sindice --> 2 8"
{{:name "F", :record-type :var} {:record-type :any}}
{}
"sindice si_with_graph 4 0"
{{:name "Req", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Graph", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"sindice si_with_result 5 0"
{{:name "Req", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"sindice page_result 4 0"
{{:name "Results", :record-type :var} {:record-type :any}, {:name "Last", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "I", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "_578", :record-type :var} {:record-type :any}}
{}
"sindice sindice_opt 3 0"
{}
{}
"sindice sindice_opt 3 1"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"sindice sindice_opt 3 2"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"sindice sindice_url 3 0"
{{:name "Req", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"sindice autopaged_result 6 0"
{{:name "Req", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "Progress", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"sindice rdf_call_with_graph 4 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Graph", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"sindice rdf_number 4 0"
{{:name "Num", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:22.636: Step 0"
"2019-05-13T10:57:22.671: Step 1"
"2019-05-13T10:57:22.704: Step 2"
"2019-05-13T10:57:22.739: Step 3"
"spawn spawn 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:arglist #{{:functor "lazy_thunk", :arglist ({:record-type :any}), :record-type :compound} {:functor "ephemeral_token", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Vars", :record-type :var} {:type {:record-type :var}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :number}, {:name "Opts", :record-type :var} {:record-type :any}}
{{:head {:functor "random", :arglist ({:functor "<<", :arglist ({:value 1, :record-type :integer} {:value 63, :record-type :integer}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "random", :arglist ({:functor "<<", :arglist ({:value 1, :record-type :integer} {:value 63, :record-type :integer}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"spawn lazy 1 0"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"spawn await 1 0"
{{:name "Vars", :record-type :var} {:record-type :any}, {:name "SolutionsQ", :record-type :var} {:record-type :any}, {:name "Solution", :record-type :var} {:record-type :any}}
{}
"spawn await 1 1"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"spawn ephemeral_worker 1 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "SolutionsQ", :record-type :var} {:record-type :any}, {:name "Vars", :record-type :var} {:record-type :any}}
{}
"spawn async_policy 4 0"
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Work", :record-type :var} {:functor "work", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}, {:name "SolutionsQ", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:functor "ephemeral_token", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}, {:name "Vars", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_884", :record-type :var} {:record-type :any}}
{}
"spawn async_policy 4 1"
{{:name "_Opts", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:functor "lazy_thunk", :arglist ({:record-type :any}), :record-type :compound}}
{}
"spawn spawn 1 0"
{{:name "Goal", :record-type :var} {:record-type :any}}
{}
"spawn spawn_freeze 4 0"
{{:name "Token", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"spawn async 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:arglist #{{:functor "lazy_thunk", :arglist ({:record-type :any}), :record-type :compound} {:functor "ephemeral_token", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Policy", :record-type :var} {:record-type :atom}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"spawn async 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:arglist #{{:functor "lazy_thunk", :arglist ({:record-type :any}), :record-type :compound} {:functor "ephemeral_token", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"spawn spawn_thaw 3 0"
{{:name "Id", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:23.090: Step 0"
"2019-05-13T10:57:23.296: Step 1"
"2019-05-13T10:57:23.519: Step 2"
"dcg4pt $dcg4pt_append 4 0"
{{:name "Zs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula_ 3 0"
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}}
{}
"dcg4pt add_variable_to_atom 3 0"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg4pt add_variable_to_atom 3 1"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "As2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "As1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"dcg4pt split_tuple 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dcg4pt apply_sequence 2 0"
{{:name "DCGBodyList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :nonvar}, {:name "PredicateName", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt list_to_comma_structure 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg4pt list_to_comma_structure 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"dcg4pt conj_body 4 0"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "*", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dcg4pt conj_body 4 1"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "?", :arglist ({:record-type :any}), :record-type :compound}, {:name "R1", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dcg4pt conj_body 4 3"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}}
{}
"dcg4pt conj_body 4 2"
{{:name "R0", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_484", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "DCGBody", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:functor "call_sequence_ground", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"dcg4pt_expand term_expansion 2 0"
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :nonvar}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "Rule", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"dcg4pt call_sequence_ground 6 0"
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{}
"dcg4pt call_sequence_ground 6 1"
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{}
"dcg4pt call_sequence_ground 6 2"
{{:name "R0", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DCGBody", :record-type :var} {:record-type :any}}
{}
"dcg4pt dcg4pt_rule_to_dcg_rule 2 0"
{{:name "Res", :record-type :var} {:record-type :nonvar}, {:name "Y2", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :nonvar}, {:name "_642", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "As2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "As1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"dcg4pt list_to_semicolon_structure 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg4pt list_to_semicolon_structure 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 1"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 4"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 6"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 3"
{{:name "_432", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 2"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt sequence 5 5"
{{:name "Zs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Predicate", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 0"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 7"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 1"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "_470", :record-type :var} {:record-type :any}, {:name "_468", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "sequence", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 4"
{{:name "R1s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Last", :record-type :var} {:record-type :empty-list}, {:name "X2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "R0s", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R1s_", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_460", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "R0s_", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 6"
{{:name "X2", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "SingleTerminal", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 3"
{{:name "X2", :record-type :var} {:functor ",", :arglist ({:record-type :atom} {:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :atom}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 2"
{{:name "X2", :record-type :var} {:functor "{}", :arglist ({:functor ",", :arglist ({:record-type :any} {:functor "=", :arglist ({:record-type :any} {:record-type :empty-list}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:functor "{}", :arglist ({:record-type :any}), :record-type :compound}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 5"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "Xsn2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vs", :record-type :var} {:record-type :any}}
{}
"dcg4pt dcg4pt_formula_to_dcg_formula 3 8"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"dcg4pt add_variable_to_atoms 3 0"
{{:name "X2", :record-type :var} {:record-type :nonvar}, {:name "Xs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Xs2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :nonvar}}
{}
"dcg4pt add_variable_to_atoms 3 1"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"dcg4pt --> 2 0"
{{:name "Text", :record-type :var} {:record-type :any}}
{}
"dcg4pt comma_structure_to_list 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:functor ",", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt comma_structure_to_list 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"dcg4pt add_variable_binding 4 0"
{{:name "X2", :record-type :var} {:record-type :any}, {:name "X2n", :record-type :var} {:functor ",", :arglist ({:functor "{}", :arglist ({:functor "=", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:record-type :any}), :record-type :compound}, {:name "Bind", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"dcg4pt semicolon_structure_to_list 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :nonvar}, {:name "Xs", :record-type :var} {:record-type :any}}
{}
"dcg4pt semicolon_structure_to_list 2 1"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"dcg4pt dcg4pt_rules_to_dcg_rules 0 0"
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "Rule", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:24.357: Step 0"
"2019-05-13T10:57:25.061: Step 1"
"parameters --> 2 0"
{{:name "Param", :record-type :var} {:record-type :any}}
{}
"parameters --> 2 1"
{{:name "Param", :record-type :var} {:record-type :any}}
{}
"core --> 2 0"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}}
{}
"core --> 2 7"
{{:name "Token", :record-type :var} {:record-type :any}}
{}
"core --> 2 20"
{}
{}
"core --> 2 1"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"core --> 2 24"
{}
{}
"core --> 2 4"
{{:name "Digits", :record-type :var} {:record-type :any}, {:name "Digits1", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"core --> 2 15"
{{:name "Name", :record-type :var} {:record-type :any}}
{}
"core --> 2 21"
{}
{}
"core --> 2 13"
{{:name "Text", :record-type :var} {:record-type :any}, {:name "Values", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"core --> 2 22"
{{:name "Val", :record-type :var} {:record-type :any}}
{}
"core --> 2 6"
{{:name "More", :record-type :var} {:record-type :any}, {:name "Token", :record-type :var} {:record-type :any}, {:name "Int", :record-type :var} {:record-type :any}}
{}
"core --> 2 25"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}, {:name "Params", :record-type :var} {:record-type :any}}
{}
"core --> 2 17"
{{:name "Name", :record-type :var} {:record-type :any}}
{}
"core --> 2 3"
{}
{}
"core --> 2 12"
{{:name "Text", :record-type :var} {:record-type :any}}
{}
"core --> 2 2"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"core --> 2 23"
{{:name "Params", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}}
{}
"core --> 2 19"
{}
{}
"core --> 2 11"
{{:name "Text", :record-type :var} {:record-type :any}}
{}
"core --> 2 9"
{{:name "Token", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"core --> 2 5"
{{:name "Alphas", :record-type :var} {:record-type :any}}
{}
"core --> 2 14"
{}
{}
"core --> 2 16"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Values", :record-type :var} {:record-type :any}, {:name "Val1", :record-type :var} {:record-type :any}, {:name "Vals2", :record-type :var} {:record-type :any}}
{}
"core --> 2 10"
{{:name "Text", :record-type :var} {:record-type :any}}
{}
"core --> 2 18"
{}
{}
"core --> 2 8"
{{:name "V2", :record-type :var} {:record-type :any}, {:name "V3", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"testparams test 2 0"
{}
{}
"testcore test 2 0"
{}
{}
"testcore test 2 1"
{}
{}
"testcore test 2 3"
{}
{}
"testcore test 2 2"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:26.558: Step 0"
"2019-05-13T10:57:30.479: Step 1"
"jolog_manager iterate_events 2 0"
{{:name "Outstanding", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:arglist #{{:functor "send_message", :arglist ({:record-type :any}), :record-type :compound} {:functor "active", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog start_jolog 1 0"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog_manager iterate_patterns 2 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Outstanding", :record-type :var} {:record-type :any}}
{}
"jolog_manager take_event_block 2 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "ManagerQueue", :record-type :var} {:record-type :any}}
{}
"jolog build_peek_goal 4 0"
{{:name "PeekGoal", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "clause", :arglist ({:functor "channels", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :atom} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Pattern", :record-type :var} {:record-type :any}, {:name "MessageRef", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog_manager manager_loop 1 0"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog_manager take_event_no_block 2 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Event", :record-type :var} {:record-type :any}, {:name "ManagerQueue", :record-type :var} {:record-type :any}}
{}
"jolog --> 2 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog wants_jolog_expansion 0 0"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog report_exception 3 0"
{{:name "Goal", :record-type :var} {:record-type :any}, {:name "Ex", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog worker_loop 2 0"
{{:name "Queue", :record-type :var} {:record-type :any}, {:name "Work", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog start_jolog 2 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Main", :record-type :var} {:record-type :any}}
{}
"jolog_manager manager_destroy 1 0"
{{:name "ManagerQueue", :record-type :var} {:record-type :any}, {:name "Workers", :record-type :var} {:record-type :any}, {:name "WorkQueue", :record-type :var} {:record-type :any}, {:name "_810", :record-type :var} {:record-type :any}, {:name "_910", :record-type :var} {:record-type :any}, {:name "_812", :record-type :var} {:record-type :any}, {:name "_912", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog set_meta 3 0"
{{:name "_4524", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog_manager destroy_worker 1 0"
{{:name "ThreadId", :record-type :var} {:record-type :any}}
{}
"jolog jolog_import_sentinel 0 0"
{}
{}
"jolog_manager handle_event 3 0"
{{:name "Outstanding", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Msg", :record-type :var} {:record-type :any}}
{}
"jolog_manager handle_event 3 1"
{{:name "Outstanding", :record-type :var} {:record-type :number}, {:name "Outstanding0", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Module", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"jolog_manager handle_event 3 3"
{{:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"jolog_manager handle_event 3 2"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Outstanding", :record-type :var} {:record-type :any}}
{}
"jolog create_worker 3 0"
{{:name "ThreadId", :record-type :var} {:record-type :any}, {:name "Queue", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog send 1 0"
{{:name "ManagerQueue", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Module", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :nonvar}}
{}
"jolog send 1 1"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"jolog remember_channel 2 0"
{{:name "Pattern", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :atomic}, {:name "Arity", :record-type :var} {:record-type :integer}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog spawn_process 2 0"
{{:name "ManagerQueue", :record-type :var} {:record-type :any}, {:name "WorkQueue", :record-type :var} {:record-type :any}, {:name "Process", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"jolog parse_join_clause 4 0"
{{:name "Processes", :record-type :var} {:record-type :any}, {:name "Patterns", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "BodyParts", :record-type :var} {:record-type :any}, {:name "Goals", :record-type :var} {:record-type :any}, {:name "Guards", :record-type :var} {:record-type :any}}
{}
"jolog_manager manager_loop 2 0"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "Outstanding", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:57:34.728: Step 0"
"2019-05-13T10:57:52.281: Step 1"
"2019-05-13T10:58:11.371: Step 2"
"graphpl mst_prim 3 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "TreeEdges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "SortedEdges", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "TreeEdgesUnsorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl create_edges_unweighted 1 0"
{}
{}
"graphpl create_edges_unweighted 1 1"
{{:name "_428", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl exist_path 3 0"
{{:name "_398", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"graphpl exist_path 3 1"
{{:name "E", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl is_graph_edge 2 0"
{{:name "_412", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}}
{}
"graphpl make_weighted_graph 2 0"
{{:name "_702", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "_548", :record-type :var} {:record-type :any}, {:name "VSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_706", :record-type :var} {:record-type :any}, {:name "ListOfEdges", :record-type :var} {:record-type :any}, {:name "_550", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl is_graph_node 2 0"
{{:name "LN", :record-type :var} {:record-type :any}, {:name "_414", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"graphpl node_degree 3 0"
{{:name "NY", :record-type :var} {:record-type :integer}, {:name "Edges", :record-type :var} {:record-type :any}, {:name "LN", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Deg", :record-type :var} {:record-type :number}, {:name "NX", :record-type :var} {:record-type :integer}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Node", :record-type :var} {:record-type :any}}
{}
"graphpl make_ordered_list 3 0"
{{:name "Max", :record-type :var} {:record-type :any}}
{}
"graphpl make_ordered_list 3 1"
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Max", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "I1", :record-type :var} {:record-type :number}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl make_kn 2 0"
{{:name "Comb", :record-type :var} {:record-type :any}, {:name "Size1", :record-type :var} {:record-type :number}, {:name "Size", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LV", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl create_edges_weighted 1 0"
{}
{}
"graphpl create_edges_weighted 1 1"
{{:name "_444", :record-type :var} {:record-type :any}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl get_vertices 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"graphpl get_vertices 3 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "_428", :record-type :var} {:record-type :any}}
{}
"graphpl find_all_combinations_weighted 5 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "_454", :record-type :var} {:record-type :any}, {:name "_456", :record-type :var} {:record-type :any}, {:name "_398", :record-type :var} {:record-type :any}}
{}
"graphpl find_all_combinations_weighted 5 1"
{{:name "C1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CO", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Min", :record-type :var} {:record-type :any}, {:name "Max", :record-type :var} {:record-type :any}, {:name "CT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_all_combinations 3 0"
{{:name "_398", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"graphpl find_all_combinations 3 1"
{{:name "C1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CO", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "CT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl node_degree_list_ 5 0"
{{:name "Sorted", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"graphpl node_degree_list_ 5 1"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:arglist ({:record-type :number} {:record-type :any}), :record-type :tuple}, {:name "LT1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "Deg", :record-type :var} {:record-type :number}, {:name "LV", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LT", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl cycle_unweighted 3 0"
{{:name "C", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Graph", :record-type :var} {:functor "graph", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"graphpl find_path_weighted_ 7 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"graphpl find_path_weighted_ 7 1"
{{:name "TotalC", :record-type :var} {:record-type :number}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V2", :record-type :var} {:record-type :any}, {:name "CurrC", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "V1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Cost", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Path", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_path_weighted_ 7 2"
{{:name "V1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Curr1", :record-type :var} {:record-type :number}, {:name "Cost", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "TotalC", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "CurrC", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VX", :record-type :var} {:record-type :any}}
{}
"graphpl node_degree_list 2 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "LV", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}}
{}
"graphpl cycle_weighted 4 0"
{{:name "Graph", :record-type :var} {:functor "graph", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}, {:name "Cycle", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}}
{}
"graphpl is_connected 1 0"
{{:name "LV", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:record-type :any}}
{}
"graphpl is_isolated_node 2 0"
{{:name "LN", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"graphpl find_path_unweighted 4 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V1", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"graphpl remove_duplicated_edges 2 0"
{}
{}
"graphpl remove_duplicated_edges 2 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl remove_duplicated_edges 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "TE", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl connected 3 0"
{{:name "V1", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Edges", :record-type :var} {:record-type :any}}
{}
"graphpl empty_unweighted_graph 3 0"
{{:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LN", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NumNodes", :record-type :var} {:record-type :integer}, {:name "NumEdges", :record-type :var} {:record-type :integer}}
{}
"graphpl make_kn_from_vertices 2 0"
{{:name "Comb", :record-type :var} {:record-type :any}, {:name "LV", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl empty_weighted_graph 3 0"
{{:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LN", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NumNodes", :record-type :var} {:record-type :integer}, {:name "NumEdges", :record-type :var} {:record-type :integer}}
{}
"graphpl exist_path_ 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}, {:name "_424", :record-type :var} {:record-type :any}}
{}
"graphpl exist_path_ 4 1"
{{:name "E", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "H1", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl make_undirected_weighted_graph 2 0"
{{:name "_702", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "ListOfEdgesNoDup", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_548", :record-type :var} {:record-type :any}, {:name "VSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_706", :record-type :var} {:record-type :any}, {:name "ListOfEdges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_550", :record-type :var} {:record-type :any}, {:name "ListOfEdgesSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl is_connected_to_tree 3 0"
{{:name "Ns", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"graphpl is_connected_to_tree 3 1"
{{:name "Ns", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"graphpl spanning_tree 2 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "TreeEdges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "TreeEdgesUnsorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "N", :record-type :var} {:record-type :any}}
{}
"graphpl generate_spanning_tree 3 0"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"graphpl generate_spanning_tree 3 1"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "Edge", :record-type :var} {:arglist #{{:functor "edge", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "edge", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "Curr1", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Curr", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Edges1", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Curr2", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl compare_edges_value 3 0"
{{:name "C1", :record-type :var} {:record-type :any}, {:name "Y2", :record-type :var} {:record-type :any}, {:name "X2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:arglist #{{:value "<", :record-type :exact} {:value "=", :record-type :exact} {:value ">", :record-type :exact}}, :record-type :one-of}, {:name "C2", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}}
{}
"graphpl merge_graph 3 0"
{{:name "Edges2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "EdgesT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Edges1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LT", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_combinations 3 0"
{{:name "_406", :record-type :var} {:record-type :any}}
{}
"graphpl find_combinations 3 1"
{{:name "E", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "TE", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl make_kn_weighted 4 0"
{{:name "Comb", :record-type :var} {:record-type :any}, {:name "MaxValue", :record-type :var} {:record-type :any}, {:name "Size1", :record-type :var} {:record-type :number}, {:name "MinValue", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "LV", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl reverse_edges_ 2 0"
{}
{}
"graphpl reverse_edges_ 2 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl reverse_edges_ 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_path_weighted 5 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "Vertices", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V1", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"graphpl make_unweighted_graph 2 0"
{{:name "_536", :record-type :var} {:record-type :any}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "VSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ListOfEdges", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}, {:name "_676", :record-type :var} {:record-type :any}}
{}
"graphpl find_combinations_weighted 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}}
{}
"graphpl find_combinations_weighted 5 1"
{{:name "Min", :record-type :var} {:record-type :any}, {:name "Max", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "TE", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl remove_duplicated_edges_w 2 0"
{}
{}
"graphpl remove_duplicated_edges_w 2 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl remove_duplicated_edges_w 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "TE", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_path_unweighted_ 5 0"
{{:name "_434", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}}
{}
"graphpl find_path_unweighted_ 5 1"
{{:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl find_path_unweighted_ 5 2"
{{:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VX", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:record-type :any}, {:name "L1", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl sum_cost 3 0"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"graphpl sum_cost 3 1"
{{:name "C", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Tot", :record-type :var} {:record-type :any}, {:name "CT1", :record-type :var} {:record-type :number}, {:name "CT", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl make_undirected_unweighted_graph 2 0"
{{:name "Y", :record-type :var} {:record-type :any}, {:name "ListOfEdgesNoDup", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ListOfEdges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "ListOfEdgesSorted", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "V", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_4268", :record-type :var} {:record-type :any}, {:name "_4128", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"graphpl get_adjacent_nodes 3 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "LN", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VX", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VT", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "VY", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Node", :record-type :var} {:record-type :any}}
{}
"graphpl connected_w 4 0"
{{:name "Edges", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "V2", :record-type :var} {:record-type :any}, {:name "V1", :record-type :var} {:record-type :any}}
{}
"graphpl graph_reverse_edges 2 0"
{{:name "Edges", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "LN", :record-type :var} {:record-type :any}, {:name "RevEdges", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:58:31.583: Step 0"
"2019-05-13T10:58:31.692: Step 1"
"2019-05-13T10:58:31.806: Step 2"
"webconsole wc_option 2 0"
{{:name "Option", :record-type :var} {:record-type :nonvar}, {:name "GenOption", :record-type :var} {:record-type :nonvar}, {:name "Name", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Default", :record-type :var} {:record-type :any}, {:name "Gen", :record-type :var} {:record-type :any}}
{}
"webconsole wc_html 2 0"
{{:name "WCId", :record-type :var} {:record-type :any}, {:name "HTML", :record-type :var} {:record-type :any}}
{}
"webconsole wc_ask 4 0"
{{:name "InputId", :record-type :var} {:record-type :any}, {:name "QuestionList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :number}, {:name "_Options", :record-type :var} {:record-type :any}}
{{:head {:functor "random", :arglist ({:functor "<<", :arglist ({:value 1, :record-type :integer} {:value 63, :record-type :integer}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:functor "random", :arglist ({:functor "<<", :arglist ({:value 1, :record-type :integer} {:value 63, :record-type :integer}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"webconsole wc_format 4 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "WCId", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"webconsole bind_form 2 0"
{{:name "_396", :record-type :var} {:record-type :any}}
{}
"webconsole bind_form 2 1"
{{:name "Form", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"webconsole wc_format 2 0"
{{:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"webconsole wc_start 0 0"
{}
{}
"webconsole wc_browser 1 0"
{{:name "URL", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}, {:name "Home", :record-type :var} {:record-type :any}}
{}
"webconsole wc_html 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "WCId", :record-type :var} {:record-type :any}, {:name "HTML", :record-type :var} {:record-type :any}}
{}
"webconsole wc_format 3 0"
{{:name "WCId", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}}
{}
"webconsole wc_message 1 0"
{{:name "_Request", :record-type :var} {:record-type :any}}
{}
"webconsole location 3 0"
{}
{}
"webconsole x_header 1 0"
{{:name "Bool", :record-type :var} {:record-type :any}}
{}
"webconsole wc_home 1 0"
{{:name "Title", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"webconsole --> 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"webconsole --> 2 1"
{}
{}
"webconsole --> 2 3"
{{:name "Id", :record-type :var} {:record-type :any}}
{}
"webconsole --> 2 2"
{{:name "HREF", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"webconsole wc_server 1 0"
{{:name "Port", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}}
{}
"webconsole wc_server 1 1"
{{:name "Port", :record-type :var} {:record-type :any}, {:name "_452", :record-type :var} {:record-type :any}}
{}
"wc_demo flag_table 0 0"
{{:name "Flag", :record-type :var} {:record-type :any}, {:name "Sorted", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Pairs", :record-type :var} {:type {:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, :record-type :list}}
{}
"webconsole reply_message 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Format", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"webconsole reply_message 3 1"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Tokens", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HTML", :record-type :var} {:record-type :any}}
{}
"wc_demo age 1 0"
{{:name "Age", :record-type :var} {:record-type :any}}
{}
"webconsole wc_html 1 0"
{{:name "HTML", :record-type :var} {:record-type :any}}
{}
"webconsole wc_ask 2 0"
{{:name "Question", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"webconsole wc_allowed 1 0"
{{:name "Peer", :record-type :var} {:record-type :any}, {:name "_686", :record-type :var} {:record-type :any}, {:name "Allow", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"wc_demo --> 2 0"
{}
{}
"wc_demo --> 2 1"
{{:name "H", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"wc_demo --> 2 2"
{{:name "Flag", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"webconsole wc_reply 1 0"
{{:name "Form", :record-type :var} {:record-type :any}, {:name "Result", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"webconsole wc_start 1 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:58:32.384: Step 0"
"2019-05-13T10:58:32.529: Step 1"
"hdt hdt_node 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Node", :record-type :var} {:record-type :any}}
{}
"hdt boolean 1 0"
{}
{}
"hdt boolean 1 1"
{}
{}
"hdt header_untyped_object 2 0"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "_4566", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"hdt header_untyped_object 2 1"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:functor "^^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_524", :record-type :var} {:record-type :any}, {:name "_522", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"hdt header_untyped_object 2 2"
{{:name "O", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"hdt --> 2 0"
{{:name "Message", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 0"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 7"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 1"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 4"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 6"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 3"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 2"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 9"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 5"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 1 8"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"hdt canonical_string 2 0"
{{:name "Lexical", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"hdt canonical_string 2 1"
{{:name "Lang", :record-type :var} {:record-type :any}, {:name "Lexical", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}}
{}
"hdt hdt_shared 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Shared", :record-type :var} {:record-type :any}}
{}
"hdt hdt_post_triple 3 0"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "S0", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"hdt hdt_subject 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Subject", :record-type :var} {:record-type :any}}
{}
"hdt hdt_search 4 0"
{{:name "O", :record-type :var} {:record-type :any}, {:name "OHDT", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"hdt pre_object 3 0"
{{:name "O", :record-type :var} {:record-type :atom}, {:name "OHDT", :record-type :var} {:record-type :atom}, {:name "_HDT", :record-type :var} {:record-type :any}}
{}
"hdt pre_object 3 1"
{{:name "O", :record-type :var} {:record-type :ground}, {:name "OHDT", :record-type :var} {:record-type :any}, {:name "Lexical", :record-type :var} {:arglist #{{:functor "@", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:functor "^^", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}, {:name "_HDT", :record-type :var} {:record-type :any}}
{}
"hdt pre_object 3 3"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"hdt pre_object 3 2"
{{:name "_942", :record-type :var} {:record-type :any}, {:name "Lang", :record-type :var} {:record-type :any}, {:name "Found", :record-type :var} {:record-type :integer}, {:name "O", :record-type :var} {:functor "@", :arglist ({:record-type :ground} {:record-type :any}), :record-type :compound}, {:name "String", :record-type :var} {:record-type :ground}, {:name "Prefix", :record-type :var} {:record-type :any}, {:name "OHDT", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "HDT", :record-type :var} {:record-type :any}}
{}
"hdt post_object 2 0"
{{:name "O", :record-type :var} {:record-type :ground}, {:name "_HDT", :record-type :var} {:record-type :any}}
{}
"hdt post_object 2 1"
{{:name "O", :record-type :var} {:record-type :atom}, {:name "IRI", :record-type :var} {:record-type :atom}}
{}
"hdt post_object 2 2"
{{:name "O", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}}
{}
"hdt hdt_object 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Object", :record-type :var} {:record-type :any}}
{}
"hdt hdt_property 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Property", :record-type :var} {:arglist #{{:functor "elements", :arglist ({:record-type :any}), :record-type :compound} {:functor "predicates", :arglist ({:record-type :any}), :record-type :compound} {:functor "subjects", :arglist ({:record-type :any}), :record-type :compound} {:functor "objects", :arglist ({:record-type :any}), :record-type :compound} {:functor "max_object_id", :arglist ({:record-type :any}), :record-type :compound} {:functor "max_subject_id", :arglist ({:record-type :any}), :record-type :compound} {:functor "mapping", :arglist ({:record-type :any}), :record-type :compound} {:functor "max_id", :arglist ({:record-type :any}), :record-type :compound} {:functor "max_predicate_id", :arglist ({:record-type :any}), :record-type :compound} {:functor "shared", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"hdt hdt_predicate 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "Predicate", :record-type :var} {:record-type :any}}
{}
"hdt hdt_pre_triple 3 0"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "S0", :record-type :var} {:record-type :any}, {:name "P0", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"hdt hdt_predicate_id 3 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"hdt hdt_open 2 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"hdt header_object 2 0"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}}
{}
"hdt header_object 2 1"
{{:name "O", :record-type :var} {:record-type :any}}
{}
"hdt hdt_header 4 0"
{{:name "O0", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"hdt pre_iri_id 4 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}}
{}
"hdt pre_iri_id 4 1"
{{:name "In", :record-type :var} {:record-type :any}, {:name "Role", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}}
{}
"hdt hdt_object_id 3 0"
{{:name "String", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "Object", :record-type :var} {:record-type :any}}
{}
"hdt hdt_search_cost 5 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "Triple", :record-type :var} {:functor "t", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "S", :record-type :var} {:record-type :any}, {:name "SID", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}, {:name "PID", :record-type :var} {:record-type :any}, {:name "Cost", :record-type :var} {:record-type :any}, {:name "O", :record-type :var} {:record-type :any}, {:name "TripleID", :record-type :var} {:functor "t", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "OID", :record-type :var} {:record-type :any}}
{}
"hdt hdt_search_cost 5 1"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "_432", :record-type :var} {:record-type :any}}
{}
"hdt hdt_subject_id 3 0"
{{:name "HDT", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"hdt post_iri_id 4 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_420", :record-type :var} {:record-type :any}, {:name "S0", :record-type :var} {:record-type :atom}, {:name "_418", :record-type :var} {:record-type :any}}
{}
"hdt post_iri_id 4 1"
{{:name "In", :record-type :var} {:record-type :any}, {:name "Role", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}, {:name "HDT", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:58:32.858: Step 0"
"2019-05-13T10:58:32.993: Step 1"
"no_repeats memberchk_same3 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "Hold", :record-type :var} {:functor "hold", :arglist ({:record-type :any}), :record-type :compound}}
{}
"no_repeats memb_r 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "Hold", :record-type :var} {:functor "hold", :arglist ({:record-type :any}), :record-type :compound}}
{}
"no_repeats no_repeats_cmp 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :ground}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_cmp 3 1"
{{:name "CONS", :record-type :var} {:arglist ({:record-type :atom}), :record-type :tuple}, {:name "_714", :record-type :var} {:record-type :any}, {:name "CVs", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_pred_rev 3 0"
{{:name "Y0", :record-type :var} {:record-type :any}, {:name "_642", :record-type :var} {:record-type :integer}, {:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_pred_rev 3 1"
{{:name "Pred", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_same2 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "Hold", :record-type :var} {:functor "hold", :arglist ({:record-type :any}), :record-type :compound}}
{}
"no_repeats no_repeats_var 2 0"
{{:name "Cmp", :record-type :var} {:record-type :any}, {:name "Var", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_save 2 0"
{{:name "USE", :record-type :var} {:record-type :any}, {:name "SavedList", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats succeeds_n_times 2 0"
{{:name "Counter", :record-type :var} {:functor "counter", :arglist ({:record-type :integer}), :record-type :compound}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "Times", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_same1 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"no_repeats memberchk_cmp 3 0"
{{:name "XY", :record-type :var} {:record-type :any}, {:name "CONS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Cmp", :record-type :var} {:record-type :any}}
{}
"no_repeats same_forms 2 0"
{{:name "F1", :record-type :var} {:record-type :any}, {:name "F2", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :any}, {:name "A2", :record-type :var} {:record-type :any}}
{}
"no_repeats same_forms 2 1"
{{:name "F1", :record-type :var} {:record-type :any}, {:name "F2", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:record-type :any}, {:name "A2", :record-type :var} {:record-type :any}}
{}
"no_repeats same_forms 2 4"
{{:name "F1", :record-type :var} {:record-type :any}, {:name "F2", :record-type :var} {:record-type :any}}
{}
"no_repeats same_forms 2 3"
{{:name "F1", :record-type :var} {:record-type :any}, {:name "F2", :record-type :var} {:record-type :any}}
{}
"no_repeats same_forms 2 2"
{{:name "F1", :record-type :var} {:record-type :any}, {:name "F2", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_u 2 0"
{{:name "CONS", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "_440", :record-type :var} {:record-type :any}, {:name "CVs", :record-type :var} {:record-type :any}, {:name "_552", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :empty-list}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_same0 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"no_repeats no_repeats 2 0"
{{:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_same 2 0"
{{:name "C", :record-type :var} {:record-type :nonvar}, {:name "X", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"no_repeats memberchk_same 2 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_findall5 5 0"
{{:name "USE", :record-type :var} {:record-type :any}, {:name "NEW", :record-type :var} {:record-type :any}, {:name "ExitDET", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_av 0 0"
{}
{}
"no_repeats no_repeats_var 1 0"
{{:name "Var", :record-type :var} {:record-type :any}}
{}
"no_repeats nr_test 2 0"
{}
{}
"no_repeats nr_test 2 7"
{}
{}
"no_repeats nr_test 2 1"
{}
{}
"no_repeats nr_test 2 4"
{}
{}
"no_repeats nr_test 2 15"
{}
{}
"no_repeats nr_test 2 13"
{}
{}
"no_repeats nr_test 2 6"
{}
{}
"no_repeats nr_test 2 3"
{}
{}
"no_repeats nr_test 2 12"
{}
{}
"no_repeats nr_test 2 2"
{}
{}
"no_repeats nr_test 2 11"
{}
{}
"no_repeats nr_test 2 9"
{}
{}
"no_repeats nr_test 2 5"
{}
{}
"no_repeats nr_test 2 14"
{}
{}
"no_repeats nr_test 2 10"
{}
{}
"no_repeats nr_test 2 8"
{}
{}
"no_repeats attr_unify_hook 2 0"
{{:name "AttValue", :record-type :var} {:functor "old_vals", :arglist ({:record-type :any} {:record-type :any} {:type {:record-type :any}, :record-type :list}), :record-type :compound}, {:name "Waz", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Cmp", :record-type :var} {:record-type :any}, {:name "_Var", :record-type :var} {:record-type :any}, {:name "VarValue", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_findall_r 5 0"
{{:name "CONS", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "_728", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "CVs", :record-type :var} {:record-type :any}, {:name "ExitDET", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats loop_check_nr 1 0"
{{:name "CL", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_pred 3 0"
{{:name "Y0", :record-type :var} {:record-type :any}, {:name "_642", :record-type :var} {:record-type :integer}, {:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"no_repeats memberchk_pred 3 1"
{{:name "Pred", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Ys", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"no_repeats must_not_repeat 1 0"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats 1 0"
{{:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_save 4 0"
{{:name "USE", :record-type :var} {:record-type :any}, {:name "SavedHolder", :record-type :var} {:functor "saved", :arglist ({:record-type :any}), :record-type :compound}, {:name "_470", :record-type :var} {:record-type :any}, {:name "Saved", :record-type :var} {:record-type :any}, {:name "NEW", :record-type :var} {:record-type :any}, {:name "ExitDET", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_old 1 0"
{{:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats subtract_eq 3 0"
{{:name "_408", :record-type :var} {:record-type :any}}
{}
"no_repeats subtract_eq 3 1"
{{:name "Mid", :record-type :var} {:record-type :any}, {:name "Delete", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Set", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Result", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_old 2 0"
{{:name "Vs", :record-type :var} {:record-type :ground}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"no_repeats no_repeats_old 2 1"
{{:name "_686", :record-type :var} {:record-type :any}, {:name "CONS", :record-type :var} {:arglist ({:record-type :any}), :record-type :tuple}, {:name "_440", :record-type :var} {:record-type :any}, {:name "CVs", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "Vs", :record-type :var} {:record-type :any}, {:name "Call", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:58:33.312: Step 0"
"2019-05-13T10:58:37.010: Step 1"
"2019-05-13T10:58:48.909: Step 2"
"2019-05-13T10:59:01.898: Step 3"
"2019-05-13T10:59:15.275: Step 4"
"rtp_dqs one_rot 6 0"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_revs", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"rtp_dqs one_rot 6 1"
{{:name "Ls", :record-type :var} {:record-type :any}, {:name "Ss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:record-type :any}, {:name "Lks", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Ss_open", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}}
{}
"rtp_dqs four_rot 4 0"
{{:name "Ss_tail", :record-type :var} {:record-type :any}}
{}
"rtp_dqs four_rot 4 1"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_554", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lg", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs inject_queue 3 0"
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "Q1", :record-type :var} {:functor "q", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "St", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :atom} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "delay", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs empty_queue 1 0"
{}
{}
"rtp_dqs two_rot 6 0"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs two_rot 6 1"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:record-type :any}, {:name "Lks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}, {:name "Ss_open", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs three_rot 6 0"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs three_rot 6 1"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:record-type :any}, {:name "Lks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}, {:name "Ss_open", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs pushlist_deque 3 0"
{{:name "DQ", :record-type :var} {:record-type :any}}
{}
"rtp_dqs pushlist_deque 3 1"
{{:name "DQ_mid", :record-type :var} {:record-type :any}, {:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "El", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:record-type :any}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}
{}
"rtp_dqs reverse_deque 2 0"
{{:name "Fs_len", :record-type :var} {:record-type :any}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St", :record-type :var} {:record-type :any}}
{}
"rtp_qs pushlist_queue 3 0"
{{:name "Q", :record-type :var} {:record-type :any}}
{}
"rtp_qs pushlist_queue 3 1"
{{:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q1", :record-type :var} {:functor "q", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:functor "delay", :arglist ({:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "El", :record-type :var} {:record-type :any}, {:name "Q2", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:functor "q", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_dqs poplist_deque 3 0"
{{:name "DQ", :record-type :var} {:record-type :any}}
{}
"rtp_dqs poplist_deque 3 1"
{{:name "DQ_mid", :record-type :var} {:record-type :any}, {:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "El", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:record-type :any}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_qs injectlist_queue 3 0"
{{:name "Q", :record-type :var} {:record-type :any}}
{}
"rtp_qs injectlist_queue 3 1"
{{:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q1", :record-type :var} {:functor "q", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "El", :record-type :var} {:record-type :any}, {:name "Q2", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:functor "q", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :atom} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "delay", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}
{}
"rtp_dqs ejectlist_deque 3 0"
{{:name "DQ_dlo", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_wen", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DQ_new", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_dqs pop_deque 3 0"
{{:name "Fs_len", :record-type :var} {:record-type :any}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St", :record-type :var} {:record-type :any}}
{}
"rtp_qs poplist_queue 3 0"
{{:name "Q", :record-type :var} {:record-type :any}}
{}
"rtp_qs poplist_queue 3 1"
{{:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q1", :record-type :var} {:functor "q", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "El", :record-type :var} {:record-type :any}, {:name "Q2", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:functor "q", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :atom} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "delay", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}
{}
"rtp_dqs four_rot 6 0"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs four_rot 6 1"
{{:name "Ls", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:record-type :any}, {:name "Lks", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}, {:name "Ss_open", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "L1", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs make_q 4 0"
{{:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_4154", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fs1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "St1", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs make_q 4 1"
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs make_q 4 3"
{{:name "A3", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A4", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs make_q 4 2"
{{:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:record-type :any}}
{}
"rtp_dqs injectlist_deque 3 0"
{{:name "DQ_dlo", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_wen", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Els", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "DQ_new", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_dqs two_rot 4 0"
{{:name "Ss_tail", :record-type :var} {:record-type :any}}
{}
"rtp_dqs two_rot 4 1"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_554", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lg", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs pop_queue 3 0"
{{:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Q1", :record-type :var} {:functor "q", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "F", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list}), :record-type :compound} {:record-type :atom} {:functor "wait", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound} {:functor "delay", :arglist ({:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs push_deque 3 0"
{{:name "Fs_len", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "Fs1_len", :record-type :var} {:record-type :number}, {:name "F", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St", :record-type :var} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs make_dq 6 0"
{{:name "Fs_len", :record-type :var} {:record-type :any}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "DQ", :record-type :var} {:record-type :any}}
{}
"rtp_dqs make_dq 6 1"
{{:name "Fs_len", :record-type :var} {:record-type :any}, {:name "A3", :record-type :var} {:record-type :any}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "A2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs make_dq 6 2"
{{:name "A2", :record-type :var} {:record-type :any}, {:name "Fs_len", :record-type :var} {:record-type :any}, {:name "A5", :record-type :var} {:record-type :any}, {:name "A1", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "A3", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fs", :record-type :var} {:record-type :any}, {:name "Rs_len", :record-type :var} {:record-type :any}, {:name "A4", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_dqs empty_deque 1 0"
{}
{}
"rtp_qs push_queue 3 0"
{{:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "F", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:record-type :any}, {:name "St", :record-type :var} {:record-type :any}}
{}
"rtp_dqs three_rot 4 0"
{{:name "Ss_tail", :record-type :var} {:record-type :any}}
{}
"rtp_dqs three_rot 4 1"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_554", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lg", :record-type :var} {:record-type :any}, {:name "St1", :record-type :var} {:arglist #{{:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}}
{}
"rtp_qs rot 5 0"
{{:name "Rs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}}
{}
"rtp_qs rot 5 1"
{{:name "Fs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_4280", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Fs_tail", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "F", :record-type :var} {:record-type :any}, {:name "Rs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rtp_dqs eject_deque 3 0"
{{:name "DQ_dlo", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_wen", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "El", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_dqs inject_deque 3 0"
{{:name "DQ_dlo", :record-type :var} {:functor "dq", :arglist ({:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of} {:type {:record-type :any}, :record-type :list} {:record-type :any} {:record-type :any} {:arglist #{{:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:record-type :any} {:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound} {:record-type :atom} {:functor "rot", :arglist ({:type {:record-type :any}, :record-type :list} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}, {:name "DQ_wen", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "El", :record-type :var} {:record-type :any}, {:name "DQ_new", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "DQ_old", :record-type :var} {:functor "dq", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"rtp_dqs one_rot 4 0"
{{:name "Ss_tail", :record-type :var} {:record-type :any}}
{}
"rtp_dqs one_rot 4 1"
{{:name "Lgs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Ss_tail", :record-type :var} {:record-type :any}, {:name "Lgs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_604", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lgs_revs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Lg", :record-type :var} {:record-type :any}}
{}
"rtp_qs wait 2 0"
{}
{}
"rtp_qs wait 2 1"
{{:name "Rs_rev", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_3990", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:30.537: Step 0"
"2019-05-13T10:59:30.614: Step 1"
"sw_template_handling reply_html 2 0"
{{:name "Head", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}}
{}
"simple_web sw_run 1 0"
{{:name "Options", :record-type :var} {:record-type :any}}
{}
"sw_route_handling var_route 3 0"
{{:name "R", :record-type :var} {:record-type :nonvar}, {:name "A", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sw_route_handling var_route 3 1"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_408", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"simple_web run 0 0"
{{:name "_1312", :record-type :var} {:record-type :any}}
{}
"sw_config_handling get_config 2 0"
{{:name "Key", :record-type :var} {:record-type :any}, {:name "Val", :record-type :var} {:record-type :any}}
{}
"sw_config_handling get_config 2 1"
{{:name "Key", :record-type :var} {:record-type :atom}, {:name "Val", :record-type :var} {:record-type :atom}}
{}
"sw_template_handling render_reply 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :ground}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}}
{}
"sw_static_handling reply_file 3 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"sw_static_handling reply_file 3 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"simple_web run 1 0"
{{:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"simple_web run 1 1"
{{:name "Options", :record-type :var} {:record-type :any}}
{}
"simple_web reply_404 1 0"
{{:name "Request", :record-type :var} {:record-type :any}}
{}
"sw_route_handling init_routes 0 0"
{{:name "_Request", :record-type :var} {:record-type :any}, {:name "_5490", :record-type :var} {:record-type :any}, {:name "_794", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "RoutesS", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "RoutesM", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Req", :record-type :var} {:record-type :any}, {:name "Routes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sw_route_handling handle_routes 1 0"
{}
{}
"sw_route_handling handle_routes 1 1"
{{:name "R", :record-type :var} {:arglist #{{:functor "-", :arglist ({:functor "-", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "-", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}}, :record-type :one-of}, {:name "Routes", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sw location 2 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{}
"sw_template_handling reply_html 3 0"
{{:name "Style", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}}
{}
"sw_route_handling handle_route 1 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"sw_route_handling handle_route 1 1"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :ground}, {:name "_470", :record-type :var} {:record-type :any}, {:name "_596", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "_594", :record-type :var} {:record-type :any}}
{}
"sw_route_handling handle_route 1 2"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :nonvar}, {:name "Route", :record-type :var} {:record-type :nonvar}, {:name "_470", :record-type :var} {:record-type :any}, {:name "_828", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "P", :record-type :var} {:record-type :any}, {:name "_596", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "_594", :record-type :var} {:record-type :any}}
{}
"sw_route_handling method_route 4 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "R", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"sw_route_handling method_route 4 1"
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "_422", :record-type :var} {:record-type :any}}
{}
"sw_static_handling location 3 0"
{}
{}
"sw location 3 0"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Name", :record-type :var} {:record-type :any}}
{}
"sw_route_handling url_for 2 0"
{}
{}
"sw_route_handling url_for 2 1"
{{:name "StaticPath", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"sw_route_handling url_for 2 3"
{{:name "Route", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :any}, {:name "SHandler", :record-type :var} {:record-type :any}}
{}
"sw_route_handling url_for 2 2"
{{:name "Route", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :any}}
{}
"sw_route_handling url_for 3 0"
{{:name "Handler", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}}
{}
"sw_route_handling url_for 3 1"
{{:name "Route", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "Handler", :record-type :var} {:record-type :ground}}
{}
"sw_config_handling default 2 0"
{}
{}
"sw_config_handling default 2 7"
{}
{}
"sw_config_handling default 2 1"
{}
{}
"sw_config_handling default 2 4"
{}
{}
"sw_config_handling default 2 6"
{}
{}
"sw_config_handling default 2 3"
{}
{}
"sw_config_handling default 2 2"
{}
{}
"sw_config_handling default 2 5"
{}
{}
"sw_template_handling reply_template 3 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Config", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{{:functor "put", :arglist ({:name "Options", :record-type :var}), :record-type :compound} {:reason "No valid intersection of List(Any) and Compound(put(Any))", :record-type :error}}
"sw_template_handling reply_html 1 0"
{{:name "HTML", :record-type :var} {:record-type :any}}
{}
"sw_route_handling log_route 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Route", :record-type :var} {:record-type :any}, {:name "Method", :record-type :var} {:record-type :any}}
{}
"sw_template_handling from_templates 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"sw_route_handling log_route 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Route", :record-type :var} {:record-type :any}}
{}
"sw_template_handling reply_template 2 0"
{{:name "Options", :record-type :var} {:record-type :any}, {:name "Template", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}}
{}
"sw_static_handling reply_file 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:31.452: Step 0"
"2019-05-13T10:59:32.099: Step 1"
"2019-05-13T10:59:32.779: Step 2"
"2019-05-13T10:59:33.427: Step 3"
"rdfs2pl property1 1 0"
{{:name "R", :record-type :var} {:record-type :any}}
{}
"rdfs2pl property1 1 1"
{{:name "R", :record-type :var} {:record-type :any}}
{}
"rdfs2pl property1 1 3"
{{:name "R", :record-type :var} {:record-type :any}}
{}
"rdfs2pl property1 1 2"
{{:name "R", :record-type :var} {:record-type :any}}
{}
"rdfs2pl write_clause 1 0"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"rdfs2pl assert_schema 2 0"
{{:name "Local", :record-type :var} {:record-type :any}, {:name "Global", :record-type :var} {:record-type :any}}
{}
"rdfs2pl maketerm 6 0"
{{:name "Term", :record-type :var} {:record-type :nonvar}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_Functor", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "_NS", :record-type :var} {:record-type :any}, {:name "URI", :record-type :var} {:record-type :any}, {:name "Label", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl maketerm 6 1"
{{:name "Functor", :record-type :var} {:record-type :any}, {:name "FunctorSafe", :record-type :var} {:record-type :any}, {:name "URI", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "T1", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl suffix_reserved 2 0"
{{:name "A", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :atom}}
{}
"rdfs2pl suffix_reserved 2 1"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"rdfs2pl write_module_schema 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl mod_exports 3 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 7"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}}
{}
"rdfs2pl mod_exports 3 1"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 4"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 6"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 3"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 2"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl mod_exports 3 5"
{{:name "R", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :atomic}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :integer}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl make_comment_from_def 2 0"
{{:name "Obj", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}, {:name "Desc", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"rdfs2pl make_comment_from_def 2 1"
{{:name "_394", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}}
{}
"rdfs2pl assert_clauses 1 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}}
{}
"rdfs2pl safe_predicate 3 0"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "P2", :record-type :var} {:record-type :any}, {:name "P1", :record-type :var} {:record-type :any}, {:name "_570", :record-type :var} {:record-type :any}, {:name "_490", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl safe_predicate 3 1"
{{:name "P", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause 3 0"
{{:name "_484", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:arglist #{{:functor ":-", :arglist ({:record-type :nonvar} {:record-type :any}), :record-type :compound} {:functor ":-", :arglist ({:record-type :any} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}}, :record-type :one-of}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause 3 1"
{{:name "Meta", :record-type :var} {:record-type :any}, {:name "Directive", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "_482", :record-type :var} {:arglist #{{:functor ":-", :arglist ({:record-type :nonvar} {:record-type :any}), :record-type :compound} {:functor ":-", :arglist ({:record-type :any} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}}, :record-type :one-of}}
{}
"rdfs2pl write_clauses 2 0"
{{:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Xs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdfs2pl cls 2 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Cs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl safe 2 0"
{{:name "Cs2", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Cs", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "Safe", :record-type :var} {:record-type :atom}, {:name "N", :record-type :var} {:record-type :atom}}
{}
"rdfs2pl write_schema 2 0"
{{:name "_4932", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Local", :record-type :var} {:record-type :any}}
{}
"rdfs2pl maketerm 3 0"
{{:name "_510", :record-type :var} {:record-type :any}, {:name "URI", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_512", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"rdfs2pl csafe 2 0"
{}
{}
"rdfs2pl csafe 2 1"
{}
{}
"rdfs2pl csafe 2 4"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"rdfs2pl csafe 2 6"
{{:name "_394", :record-type :var} {:record-type :any}}
{}
"rdfs2pl csafe 2 3"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"rdfs2pl csafe 2 2"
{}
{}
"rdfs2pl csafe 2 5"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"rdfs2pl assert_schema 1 0"
{{:name "Local", :record-type :var} {:record-type :any}, {:name "_4906", :record-type :var} {:record-type :any}}
{}
"rdfs2pl write_header 2 0"
{{:name "_1106", :record-type :var} {:record-type :any}, {:name "_1108", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "_1110", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Op", :record-type :var} {:record-type :any}, {:name "Exports", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl ont_label 2 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Label", :record-type :var} {:record-type :any}}
{}
"rdfs2pl ont_label 2 1"
{{:name "Label", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_576", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:functor "literal", :arglist ({:functor "type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}}
{}
"rdfs2pl property_to_predicate1 3 0"
{{:name "R", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Label", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdfs2pl property_to_predicate1 3 1"
{{:name "R", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "R1", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdfs2pl property_to_predicate1 3 2"
{{:name "R", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"rdfs2pl property 1 0"
{{:name "R", :record-type :var} {:record-type :any}, {:name "Rs", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdfs2pl cls1 2 0"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl psafe 3 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Suffix", :record-type :var} {:record-type :any}, {:name "Safe", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Opts2", :record-type :var} {:record-type :any}}
{}
"rdfs2pl psafe 3 1"
{{:name "X", :record-type :var} {:record-type :any}, {:name "Prefix", :record-type :var} {:record-type :any}, {:name "Safe", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "Opts2", :record-type :var} {:record-type :any}}
{}
"rdfs2pl psafe 3 2"
{{:name "Cs2", :record-type :var} {:type {:record-type :atom}, :record-type :list}, {:name "C", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}, {:name "Safe1", :record-type :var} {:record-type :atom}, {:name "C2", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Safe", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :atom}}
{}
"rdfs2pl lsafe 2 0"
{}
{}
"rdfs2pl lsafe 2 1"
{{:name "L2", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H2", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"rdfs2pl inf_clause_meta 4 0"
{{:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "Body", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :nonvar}, {:name "I", :record-type :var} {:record-type :any}, {:name "_NS", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 7"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "NOpts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}, {:name "_842", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 1"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor "rdf_has", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_650", :record-type :var} {:record-type :any}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 4"
{{:name "Head", :record-type :var} {:record-type :nonvar}, {:name "Node", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "NOpts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}, {:name "_842", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 6"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "G", :record-type :var} {:record-type :any}, {:name "_860", :record-type :var} {:record-type :any}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "NOpts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}, {:name "Axiom", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 3"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Node", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "G", :record-type :var} {:record-type :any}, {:name "_860", :record-type :var} {:record-type :any}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "NOpts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 2"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor "rdf", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_668", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}}
{}
"rdfs2pl inf_clause_meta 4 5"
{{:name "Head", :record-type :var} {:functor ":", :arglist ({:record-type :any} {:record-type :nonvar}), :record-type :compound}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Restr", :record-type :var} {:record-type :any}, {:name "NS", :record-type :var} {:record-type :any}, {:name "_810", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor ",", :arglist ({:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound} {:functor "rdf", :arglist ({:record-type :any} {:functor ":", :arglist ({:record-type :atom} {:record-type :atom}), :record-type :compound} {:record-type :any}), :record-type :compound}), :record-type :compound}), :record-type :compound}, {:name "Meta", :record-type :var} {:record-type :nonvar}, {:name "NOpts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "R", :record-type :var} {:record-type :any}, {:name "_F", :record-type :var} {:record-type :any}, {:name "Subj", :record-type :var} {:record-type :any}}
{}
"rdfs2pl make_comment 4 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"rdfs2pl make_comment 4 1"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Obj", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}, {:name "_528", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"rdfs2pl property_to_predicate 3 0"
{{:name "R", :record-type :var} {:record-type :any}, {:name "Pred", :record-type :var} {:record-type :any}, {:name "Pred0", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"rdfs2pl writep 1 0"
{{:name "X", :record-type :var} {:record-type :any}, {:name "_456", :record-type :var} {:record-type :any}}
{}
"rdfs2pl make_aux_comment 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_560", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Aux", :record-type :var} {:record-type :any}, {:name "_514", :record-type :var} {:record-type :any}, {:name "Clause", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}, {:name "S", :record-type :var} {:record-type :any}}
{}
"rdfs2pl reserved 1 0"
{}
{}
"rdfs2pl ont_desc 2 0"
{{:name "Label", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_534", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:functor "literal", :arglist ({:functor "type", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}}
{}
"rdfs2pl write_schema 3 0"
{{:name "Global", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Local", :record-type :var} {:record-type :any}}
{}
"rdfs2pl maketerm 4 0"
{{:name "_524", :record-type :var} {:record-type :any}, {:name "URI", :record-type :var} {:record-type :any}, {:name "_526", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Opts", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :nonvar}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:34.656: Step 0"
"2019-05-13T10:59:34.758: Step 1"
"file_scope contains_f 2 0"
{{:name "F", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Sub", :record-type :var} {:arglist #{{:functor nil, :arglist (), :record-type :compound} {:record-type :atom}}, :record-type :one-of}, {:name "_4132", :record-type :var} {:record-type :any}}
{}
"file_scope disable_in_file 1 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:record-type :nonvar}), :record-type :compound}}
{}
"file_scope signal_eof 0 0"
{{:name "F", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eof 1 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eof 1 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eof 1 2"
{{:name "_382", :record-type :var} {:record-type :any}}
{}
"file_scope is_file_enabling 1 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:record-type :nonvar}), :record-type :compound}}
{}
"file_scope asserta_until_eof 1 0"
{{:name "Fact", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope notice_file 3 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "_1566", :record-type :var} {:record-type :any}, {:name "_LineNo", :record-type :var} {:record-type :any}}
{}
"file_scope notice_file 3 1"
{{:name "_1394", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "LineNo", :record-type :var} {:record-type :any}}
{}
"file_scope add_did_id 3 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}, {:name "List2", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:functor nil, :arglist (), :record-type :compound}}
{}
"file_scope add_did_id 3 1"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "NewBody", :record-type :var} {:record-type :any}}
{}
"file_scope assert_until_eof 1 0"
{{:name "Fact", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope call_on_eof 1 0"
{{:name "Call", :record-type :var} {:record-type :any}}
{}
"file_scope file_option_to_db 2 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:record-type :nonvar}), :record-type :compound}, {:name "DBP", :record-type :var} {:record-type :nonvar}}
{}
"file_scope file_local_flag 1 0"
{}
{}
"file_scope file_local_flag 1 1"
{}
{}
"file_scope term_expansion 4 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_434", :record-type :var} {:record-type :any}, {:name "EOF", :record-type :var} {:record-type :any}, {:name "Pos", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 0"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 7"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 1"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 4"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 6"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 3"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 2"
{{:name "File", :record-type :var} {:record-type :any}, {:name "IFile", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 9"
{}
{}
"file_scope loading_source_file0 1 5"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file0 1 8"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope check_skip_id 3 0"
{{:name "_450", :record-type :var} {:record-type :any}, {:name "Option", :record-type :var} {:record-type :any}, {:name "_480", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:reason "No valid intersection", :record-type :error}}
{{:functor "filescope_did", :arglist ({:name "List", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:name "List", :record-type :var}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:head {:functor ",", :arglist ({:functor "filescope_did", :arglist ({:name "List", :record-type :var}), :record-type :compound} {:name "_450", :record-type :var}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}, {:name "List", :record-type :var} {:reason "No valid intersection", :record-type :error}, {:functor ",", :arglist ({:functor "filescope_did", :arglist ({:name "List", :record-type :var}), :record-type :compound} {:name "_450", :record-type :var}), :record-type :compound} {:reason "No valid intersection", :record-type :error}}
"file_scope check_skip_id 3 1"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "Head", :record-type :var} {:record-type :any}, {:name "Body", :record-type :var} {:record-type :any}}
{}
"file_scope do_eof_actions 2 0"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "GETTER", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "global_eof_hook", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "File", :record-type :var} {:record-type :any}, {:name "WasM", :record-type :var} {:record-type :any}, {:name "_Ref", :record-type :var} {:record-type :any}, {:name "TODO", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope do_eof_actions 2 1"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "GETTER", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "eof_hook", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "File", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "TODO", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope do_eof_actions 2 2"
{{:name "Module", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope contains_eq 2 0"
{{:name "USub", :record-type :var} {:record-type :any}, {:name "Term", :record-type :var} {:record-type :any}, {:name "Sub", :record-type :var} {:record-type :any}}
{}
"file_scope filescope_did 1 0"
{{:name "_382", :record-type :var} {:record-type :any}}
{}
"file_scope loading_source_file 1 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "File0", :record-type :var} {:record-type :any}}
{}
"file_scope set_prolog_flag_until_eof 2 0"
{{:name "FlagName", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "_4988", :record-type :var} {:record-type :any}}
{}
"file_scope set_prolog_flag_until_eof 2 1"
{{:name "FlagName", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "PrevValue", :record-type :var} {:record-type :any}}
{}
"file_scope begin_file_scope 1 0"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope begin_file_scope 1 1"
{{:name "Flag", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}}
{}
"file_scope set_skip_file_expansion 2 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "TF", :record-type :var} {:record-type :any}, {:name "WAS", :record-type :var} {:record-type :any}, {:name "SKIP", :record-type :var} {:functor ",", :arglist ({:functor "notrace", :arglist ({:functor ",", :arglist ({:functor "prolog_load_context", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:functor "skip_file_expansion", :arglist ({:record-type :any} {:record-type :atom}), :record-type :compound}), :record-type :compound}), :record-type :compound}), :record-type :compound} {:record-type :atom}), :record-type :compound}, {:name "_474", :record-type :var} {:record-type :any}, {:name "HEAD1", :record-type :var} {:functor "term_expansion", :arglist ({:record-type :any} {:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "File", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "HEAD2", :record-type :var} {:functor "term_expansion", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"file_scope asserta_until_eof 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Fact", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eom 1 0"
{{:name "_Module", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eom 1 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "LittleFile", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eom 1 3"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"file_scope signal_eom 1 2"
{{:name "Body", :record-type :var} {:record-type :any}, {:name "GETTER", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:functor "eof_hook", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "TODO", :record-type :var} {:record-type :any}, {:name "Module", :record-type :var} {:record-type :any}, {:name "_File", :record-type :var} {:record-type :any}}
{}
"file_scope begin_file_scope 0 0"
{{:name "File", :record-type :var} {:record-type :any}}
{}
"file_scope enable_in_file 1 0"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "DB", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:record-type :nonvar}), :record-type :compound}}
{}
"file_scope assert_until_eof 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Ref", :record-type :var} {:record-type :any}, {:name "Fact", :record-type :var} {:record-type :any}}
{}
"file_scope call_on_eom 1 0"
{{:name "Call", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:35.355: Step 0"
"2019-05-13T10:59:35.500: Step 1"
"atom_feed url_ns 3 0"
{{:name "_410", :record-type :var} {:record-type :any}}
{}
"atom_feed email 2 0"
{{:name "EmailText", :record-type :var} {:record-type :any}, {:name "Email", :record-type :var} {:record-type :any}, {:name "Author", :record-type :var} {:record-type :any}}
{}
"atom_feed content 2 0"
{{:name "ContentText", :record-type :var} {:record-type :any}, {:name "Content", :record-type :var} {:record-type :any}, {:name "Entry", :record-type :var} {:record-type :any}}
{}
"atom_feed content 2 1"
{{:name "ContentText", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "_548", :record-type :var} {:record-type :any}, {:name "Entry", :record-type :var} {:functor "rss_entry", :arglist ({:record-type :any}), :record-type :compound}}
{}
"atom_feed type 2 0"
{{:name "Subtype", :record-type :var} {:record-type :any}, {:name "Attrs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "RawType", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "_446", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"atom_feed type 2 1"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"atom_feed ssl_verify 5 0"
{{:name "_SSL", :record-type :var} {:record-type :any}, {:name "_FirstCertificate", :record-type :var} {:record-type :any}, {:name "_ProblemCertificate", :record-type :var} {:record-type :any}, {:name "_Error", :record-type :var} {:record-type :any}, {:name "_AllCertificates", :record-type :var} {:record-type :any}}
{}
"atom_feed summary 2 0"
{{:name "Summary", :record-type :var} {:record-type :any}, {:name "SummaryText", :record-type :var} {:record-type :any}, {:name "Title", :record-type :var} {:record-type :any}, {:name "Entry", :record-type :var} {:record-type :any}}
{}
"atom_feed xpath 2 0"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "_458", :record-type :var} {:record-type :any}}
{}
"atom_feed id 2 0"
{{:name "IdText", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"atom_feed id 2 1"
{{:name "IdText", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"atom_feed published 2 0"
{{:name "Published", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "Date", :record-type :var} {:record-type :any}, {:name "Epoch", :record-type :var} {:record-type :any}}
{}
"atom_feed title 2 0"
{{:name "TitleText", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "Title", :record-type :var} {:record-type :any}}
{}
"atom_feed title 2 1"
{{:name "TitleText", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}, {:name "Title", :record-type :var} {:record-type :any}}
{}
"atom_feed title 2 2"
{{:name "TitleText", :record-type :var} {:record-type :any}, {:name "Attrs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Dom", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:type {:record-type :any}, :record-type :list} {:record-type :any}), :record-type :compound}, {:name "_492", :record-type :var} {:record-type :any}, {:name "_488", :record-type :var} {:record-type :any}}
{}
"atom_feed href 2 0"
{{:name "_512", :record-type :var} {:record-type :any}, {:name "Link", :record-type :var} {:functor "element", :arglist ({:record-type :atom} {:record-type :any} {:arglist ({:record-type :any}), :record-type :tuple}), :record-type :compound}, {:name "Href", :record-type :var} {:record-type :any}}
{}
"atom_feed entry 2 0"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "Entry", :record-type :var} {:record-type :any}}
{}
"atom_feed updated 2 0"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "Date", :record-type :var} {:record-type :any}, {:name "Epoch", :record-type :var} {:record-type :any}, {:name "Updated", :record-type :var} {:record-type :any}}
{}
"atom_feed rel 2 0"
{{:name "Rel", :record-type :var} {:record-type :any}, {:name "Rel0", :record-type :var} {:record-type :any}, {:name "Attrs", :record-type :var} {:record-type :any}, {:name "_492", :record-type :var} {:record-type :any}, {:name "Link", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_488", :record-type :var} {:record-type :any}}
{}
"atom_feed rel 2 1"
{{:name "_400", :record-type :var} {:record-type :any}}
{}
"atom_feed name 2 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "Author", :record-type :var} {:record-type :any}, {:name "NameText", :record-type :var} {:record-type :any}}
{}
"atom_feed author 2 0"
{{:name "Author", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{}
"atom_feed author 2 1"
{{:name "Author", :record-type :var} {:record-type :any}, {:name "Dom", :record-type :var} {:record-type :any}}
{}
"atom_feed wrap_feed 3 0"
{{:name "Tree", :record-type :var} {:record-type :any}}
{}
"atom_feed parse_xml 3 0"
{{:name "Root", :record-type :var} {:record-type :any}, {:name "_Children", :record-type :var} {:record-type :any}, {:name "Source", :record-type :var} {:record-type :any}, {:name "Flavor", :record-type :var} {:record-type :any}, {:name "Tree", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "_Attrs", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"atom_feed link 2 0"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "Link", :record-type :var} {:record-type :any}}
{}
"atom_feed link 2 1"
{{:name "Dom", :record-type :var} {:record-type :any}, {:name "Link", :record-type :var} {:record-type :any}}
{}
"atom_feed mode 1 0"
{{:name "_5174", :record-type :var} {:record-type :any}}
{}
"atom_feed mode 1 1"
{{:name "_5170", :record-type :var} {:record-type :any}}
{}
"atom_feed new_feed 2 0"
{{:name "Feed", :record-type :var} {:functor "atom_feed", :arglist ({:record-type :any}), :record-type :compound}, {:name "Flavor", :record-type :var} {:record-type :atom}, {:name "Tree", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"atom_feed new_feed 2 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Feed", :record-type :var} {:functor "atom_feed", :arglist ({:record-type :any}), :record-type :compound}, {:name "Flavor", :record-type :var} {:record-type :atom}, {:name "Tree", :record-type :var} {:functor "element", :arglist ({:record-type :any} {:record-type :any} {:record-type :any}), :record-type :compound}}
{}
"atom_feed new_feed 2 4"
{{:name "Url", :record-type :var} {:record-type :any}, {:name "Feed", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"atom_feed new_feed 2 3"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Feed", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"atom_feed new_feed 2 2"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}, {:name "Feed", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:35.797: Step 0"
"2019-05-13T10:59:36.463: Step 1"
"swipe run 1 0"
{{:name "Pipeline", :record-type :var} {:record-type :any}}
{}
"swipe u 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe u 3 1"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 0"
{{:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 7"
{{:name "T", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 20"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 27"
{{:name "Codes", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 1"
{{:name "Y2", :record-type :var} {:record-type :any}, {:name "Y1", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 24"
{{:name "_396", :record-type :var} {:record-type :any}, {:name "Pipe", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_544", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 4"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 15"
{{:name "Opts", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 21"
{{:name "_430", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 13"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "Phrase", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 22"
{{:name "_396", :record-type :var} {:record-type :any}, {:name "Pipe", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 29"
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"swipe --> 2 6"
{{:name "P", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 28"
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"swipe --> 2 25"
{{:name "A", :record-type :var} {:record-type :any}, {:name "_394", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 17"
{{:name "_422", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 3"
{{:name "Y1", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 12"
{{:name "Cmd", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 2"
{{:name "X", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "X1", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 23"
{{:name "Pipe", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Z", :record-type :var} {:record-type :any}, {:name "_394", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 19"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "Access", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 11"
{{:name "Fmt", :record-type :var} {:record-type :any}, {:name "QArgs", :record-type :var} {:record-type :any}, {:name "Args", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 9"
{{:name "M", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 5"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 14"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "QM", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 26"
{{:name "Codes", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 16"
{{:name "Ps", :record-type :var} {:record-type :any}, {:name "_618", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Opts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Spec", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 30"
{{:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"swipe --> 2 10"
{{:name "_396", :record-type :var} {:record-type :any}, {:name "Str", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 18"
{{:name "_422", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}}
{}
"swipe --> 2 8"
{{:name "A", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe def 2 0"
{{:name "T", :record-type :var} {:record-type :any}}
{}
"swipe def 2 1"
{{:name "F", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe def 2 2"
{{:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"swipe either 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe either 4 1"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe either 4 2"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"swipe arg_arg 3 0"
{{:name "_434", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}}
{}
"swipe arg_arg 3 1"
{{:name "T", :record-type :var} {:record-type :any}, {:name "Spec", :record-type :var} {:record-type :any}, {:name "String", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}}
{}
"swipe seq_types 4 0"
{{:name "In2", :record-type :var} {:record-type :any}, {:name "Out2", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Out1", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "In1", :record-type :var} {:record-type :any}}
{}
"swipe with_pipe_io 3 0"
{{:name "Pipe", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "_544", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "_504", :record-type :var} {:record-type :any}}
{}
"swipe lte 3 0"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe lte 3 1"
{{:name "_406", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"swipe lte 3 2"
{{:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"swipe par_types 4 0"
{{:name "In2", :record-type :var} {:record-type :any}, {:name "Out2", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Out1", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "In1", :record-type :var} {:record-type :any}}
{}
"swipe with_pipe_input 3 0"
{{:name "Pipe", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_462", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"swipe meet 4 0"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe meet 4 1"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe meet 4 3"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "T2", :record-type :var} {:record-type :any}, {:name "P", :record-type :var} {:record-type :any}, {:name "T1", :record-type :var} {:record-type :any}}
{}
"swipe meet 4 2"
{{:name "_418", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"swipe command 3 0"
{{:name "Type1", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "Pipeline", :record-type :var} {:record-type :any}, {:name "Type", :record-type :var} {:record-type :any}}
{}
"swipe with_pipe_output 3 0"
{{:name "Pipe", :record-type :var} {:record-type :any}, {:name "Goal", :record-type :var} {:record-type :any}, {:name "_474", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"swipe command 2 0"
{{:name "Pipeline", :record-type :var} {:record-type :any}, {:name "Cmd", :record-type :var} {:record-type :any}, {:name "_456", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T10:59:37.310: Step 0"
"2019-05-13T10:59:52.216: Step 1"
"2019-05-13T11:00:07.525: Step 2"
"msgpack array_header 2 0"
{{:name "L", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack array_header 2 1"
{{:name "L", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack unsigned32_signed32 2 0"
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned32_signed32 2 1"
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned32_signed32 2 2"
{{:name "Un", :record-type :var} {:record-type :any}}
{}
"msgpack int_bytes 3 0"
{{:name "R", :record-type :var} {:record-type :any}}
{}
"msgpack int_bytes 3 1"
{{:name "R", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :number}, {:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Bs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Bl", :record-type :var} {:record-type :number}}
{}
"msgpack array_pad_bytes 2 0"
{{:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack array_pad_bytes 2 1"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack array_pad_bytes 2 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack array_pad_bytes 2 2"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack float_bits 2 0"
{{:name "Bs", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack unsigned16_signed16 2 0"
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned16_signed16 2 1"
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned16_signed16 2 2"
{{:name "Un", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 0"
{}
{}
"msgpack --> 2 7"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 20"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 27"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 1"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 24"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 39"
{{:name "A", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 46"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 4"
{{:name "X", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 15"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 48"
{{:name "Ds", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Nn", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 50"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 21"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 31"
{{:name "L", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 32"
{{:name "A", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 40"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 33"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 13"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 22"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 36"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 41"
{}
{}
"msgpack --> 2 43"
{{:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack --> 2 29"
{{:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "S", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 44"
{{:name "LenBytes", :record-type :var} {:record-type :any}, {:name "Packed", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "LenBytes_", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack --> 2 6"
{{:name "X", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 28"
{{:name "E", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 51"
{{:name "Tss", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "Tsn", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 25"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 34"
{{:name "Data", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 17"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 3"
{{:name "D", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 12"
{}
{}
"msgpack --> 2 2"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 23"
{{:name "A", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 47"
{}
{}
"msgpack --> 2 35"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 19"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 11"
{}
{}
"msgpack --> 2 9"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 5"
{{:name "Y", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Mn", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "DST", :record-type :var} {:record-type :any}, {:name "M", :record-type :var} {:record-type :any}, {:name "Dt", :record-type :var} {:record-type :any}, {:name "TZ", :record-type :var} {:record-type :any}, {:name "Off", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 14"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 45"
{{:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 26"
{{:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 16"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 38"
{{:name "LenBytes", :record-type :var} {:record-type :any}, {:name "Packed", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "LenBytes_", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack --> 2 30"
{{:name "LenBytes", :record-type :var} {:record-type :any}, {:name "Packed", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "H", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "LenBytes_", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 10"
{}
{}
"msgpack --> 2 18"
{{:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 52"
{{:name "Nb", :record-type :var} {:record-type :any}, {:name "Se", :record-type :var} {:record-type :any}, {:name "Ts_", :record-type :var} {:record-type :any}, {:name "Na", :record-type :var} {:record-type :any}, {:name "Sf", :record-type :var} {:record-type :any}, {:name "Sd", :record-type :var} {:record-type :any}, {:name "Sg", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "Sh", :record-type :var} {:record-type :any}, {:name "Nc", :record-type :var} {:record-type :any}, {:name "Sa", :record-type :var} {:record-type :any}, {:name "Time", :record-type :var} {:record-type :any}, {:name "Nd", :record-type :var} {:record-type :any}, {:name "Sc", :record-type :var} {:record-type :any}, {:name "Tn", :record-type :var} {:record-type :any}, {:name "Sb", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 42"
{{:name "Nn", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack --> 2 37"
{{:name "H", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:record-type :any}, {:name "Len", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack --> 2 8"
{{:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack --> 2 49"
{{:name "C", :record-type :var} {:record-type :any}, {:name "Tss", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Dt", :record-type :var} {:record-type :any}, {:name "Ts", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack consume_msgpack_dict 3 0"
{}
{}
"msgpack consume_msgpack_dict 3 1"
{{:name "KVs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Nn", :record-type :var} {:record-type :number}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Rst_", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "Rst", :record-type :var} {:record-type :any}, {:name "V", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack unsigned64_signed64 2 0"
{{:name "Si", :record-type :var} {:record-type :number}, {:name "Un", :record-type :var} {:record-type :integer}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned64_signed64 2 1"
{{:name "Si", :record-type :var} {:record-type :integer}, {:name "Un", :record-type :var} {:record-type :number}, {:name "Inv", :record-type :var} {:record-type :number}}
{}
"msgpack unsigned64_signed64 2 2"
{{:name "Un", :record-type :var} {:record-type :any}}
{}
"msgpack int_bytes 2 0"
{{:name "I", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack float_bits 5 0"
{{:name "_436", :record-type :var} {:record-type :any}, {:name "_430", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:record-type :any}}
{}
"msgpack float_bits 5 1"
{{:name "Ans", :record-type :var} {:record-type :any}, {:name "Nn", :record-type :var} {:record-type :number}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Div", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "DivN", :record-type :var} {:record-type :number}, {:name "Bit", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "BitN", :record-type :var} {:record-type :number}, {:name "N", :record-type :var} {:record-type :any}}
{{:functor "+", :arglist ({:name "N", :record-type :var} {:functor "*", :arglist ({:functor "getbit", :arglist ({:name "Bs", :record-type :var} {:name "Bit", :record-type :var}), :record-type :compound} {:name "Div", :record-type :var}), :record-type :compound}), :record-type :compound} {:reason "No valid intersection", :record-type :error}, {:head {:functor "+", :arglist ({:name "N", :record-type :var} {:functor "*", :arglist ({:functor "getbit", :arglist ({:name "Bs", :record-type :var} {:name "Bit", :record-type :var}), :record-type :compound} {:name "Div", :record-type :var}), :record-type :compound}), :record-type :compound}, :tail {:record-type :empty-list}, :record-type :list} {:reason "No valid intersection", :record-type :error}}
"msgpack dict_header 2 0"
{{:name "L", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack dict_header 2 1"
{{:name "L", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack consume_msgpack_list 3 0"
{}
{}
"msgpack consume_msgpack_list 3 1"
{{:name "Nn", :record-type :var} {:record-type :number}, {:name "A", :record-type :var} {:record-type :any}, {:name "Bs", :record-type :var} {:record-type :any}, {:name "Rst", :record-type :var} {:record-type :any}, {:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "As", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"msgpack str_header 2 0"
{{:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack str_header 2 1"
{{:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack str_header 2 2"
{{:name "N", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"msgpack string_pad_bytes 2 0"
{{:name "B", :record-type :var} {:record-type :any}}
{}
"msgpack string_pad_bytes 2 1"
{{:name "B1", :record-type :var} {:record-type :any}, {:name "B2", :record-type :var} {:record-type :any}}
{}
"msgpack string_pad_bytes 2 3"
{{:name "B1", :record-type :var} {:record-type :any}, {:name "B2", :record-type :var} {:record-type :any}, {:name "B3", :record-type :var} {:record-type :any}, {:name "B4", :record-type :var} {:record-type :any}}
{}
"msgpack string_pad_bytes 2 2"
{{:name "B1", :record-type :var} {:record-type :any}, {:name "B2", :record-type :var} {:record-type :any}, {:name "B3", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T11:00:24.729: Step 0"
"2019-05-13T11:00:24.802: Step 1"
"2019-05-13T11:00:24.882: Step 2"
"file_uploader --> 2 0"
{}
{}
"file_uploader save_file 5 0"
{{:name "_808", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Options", :record-type :var} {:record-type :any}, {:name "Out", :record-type :var} {:record-type :any}, {:name "Parts0", :record-type :var} {:record-type :any}, {:name "_966", :record-type :var} {:record-type :any}, {:name "Ext", :record-type :var} {:record-type :any}, {:name "Offset", :record-type :var} {:record-type :any}, {:name "FileName", :record-type :var} {:record-type :any}, {:name "NewOffset", :record-type :var} {:record-type :any}, {:name "UUID", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}, {:name "In", :record-type :var} {:record-type :any}, {:name "IsMulti", :record-type :var} {:record-type :atom}, {:name "Dir", :record-type :var} {:record-type :any}}
{}
"fine_upload_demo file_search_path 2 0"
{}
{}
"fine_upload_demo file_search_path 2 1"
{}
{}
"fine_upload_demo file_search_path 2 4"
{}
{}
"fine_upload_demo file_search_path 2 3"
{}
{}
"fine_upload_demo file_search_path 2 2"
{}
{}
"file_uploader enforce_file_size_limit 3 0"
{{:name "Limit", :record-type :var} {:record-type :any}, {:name "FileName", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"file_uploader part_offset 4 0"
{{:name "Size", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Offset", :record-type :var} {:record-type :any}}
{}
"file_uploader part_offset 4 1"
{{:name "_420", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}}
{}
"fine_upload_demo run 0 0"
{}
{}
"file_uploader upload_file 4 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Dir", :record-type :var} {:record-type :any}, {:name "Ext", :record-type :var} {:record-type :nonvar}, {:name "Path", :record-type :var} {:record-type :any}, {:name "UUID", :record-type :var} {:record-type :any}}
{}
"file_uploader upload_file 4 1"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "Pattern", :record-type :var} {:record-type :any}, {:name "FilePattern", :record-type :var} {:record-type :atom}, {:name "Ext", :record-type :var} {:record-type :any}, {:name "_724", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}, {:name "UUID", :record-type :var} {:record-type :atom}}
{}
"fine_upload_demo handle_upload 3 0"
{{:name "Peer", :record-type :var} {:record-type :any}, {:name "File", :record-type :var} {:record-type :any}, {:name "Size", :record-type :var} {:record-type :any}, {:name "Into", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:record-type :any}}
{}
"file_uploader is_multipart_post_request 1 0"
{{:name "_860", :record-type :var} {:record-type :any}, {:name "ContentType", :record-type :var} {:record-type :any}, {:name "Request", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"file_uploader part 3 0"
{{:name "Name", :record-type :var} {:record-type :any}, {:name "V0", :record-type :var} {:record-type :any}, {:name "Value", :record-type :var} {:record-type :any}, {:name "Parts", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"fine_upload_demo home 1 0"
{{:name "_Request", :record-type :var} {:record-type :any}}
{}
"fine_upload_demo location 3 0"
{}
{}
"fine_upload_demo --> 2 0"
{}
{}
"fine_upload_demo --> 2 1"
{{:name "Template", :record-type :var} {:record-type :any}}
{}
"file_uploader location 3 0"
{}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T11:00:25.369: Step 0"
"2019-05-13T11:00:31.203: Step 1"
"dhcp translate_dhcp_option 3 0"
{{:name "A", :record-type :var} {:record-type :any}, {:name "Key", :record-type :var} {:record-type :any}}
{}
"dhcp translate_dhcp_option 3 1"
{{:name "Codes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "Atom", :record-type :var} {:record-type :atom}}
{}
"dhcp translate_dhcp_option 3 4"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp translate_dhcp_option 3 3"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp translate_dhcp_option 3 2"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp translate_dhcp_option 3 5"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp dhcp_wpad 3 0"
{{:name "IPAddress", :record-type :var} {:record-type :any}, {:name "HWAddress", :record-type :var} {:record-type :any}, {:name "WPAD", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dhcp do_exchange 3 0"
{{:name "Packet", :record-type :var} {:record-type :any}, {:name "Socket", :record-type :var} {:record-type :any}, {:name "Error", :record-type :var} {:record-type :nonvar}, {:name "_From", :record-type :var} {:record-type :any}, {:name "ReplyCodes", :record-type :var} {:record-type :any}}
{}
"dhcp dhcp_inform 4 0"
{{:name "IPAddress", :record-type :var} {:record-type :any}, {:name "Packet", :record-type :var} {:record-type :atom}, {:name "Socket", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "HWAddress", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Bytes", :record-type :var} {:type {:record-type :integer}, :record-type :list}, {:name "ReplyCodes", :record-type :var} {:record-type :any}}
{}
"pac4pl flush_pac_cache 0 0"
{{:name "_424", :record-type :var} {:record-type :any}, {:name "_426", :record-type :var} {:record-type :any}}
{}
"pac4pl --> 2 0"
{{:name "Methods", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Method", :record-type :var} {:record-type :any}}
{}
"pac4pl --> 2 1"
{}
{}
"pac4pl --> 2 4"
{{:name "HostnameString", :record-type :var} {:record-type :any}, {:name "Hostname", :record-type :var} {:record-type :any}}
{}
"pac4pl --> 2 3"
{{:name "Host", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}}
{}
"pac4pl --> 2 2"
{{:name "Host", :record-type :var} {:record-type :any}, {:name "Port", :record-type :var} {:record-type :any}}
{}
"dhcp parse_dhcp_packet_1 3 0"
{}
{}
"dhcp dhcp_message_type 2 0"
{}
{}
"pac4pl detect_wpad 1 0"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CurrentTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "Expiry", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}}
{}
"pac4pl detect_wpad 1 1"
{{:name "PacData", :record-type :var} {:record-type :any}, {:name "_748", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "CurrentTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ExpiryTime", :record-type :var} {:record-type :number}, {:name "Exception", :record-type :var} {:record-type :nonvar}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"pac4pl detect_wpad 1 4"
{{:name "Fallback", :record-type :var} {:record-type :atom}, {:name "CurrentTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ExpiryTime", :record-type :var} {:record-type :number}}
{}
"pac4pl detect_wpad 1 3"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "_510", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "HostnameParts", :record-type :var} {:record-type :any}, {:name "CurrentTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ExpiryTime", :record-type :var} {:record-type :number}, {:name "Hostname", :record-type :var} {:record-type :atom}}
{}
"pac4pl detect_wpad 1 2"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "_510", :record-type :var} {:record-type :any}, {:name "PacData", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}, {:name "_936", :record-type :var} {:record-type :any}, {:name "CurrentTime", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "ExpiryTime", :record-type :var} {:record-type :number}, {:name "Exception", :record-type :var} {:record-type :nonvar}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 0"
{{:name "_398", :record-type :var} {:record-type :any}, {:name "_418", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 1"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 4"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 3"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 2"
{{:name "_416", :record-type :var} {:record-type :any}, {:name "_436", :record-type :var} {:record-type :any}}
{}
"pac4pl possible_wpad_url 2 5"
{{:name "HostnameParts", :record-type :var} {:record-type :any}, {:name "URL", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 0"
{{:name "DHCPHeader", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 7"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dhcp --> 2 20"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 1"
{{:name "_462", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 24"
{{:name "Padded", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 4"
{{:name "Codes", :record-type :var} {:record-type :any}, {:name "Option", :record-type :var} {:record-type :any}, {:name "Code", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 15"
{}
{}
"dhcp --> 2 21"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 13"
{}
{}
"dhcp --> 2 22"
{{:name "C", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "E", :record-type :var} {:record-type :any}, {:name "F", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 6"
{}
{}
"dhcp --> 2 25"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 17"
{{:name "Hops", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 3"
{{:name "Option", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Code", :record-type :var} {:record-type :any}, {:name "Length", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 12"
{}
{}
"dhcp --> 2 2"
{{:name "Options", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 23"
{{:name "Padded", :record-type :var} {:record-type :any}, {:name "Codes", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 19"
{{:name "S", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 11"
{{:name "L", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 9"
{}
{}
"dhcp --> 2 5"
{{:name "IPAddress", :record-type :var} {:record-type :any}, {:name "Options", :record-type :var} {:record-type :any}, {:name "_580", :record-type :var} {:record-type :any}, {:name "HWAddress", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 14"
{}
{}
"dhcp --> 2 26"
{{:name "C", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 16"
{{:name "Length", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 10"
{}
{}
"dhcp --> 2 18"
{{:name "Xid", :record-type :var} {:record-type :any}}
{}
"dhcp --> 2 8"
{}
{}
"pac4pl pac 4 0"
{{:name "Source", :record-type :var} {:record-type :any}, {:name "RequestURL", :record-type :var} {:record-type :any}, {:name "RequestHostname", :record-type :var} {:record-type :any}, {:name "ConnectionMethods", :record-type :var} {:record-type :any}}
{}
"pac4pl detect_wpad_1 2 0"
{{:name "PacData", :record-type :var} {:record-type :any}, {:name "_872", :record-type :var} {:record-type :nonvar}, {:name "URL", :record-type :var} {:record-type :any}, {:name "HostnameParts", :record-type :var} {:record-type :any}, {:name "_798", :record-type :var} {:record-type :any}, {:name "Stream", :record-type :var} {:record-type :any}}
{}
"pac4pl detect_wpad_1 2 1"
{{:name "_680", :record-type :var} {:record-type :any}, {:name "_396", :record-type :var} {:record-type :any}, {:name "URLs", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "URL", :record-type :var} {:record-type :any}, {:name "HostnameParts", :record-type :var} {:record-type :any}, {:name "Message", :record-type :var} {:record-type :any}}
{}
"dhcp dhcp_wpad 1 0"
{{:name "IPAddress", :record-type :var} {:record-type :any}, {:name "HWAddress", :record-type :var} {:record-type :any}, {:name "Reply", :record-type :var} {:record-type :any}, {:name "Interfaces", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Id", :record-type :var} {:record-type :any}}
{}
"pac4pl retrieve_pac_file 2 0"
{{:name "Source", :record-type :var} {:record-type :any}, {:name "PacData", :record-type :var} {:record-type :any}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T11:00:37.404: Step 0"
"2019-05-13T11:00:39.954: Step 1"
"2019-05-13T11:00:42.754: Step 2"
"dpath pathterm_atom 2 0"
{{:name "Res3", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dpath pathterm_atom 2 1"
{{:name "Res3", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath pathterm_atom 2 2"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"dpath split_pathterm 3 0"
{{:name "H", :record-type :var} {:record-type :any}, {:name "Sd", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:record-type :any}, {:name "S", :record-type :var} {:record-type :any}, {:name "Q", :record-type :var} {:record-type :any}}
{}
"dpath split_pathterm 3 1"
{{:name "H", :record-type :var} {:record-type :any}, {:name "_410", :record-type :var} {:record-type :any}}
{}
"dpath pathterm_to_atom 2 0"
{{:name "Res3", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath pathterm_to_atom 2 1"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"dpath directory_directories 2 0"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "AAtom", :record-type :var} {:record-type :any}}
{}
"dpath directory_directories 2 1"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "BAtom", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath directory_directories 2 4"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "BAtom2", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :atom}}
{}
"dpath directory_directories 2 3"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :atom}}
{}
"dpath directory_directories 2 2"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "BAtom", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath directory_directories 2 5"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"wexplorer text_has_path 2 0"
{{:name "Q", :record-type :var} {:record-type :atom}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"wexplorer text_has_path 2 1"
{{:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath exists_dir 2 0"
{{:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath exists_file 2 0"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "PathTerm", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "PathTermDir", :record-type :var} {:record-type :any}, {:name "PathTermyfx", :record-type :var} {:record-type :any}}
{}
"dpath exists_file 2 1"
{{:name "File", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"wexplorer select 2 0"
{{:name "FileText", :record-type :var} {:record-type :atom}, {:name "Comm", :record-type :var} {:record-type :any}, {:name "FilePath", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"wexplorer select 2 1"
{{:name "SpecDir", :record-type :var} {:record-type :any}, {:name "FileText", :record-type :var} {:record-type :any}, {:name "Comm", :record-type :var} {:record-type :any}, {:name "FilePath", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"dpath extterm_to_atom 2 0"
{{:name "Res3", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "Res2", :record-type :var} {:record-type :any}, {:name "Res", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dpath extterm_to_atom 2 1"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"dpath fold2 3 0"
{{:name "R", :record-type :var} {:record-type :any}, {:name "KL", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"dpath fold2 3 1"
{{:name "R", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "X", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"dpath read_term2 3 0"
{{:name "Delimiter", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Term", :record-type :var} {:record-type :any}}
{}
"dpath exists_filetype 2 0"
{{:name "CD", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath exists_filetype 2 1"
{{:name "CD", :record-type :var} {:record-type :any}, {:name "AB", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"dpath exists_dir2 2 0"
{{:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "AB", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "B", :record-type :var} {:record-type :any}}
{}
"dpath exists_dir2 2 1"
{{:name "Atom", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atom}}
{}
"dpath exists_dir2 2 2"
{{:name "A", :record-type :var} {:record-type :any}, {:name "CD", :record-type :var} {:record-type :any}}
{}
"dpath filtered_directory_has_a_member 2 0"
{{:name "DirAtom", :record-type :var} {:record-type :any}, {:name "Member", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dpath pt_exists_file 1 0"
{{:name "PathTerm", :record-type :var} {:record-type :any}, {:name "Atom", :record-type :var} {:record-type :any}}
{}
"dpath . 3 0"
{{:name "Value", :record-type :var} {:record-type :nonvar}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Func", :record-type :var} {:record-type :any}}
{}
"dpath fold 2 0"
{{:name "W", :record-type :var} {:record-type :any}, {:name "KL", :record-type :var} {:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}}
{}
"dpath fold 2 1"
{{:name "K", :record-type :var} {:record-type :any}}
{}
"dpath dir 1 0"
{{:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
"dpath dir 1 1"
{{:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :atom}, {:name "Cd", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "_476", :record-type :var} {:record-type :any}}
{}
"dpath dir 1 3"
{{:name "A", :record-type :var} {:record-type :atom}}
{}
"dpath dir 1 2"
{{:name "A", :record-type :var} {:record-type :any}}
{}
"dpath filename_head_tail 2 0"
{{:name "FileName", :record-type :var} {:record-type :any}, {:name "HeadTail", :record-type :var} {:record-type :any}}
{}
"dpath unify_term 3 0"
{{:name "RevList", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Res", :record-type :var} {:record-type :any}, {:name "OP", :record-type :var} {:record-type :any}, {:name "Num", :record-type :var} {:record-type :number}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}}
{}
"dpath_win wexplore 1 0"
{{:name "T2", :record-type :var} {:arglist #{{:functor "file", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:arglist #{{:functor ":", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "file", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "dir", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "dir", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}, {:name "T", :record-type :var} {:functor ":", :arglist ({:record-type :atom} {:arglist #{{:functor "file", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:arglist #{{:functor ":", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "file", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "dir", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "dir", :arglist ({:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}), :record-type :compound}}
{}
"dpath_win wexplore 1 1"
{{:name "Dir", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"dpath_win wexplore 1 4"
{{:name "AbsPath", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"dpath_win wexplore 1 3"
{{:name "AbsPath", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"dpath_win wexplore 1 2"
{{:name "File", :record-type :var} {:record-type :any}, {:name "D", :record-type :var} {:record-type :any}}
{}
"dpath pathterm_bind 2 0"
{{:name "List", :record-type :var} {:record-type :any}, {:name "Nth1", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}}
{}
"dpath_win . 3 0"
{{:name "Value", :record-type :var} {:record-type :nonvar}, {:name "Data", :record-type :var} {:record-type :any}, {:name "Func", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 0"
{{:name "C", :record-type :var} {:record-type :atom}, {:name "K", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 1"
{{:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :atom}, {:name "K", :record-type :var} {:record-type :any}, {:name "Cd", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}, {:name "_4110", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 4"
{{:name "C", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 3"
{{:name "C", :record-type :var} {:record-type :atom}, {:name "K", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 2"
{{:name "_518", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :atom}, {:name "K", :record-type :var} {:record-type :any}, {:name "Cd", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dpath filetype 1 5"
{{:name "CK", :record-type :var} {:record-type :any}}
{}
"dpath file 1 0"
{{:name "_4068", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :any}}
{}
"dpath file 1 1"
{{:name "_4068", :record-type :var} {:record-type :any}, {:name "C", :record-type :var} {:functor nil, :arglist (), :record-type :compound}, {:name "A", :record-type :var} {:record-type :atom}, {:name "Cd", :record-type :var} {:record-type :any}, {:name "Rest", :record-type :var} {:record-type :any}}
{}
"dpath file 1 2"
{{:name "C", :record-type :var} {:record-type :any}}
{}
"dpath unify_term 4 0"
{{:name "Counter", :record-type :var} {:record-type :number}, {:name "Res", :record-type :var} {:record-type :nonvar}, {:name "OP", :record-type :var} {:record-type :any}, {:name "Num", :record-type :var} {:arglist #{{:functor "//", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "^", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cosh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "ceiling", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "floor", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tanh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "tan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "rem", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "cos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:record-type :number} {:functor "cot", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan2", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "acos", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sqrt", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:value "pi", :record-type :exact} {:functor "asin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "exp", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_integer_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "truncate", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "atan", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "log", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sign", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sin", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "sinh", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "max", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "xor", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "<<", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "abs", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "coth", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "**", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "float_fractional_part", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "min", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "mod", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "+", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "/\\", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "\\/", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "-", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "*", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "div", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor ">>", :arglist ({:name "arithmetic_expression", :record-type :user-defined} {:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound} {:functor "round", :arglist ({:name "arithmetic_expression", :record-type :user-defined}), :record-type :compound}}, :record-type :one-of}, {:name "H", :record-type :var} {:record-type :any}, {:name "ResD", :record-type :var} {:record-type :any}, {:name "T", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"dpath unify_term 4 1"
{{:name "_440", :record-type :var} {:record-type :any}, {:name "_442", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :any}}
{}
"dpath_win wopen 1 0"
{{:name "T", :record-type :var} {:arglist #{{:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor ":", :arglist ({:record-type :atom} {:arglist #{{:functor ":", :arglist ({:record-type :atom} {:record-type :any}), :record-type :compound} {:functor "filetype", :arglist ({:functor "/", :arglist ({:record-type :any} {:record-type :any}), :record-type :compound}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}), :record-type :compound} {:functor "filetype", :arglist ({:type {:record-type :any}, :record-type :list}), :record-type :compound}}, :record-type :one-of}}
{}
"dpath_win wopen 1 1"
{{:name "AbsPath", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"dpath_win wopen 1 2"
{{:name "AbsPath", :record-type :var} {:record-type :any}, {:name "K", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Path", :record-type :var} {:record-type :any}}
{}
"wexplorer show 2 0"
{{:name "DirPath", :record-type :var} {:record-type :any}, {:name "DirText", :record-type :var} {:record-type :atom}, {:name "Comm", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"wexplorer show 2 1"
{{:name "DirPath", :record-type :var} {:record-type :any}, {:name "DirText", :record-type :var} {:record-type :any}, {:name "SpecDir", :record-type :var} {:record-type :any}, {:name "Comm", :record-type :var} {:record-type :any}, {:name "OS", :record-type :var} {:record-type :any}}
{}
"dpath directory_files2 2 0"
{{:name "Directory", :record-type :var} {:record-type :any}, {:name "Files", :record-type :var} {:record-type :any}, {:name "Exc", :record-type :var} {:record-type :nonvar}}
{}
"dpath pathterm 3 0"
{{:name "HT", :record-type :var} {:record-type :any}, {:name "PT", :record-type :var} {:record-type :any}, {:name "List", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "Len", :record-type :var} {:record-type :integer}}
{}
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Call prolog"
"Start formatting of edn"
"Add built-ins"
"Call prolog"
"Start formatting of edn"
"Start Pre Process Single"
"2019-05-13T11:00:45.946: Step 0"
"2019-05-13T11:00:46.094: Step 1"
"edcg wants_edcg_expansion 0 0"
{{:name "Module", :record-type :var} {:record-type :any}}
{}
"edcg edcg_import_sentinel 0 0"
{}
{}
"edcg term_expansion 2 0"
{{:name "NewAcc", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "Na", :record-type :var} {:record-type :atomic}, {:name "TH", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "HArity", :record-type :var} {:record-type :any}, {:name "H", :record-type :var} {:record-type :nonvar}, {:name "Ar", :record-type :var} {:record-type :integer}, {:name "TB", :record-type :var} {:record-type :any}, {:name "B", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 0"
{{:name "NewAcc", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "TG2", :record-type :var} {:record-type :any}, {:name "G1", :record-type :var} {:record-type :any}, {:name "MidAcc", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "TG1", :record-type :var} {:record-type :any}, {:name "G2", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 7"
{{:name "Y", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "RightA", :record-type :var} {:record-type :any}, {:name "_586", :record-type :var} {:record-type :any}, {:name "_580", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "LeftA", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "_578", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 1"
{{:name "NewAcc", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "Acc1", :record-type :var} {:record-type :any}, {:name "TG2", :record-type :var} {:record-type :any}, {:name "G1", :record-type :var} {:record-type :any}, {:name "MidAcc", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "Acc2", :record-type :var} {:record-type :any}, {:name "G3", :record-type :var} {:record-type :any}, {:name "MG2", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "TG3", :record-type :var} {:record-type :any}, {:name "TG1", :record-type :var} {:record-type :any}, {:name "MG3", :record-type :var} {:record-type :any}, {:name "G2", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 4"
{{:name "Acc", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "TG", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "_TempAcc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 15"
{{:name "_550", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "_558", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atomic}, {:name "_552", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 13"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "_510", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atomic}, {:name "Pass", :record-type :var} {:type {:record-type :any}, :record-type :list}}
{}
"edcg _expand_goal 7 6"
{{:name "_536", :record-type :var} {:record-type :any}, {:name "LeftA", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "RightA", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "_538", :record-type :var} {:record-type :any}, {:name "_544", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 17"
{{:name "_HList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "GList", :record-type :var} {:record-type :any}, {:name "TG", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "_460", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "GArity", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 3"
{{:name "NewAcc", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "TG2", :record-type :var} {:record-type :any}, {:name "G1", :record-type :var} {:record-type :any}, {:name "MidAcc", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "TG1", :record-type :var} {:record-type :any}, {:name "G2", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 12"
{{:name "_508", :record-type :var} {:record-type :any}, {:name "_510", :record-type :var} {:record-type :any}, {:name "_630", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atomic}, {:name "_516", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 2"
{{:name "NewAcc", :record-type :var} {:record-type :any}, {:name "HList", :record-type :var} {:record-type :any}, {:name "Acc1", :record-type :var} {:record-type :any}, {:name "TG2", :record-type :var} {:record-type :any}, {:name "G1", :record-type :var} {:record-type :any}, {:name "MG1", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "Acc2", :record-type :var} {:record-type :any}, {:name "MG2", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "TG1", :record-type :var} {:record-type :any}, {:name "G2", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 11"
{{:name "Acc", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "_466", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "_460", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "Joiner", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 9"
{{:name "_HList", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "TG", :record-type :var} {:record-type :any}, {:name "GList", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "GArity", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_508", :record-type :var} {:record-type :any}, {:name "NGList", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 5"
{{:name "_472", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "_470", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "_478", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 14"
{{:name "_628", :record-type :var} {:record-type :any}, {:name "_508", :record-type :var} {:record-type :any}, {:name "_510", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:type {:record-type :any}, :record-type :list}, {:name "X", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :atomic}, {:name "_516", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 16"
{{:name "_510", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "X", :record-type :var} {:record-type :any}, {:name "Y", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 10"
{{:name "_510", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}, {:name "NaAr", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "L", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "_516", :record-type :var} {:record-type :any}, {:name "Joiner", :record-type :var} {:record-type :any}}
{}
"edcg _expand_goal 7 8"
{{:name "_HList", :record-type :var} {:record-type :any}, {:name "NewAcc", :record-type :var} {:record-type :any}, {:name "TG", :record-type :var} {:record-type :any}, {:name "G", :record-type :var} {:record-type :any}, {:name "Pass", :record-type :var} {:record-type :any}, {:name "GArity", :record-type :var} {:record-type :any}, {:name "AList", :record-type :var} {:record-type :any}, {:name "A", :record-type :var} {:record-type :any}, {:name "_508", :record-type :var} {:record-type :any}, {:name "Acc", :record-type :var} {:record-type :any}}
{}
